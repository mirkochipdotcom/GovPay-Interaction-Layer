<?php
/**
 * PendenzaPagata
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Pagamenti
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Pagamento
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Pagamenti\Model;

use \ArrayAccess;
use \GovPay\Pagamenti\ObjectSerializer;

/**
 * PendenzaPagata Class Doc Comment
 *
 * @category Class
 * @description Dati della pendenza con voci
 * @package  GovPay\Pagamenti
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PendenzaPagata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PendenzaPagata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_a2_a' => 'string',
        'id_pendenza' => 'string',
        'id_tipo_pendenza' => 'string',
        'dominio' => '\GovPay\Pagamenti\Model\Dominio',
        'unita_operativa' => '\GovPay\Pagamenti\Model\UnitaOperativa',
        'causale' => 'string',
        'soggetto_pagatore' => '\GovPay\Pagamenti\Model\Soggetto',
        'importo' => 'float',
        'numero_avviso' => 'string',
        'data_validita' => '\DateTime',
        'data_scadenza' => '\DateTime',
        'anno_riferimento' => 'float',
        'cartella_pagamento' => 'string',
        'dati_allegati' => 'object',
        'tassonomia' => 'string',
        'direzione' => 'string',
        'divisione' => 'string',
        'documento' => '\GovPay\Pagamenti\Model\Documento',
        'uuid' => 'string',
        'proprieta' => '\GovPay\Pagamenti\Model\ProprietaPendenza',
        'allegati' => '\GovPay\Pagamenti\Model\AllegatoPendenza[]',
        'voci' => '\GovPay\Pagamenti\Model\VocePendenzaPagata[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_a2_a' => null,
        'id_pendenza' => null,
        'id_tipo_pendenza' => null,
        'dominio' => null,
        'unita_operativa' => null,
        'causale' => null,
        'soggetto_pagatore' => null,
        'importo' => null,
        'numero_avviso' => null,
        'data_validita' => 'date',
        'data_scadenza' => 'date',
        'anno_riferimento' => null,
        'cartella_pagamento' => null,
        'dati_allegati' => null,
        'tassonomia' => null,
        'direzione' => null,
        'divisione' => null,
        'documento' => null,
        'uuid' => null,
        'proprieta' => null,
        'allegati' => null,
        'voci' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id_a2_a' => false,
        'id_pendenza' => false,
        'id_tipo_pendenza' => false,
        'dominio' => false,
        'unita_operativa' => false,
        'causale' => false,
        'soggetto_pagatore' => false,
        'importo' => false,
        'numero_avviso' => false,
        'data_validita' => false,
        'data_scadenza' => false,
        'anno_riferimento' => false,
        'cartella_pagamento' => false,
        'dati_allegati' => false,
        'tassonomia' => false,
        'direzione' => false,
        'divisione' => false,
        'documento' => false,
        'uuid' => false,
        'proprieta' => false,
        'allegati' => false,
        'voci' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_a2_a' => 'idA2A',
        'id_pendenza' => 'idPendenza',
        'id_tipo_pendenza' => 'idTipoPendenza',
        'dominio' => 'dominio',
        'unita_operativa' => 'unitaOperativa',
        'causale' => 'causale',
        'soggetto_pagatore' => 'soggettoPagatore',
        'importo' => 'importo',
        'numero_avviso' => 'numeroAvviso',
        'data_validita' => 'dataValidita',
        'data_scadenza' => 'dataScadenza',
        'anno_riferimento' => 'annoRiferimento',
        'cartella_pagamento' => 'cartellaPagamento',
        'dati_allegati' => 'datiAllegati',
        'tassonomia' => 'tassonomia',
        'direzione' => 'direzione',
        'divisione' => 'divisione',
        'documento' => 'documento',
        'uuid' => 'UUID',
        'proprieta' => 'proprieta',
        'allegati' => 'allegati',
        'voci' => 'voci'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_a2_a' => 'setIdA2A',
        'id_pendenza' => 'setIdPendenza',
        'id_tipo_pendenza' => 'setIdTipoPendenza',
        'dominio' => 'setDominio',
        'unita_operativa' => 'setUnitaOperativa',
        'causale' => 'setCausale',
        'soggetto_pagatore' => 'setSoggettoPagatore',
        'importo' => 'setImporto',
        'numero_avviso' => 'setNumeroAvviso',
        'data_validita' => 'setDataValidita',
        'data_scadenza' => 'setDataScadenza',
        'anno_riferimento' => 'setAnnoRiferimento',
        'cartella_pagamento' => 'setCartellaPagamento',
        'dati_allegati' => 'setDatiAllegati',
        'tassonomia' => 'setTassonomia',
        'direzione' => 'setDirezione',
        'divisione' => 'setDivisione',
        'documento' => 'setDocumento',
        'uuid' => 'setUuid',
        'proprieta' => 'setProprieta',
        'allegati' => 'setAllegati',
        'voci' => 'setVoci'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_a2_a' => 'getIdA2A',
        'id_pendenza' => 'getIdPendenza',
        'id_tipo_pendenza' => 'getIdTipoPendenza',
        'dominio' => 'getDominio',
        'unita_operativa' => 'getUnitaOperativa',
        'causale' => 'getCausale',
        'soggetto_pagatore' => 'getSoggettoPagatore',
        'importo' => 'getImporto',
        'numero_avviso' => 'getNumeroAvviso',
        'data_validita' => 'getDataValidita',
        'data_scadenza' => 'getDataScadenza',
        'anno_riferimento' => 'getAnnoRiferimento',
        'cartella_pagamento' => 'getCartellaPagamento',
        'dati_allegati' => 'getDatiAllegati',
        'tassonomia' => 'getTassonomia',
        'direzione' => 'getDirezione',
        'divisione' => 'getDivisione',
        'documento' => 'getDocumento',
        'uuid' => 'getUuid',
        'proprieta' => 'getProprieta',
        'allegati' => 'getAllegati',
        'voci' => 'getVoci'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id_a2_a', $data ?? [], null);
        $this->setIfExists('id_pendenza', $data ?? [], null);
        $this->setIfExists('id_tipo_pendenza', $data ?? [], null);
        $this->setIfExists('dominio', $data ?? [], null);
        $this->setIfExists('unita_operativa', $data ?? [], null);
        $this->setIfExists('causale', $data ?? [], null);
        $this->setIfExists('soggetto_pagatore', $data ?? [], null);
        $this->setIfExists('importo', $data ?? [], null);
        $this->setIfExists('numero_avviso', $data ?? [], null);
        $this->setIfExists('data_validita', $data ?? [], null);
        $this->setIfExists('data_scadenza', $data ?? [], null);
        $this->setIfExists('anno_riferimento', $data ?? [], null);
        $this->setIfExists('cartella_pagamento', $data ?? [], null);
        $this->setIfExists('dati_allegati', $data ?? [], null);
        $this->setIfExists('tassonomia', $data ?? [], null);
        $this->setIfExists('direzione', $data ?? [], null);
        $this->setIfExists('divisione', $data ?? [], null);
        $this->setIfExists('documento', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('proprieta', $data ?? [], null);
        $this->setIfExists('allegati', $data ?? [], null);
        $this->setIfExists('voci', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id_a2_a'] === null) {
            $invalidProperties[] = "'id_a2_a' can't be null";
        }
        if (!preg_match("/^([\\w\\-\\.]){1,35}$/", $this->container['id_a2_a'])) {
            $invalidProperties[] = "invalid value for 'id_a2_a', must be conform to the pattern /^([\\w\\-\\.]){1,35}$/.";
        }

        if ($this->container['id_pendenza'] === null) {
            $invalidProperties[] = "'id_pendenza' can't be null";
        }
        if (!preg_match("/^([\\w\\-\\.]){1,35}$/", $this->container['id_pendenza'])) {
            $invalidProperties[] = "invalid value for 'id_pendenza', must be conform to the pattern /^([\\w\\-\\.]){1,35}$/.";
        }

        if (!is_null($this->container['id_tipo_pendenza']) && !preg_match("/^([\\w\\-\\.]){1,35}$/", $this->container['id_tipo_pendenza'])) {
            $invalidProperties[] = "invalid value for 'id_tipo_pendenza', must be conform to the pattern /^([\\w\\-\\.]){1,35}$/.";
        }

        if (!is_null($this->container['causale']) && (mb_strlen($this->container['causale']) > 140)) {
            $invalidProperties[] = "invalid value for 'causale', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['importo']) && ($this->container['importo'] > 10000000000000000)) {
            $invalidProperties[] = "invalid value for 'importo', must be smaller than or equal to 10000000000000000.";
        }

        if (!is_null($this->container['importo']) && ($this->container['importo'] < 0)) {
            $invalidProperties[] = "invalid value for 'importo', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['numero_avviso']) && !preg_match("/[0-9]18/", $this->container['numero_avviso'])) {
            $invalidProperties[] = "invalid value for 'numero_avviso', must be conform to the pattern /[0-9]18/.";
        }

        if (!is_null($this->container['direzione']) && (mb_strlen($this->container['direzione']) > 35)) {
            $invalidProperties[] = "invalid value for 'direzione', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['direzione']) && (mb_strlen($this->container['direzione']) < 1)) {
            $invalidProperties[] = "invalid value for 'direzione', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['divisione']) && (mb_strlen($this->container['divisione']) > 35)) {
            $invalidProperties[] = "invalid value for 'divisione', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['divisione']) && (mb_strlen($this->container['divisione']) < 1)) {
            $invalidProperties[] = "invalid value for 'divisione', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['voci']) && (count($this->container['voci']) > 5)) {
            $invalidProperties[] = "invalid value for 'voci', number of items must be less than or equal to 5.";
        }

        if (!is_null($this->container['voci']) && (count($this->container['voci']) < 1)) {
            $invalidProperties[] = "invalid value for 'voci', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_a2_a
     *
     * @return string
     */
    public function getIdA2A()
    {
        return $this->container['id_a2_a'];
    }

    /**
     * Sets id_a2_a
     *
     * @param string $id_a2_a Identificativo dell'applicativo chiamante in GovPay
     *
     * @return self
     */
    public function setIdA2A($id_a2_a)
    {
        if (is_null($id_a2_a)) {
            throw new \InvalidArgumentException('non-nullable id_a2_a cannot be null');
        }

        if ((!preg_match("/^([\\w\\-\\.]){1,35}$/", ObjectSerializer::toString($id_a2_a)))) {
            throw new \InvalidArgumentException("invalid value for \$id_a2_a when calling PendenzaPagata., must conform to the pattern /^([\\w\\-\\.]){1,35}$/.");
        }

        $this->container['id_a2_a'] = $id_a2_a;

        return $this;
    }

    /**
     * Gets id_pendenza
     *
     * @return string
     */
    public function getIdPendenza()
    {
        return $this->container['id_pendenza'];
    }

    /**
     * Sets id_pendenza
     *
     * @param string $id_pendenza Identificativo della pendenza nel gestionale proprietario
     *
     * @return self
     */
    public function setIdPendenza($id_pendenza)
    {
        if (is_null($id_pendenza)) {
            throw new \InvalidArgumentException('non-nullable id_pendenza cannot be null');
        }

        if ((!preg_match("/^([\\w\\-\\.]){1,35}$/", ObjectSerializer::toString($id_pendenza)))) {
            throw new \InvalidArgumentException("invalid value for \$id_pendenza when calling PendenzaPagata., must conform to the pattern /^([\\w\\-\\.]){1,35}$/.");
        }

        $this->container['id_pendenza'] = $id_pendenza;

        return $this;
    }

    /**
     * Gets id_tipo_pendenza
     *
     * @return string|null
     */
    public function getIdTipoPendenza()
    {
        return $this->container['id_tipo_pendenza'];
    }

    /**
     * Sets id_tipo_pendenza
     *
     * @param string|null $id_tipo_pendenza Identificativo della tipologia di pendenza
     *
     * @return self
     */
    public function setIdTipoPendenza($id_tipo_pendenza)
    {
        if (is_null($id_tipo_pendenza)) {
            throw new \InvalidArgumentException('non-nullable id_tipo_pendenza cannot be null');
        }

        if ((!preg_match("/^([\\w\\-\\.]){1,35}$/", ObjectSerializer::toString($id_tipo_pendenza)))) {
            throw new \InvalidArgumentException("invalid value for \$id_tipo_pendenza when calling PendenzaPagata., must conform to the pattern /^([\\w\\-\\.]){1,35}$/.");
        }

        $this->container['id_tipo_pendenza'] = $id_tipo_pendenza;

        return $this;
    }

    /**
     * Gets dominio
     *
     * @return \GovPay\Pagamenti\Model\Dominio|null
     */
    public function getDominio()
    {
        return $this->container['dominio'];
    }

    /**
     * Sets dominio
     *
     * @param \GovPay\Pagamenti\Model\Dominio|null $dominio dominio
     *
     * @return self
     */
    public function setDominio($dominio)
    {
        if (is_null($dominio)) {
            throw new \InvalidArgumentException('non-nullable dominio cannot be null');
        }
        $this->container['dominio'] = $dominio;

        return $this;
    }

    /**
     * Gets unita_operativa
     *
     * @return \GovPay\Pagamenti\Model\UnitaOperativa|null
     */
    public function getUnitaOperativa()
    {
        return $this->container['unita_operativa'];
    }

    /**
     * Sets unita_operativa
     *
     * @param \GovPay\Pagamenti\Model\UnitaOperativa|null $unita_operativa unita_operativa
     *
     * @return self
     */
    public function setUnitaOperativa($unita_operativa)
    {
        if (is_null($unita_operativa)) {
            throw new \InvalidArgumentException('non-nullable unita_operativa cannot be null');
        }
        $this->container['unita_operativa'] = $unita_operativa;

        return $this;
    }

    /**
     * Gets causale
     *
     * @return string|null
     */
    public function getCausale()
    {
        return $this->container['causale'];
    }

    /**
     * Sets causale
     *
     * @param string|null $causale Descrizione da inserire nell'avviso di pagamento
     *
     * @return self
     */
    public function setCausale($causale)
    {
        if (is_null($causale)) {
            throw new \InvalidArgumentException('non-nullable causale cannot be null');
        }
        if ((mb_strlen($causale) > 140)) {
            throw new \InvalidArgumentException('invalid length for $causale when calling PendenzaPagata., must be smaller than or equal to 140.');
        }

        $this->container['causale'] = $causale;

        return $this;
    }

    /**
     * Gets soggetto_pagatore
     *
     * @return \GovPay\Pagamenti\Model\Soggetto|null
     */
    public function getSoggettoPagatore()
    {
        return $this->container['soggetto_pagatore'];
    }

    /**
     * Sets soggetto_pagatore
     *
     * @param \GovPay\Pagamenti\Model\Soggetto|null $soggetto_pagatore soggetto_pagatore
     *
     * @return self
     */
    public function setSoggettoPagatore($soggetto_pagatore)
    {
        if (is_null($soggetto_pagatore)) {
            throw new \InvalidArgumentException('non-nullable soggetto_pagatore cannot be null');
        }
        $this->container['soggetto_pagatore'] = $soggetto_pagatore;

        return $this;
    }

    /**
     * Gets importo
     *
     * @return float|null
     */
    public function getImporto()
    {
        return $this->container['importo'];
    }

    /**
     * Sets importo
     *
     * @param float|null $importo Importo della pendenza. Deve corrispondere alla somma delle singole voci.
     *
     * @return self
     */
    public function setImporto($importo)
    {
        if (is_null($importo)) {
            throw new \InvalidArgumentException('non-nullable importo cannot be null');
        }

        if (($importo > 10000000000000000)) {
            throw new \InvalidArgumentException('invalid value for $importo when calling PendenzaPagata., must be smaller than or equal to 10000000000000000.');
        }
        if (($importo < 0)) {
            throw new \InvalidArgumentException('invalid value for $importo when calling PendenzaPagata., must be bigger than or equal to 0.');
        }

        $this->container['importo'] = $importo;

        return $this;
    }

    /**
     * Gets numero_avviso
     *
     * @return string|null
     */
    public function getNumeroAvviso()
    {
        return $this->container['numero_avviso'];
    }

    /**
     * Sets numero_avviso
     *
     * @param string|null $numero_avviso Identificativo univoco versamento, assegnato se pagabile da psp
     *
     * @return self
     */
    public function setNumeroAvviso($numero_avviso)
    {
        if (is_null($numero_avviso)) {
            throw new \InvalidArgumentException('non-nullable numero_avviso cannot be null');
        }

        if ((!preg_match("/[0-9]18/", ObjectSerializer::toString($numero_avviso)))) {
            throw new \InvalidArgumentException("invalid value for \$numero_avviso when calling PendenzaPagata., must conform to the pattern /[0-9]18/.");
        }

        $this->container['numero_avviso'] = $numero_avviso;

        return $this;
    }

    /**
     * Gets data_validita
     *
     * @return \DateTime|null
     */
    public function getDataValidita()
    {
        return $this->container['data_validita'];
    }

    /**
     * Sets data_validita
     *
     * @param \DateTime|null $data_validita Data di validita dei dati della pendenza, decorsa la quale la pendenza può subire variazioni.
     *
     * @return self
     */
    public function setDataValidita($data_validita)
    {
        if (is_null($data_validita)) {
            throw new \InvalidArgumentException('non-nullable data_validita cannot be null');
        }
        $this->container['data_validita'] = $data_validita;

        return $this;
    }

    /**
     * Gets data_scadenza
     *
     * @return \DateTime|null
     */
    public function getDataScadenza()
    {
        return $this->container['data_scadenza'];
    }

    /**
     * Sets data_scadenza
     *
     * @param \DateTime|null $data_scadenza Data di scadenza della pendenza, decorsa la quale non è più pagabile.
     *
     * @return self
     */
    public function setDataScadenza($data_scadenza)
    {
        if (is_null($data_scadenza)) {
            throw new \InvalidArgumentException('non-nullable data_scadenza cannot be null');
        }
        $this->container['data_scadenza'] = $data_scadenza;

        return $this;
    }

    /**
     * Gets anno_riferimento
     *
     * @return float|null
     */
    public function getAnnoRiferimento()
    {
        return $this->container['anno_riferimento'];
    }

    /**
     * Sets anno_riferimento
     *
     * @param float|null $anno_riferimento Anno di riferimento della pendenza
     *
     * @return self
     */
    public function setAnnoRiferimento($anno_riferimento)
    {
        if (is_null($anno_riferimento)) {
            throw new \InvalidArgumentException('non-nullable anno_riferimento cannot be null');
        }
        $this->container['anno_riferimento'] = $anno_riferimento;

        return $this;
    }

    /**
     * Gets cartella_pagamento
     *
     * @return string|null
     */
    public function getCartellaPagamento()
    {
        return $this->container['cartella_pagamento'];
    }

    /**
     * Sets cartella_pagamento
     *
     * @param string|null $cartella_pagamento Identificativo della cartella di pagamento a cui afferisce la pendenza
     *
     * @return self
     */
    public function setCartellaPagamento($cartella_pagamento)
    {
        if (is_null($cartella_pagamento)) {
            throw new \InvalidArgumentException('non-nullable cartella_pagamento cannot be null');
        }
        $this->container['cartella_pagamento'] = $cartella_pagamento;

        return $this;
    }

    /**
     * Gets dati_allegati
     *
     * @return object|null
     */
    public function getDatiAllegati()
    {
        return $this->container['dati_allegati'];
    }

    /**
     * Sets dati_allegati
     *
     * @param object|null $dati_allegati Dati applicativi allegati dal gestionale secondo un formato proprietario.
     *
     * @return self
     */
    public function setDatiAllegati($dati_allegati)
    {
        if (is_null($dati_allegati)) {
            throw new \InvalidArgumentException('non-nullable dati_allegati cannot be null');
        }
        $this->container['dati_allegati'] = $dati_allegati;

        return $this;
    }

    /**
     * Gets tassonomia
     *
     * @return string|null
     */
    public function getTassonomia()
    {
        return $this->container['tassonomia'];
    }

    /**
     * Sets tassonomia
     *
     * @param string|null $tassonomia Macro categoria della pendenza secondo la classificazione del creditore
     *
     * @return self
     */
    public function setTassonomia($tassonomia)
    {
        if (is_null($tassonomia)) {
            throw new \InvalidArgumentException('non-nullable tassonomia cannot be null');
        }
        $this->container['tassonomia'] = $tassonomia;

        return $this;
    }

    /**
     * Gets direzione
     *
     * @return string|null
     */
    public function getDirezione()
    {
        return $this->container['direzione'];
    }

    /**
     * Sets direzione
     *
     * @param string|null $direzione Identificativo della direzione interna all'ente creditore
     *
     * @return self
     */
    public function setDirezione($direzione)
    {
        if (is_null($direzione)) {
            throw new \InvalidArgumentException('non-nullable direzione cannot be null');
        }
        if ((mb_strlen($direzione) > 35)) {
            throw new \InvalidArgumentException('invalid length for $direzione when calling PendenzaPagata., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($direzione) < 1)) {
            throw new \InvalidArgumentException('invalid length for $direzione when calling PendenzaPagata., must be bigger than or equal to 1.');
        }

        $this->container['direzione'] = $direzione;

        return $this;
    }

    /**
     * Gets divisione
     *
     * @return string|null
     */
    public function getDivisione()
    {
        return $this->container['divisione'];
    }

    /**
     * Sets divisione
     *
     * @param string|null $divisione Identificativo della divisione interna all'ente creditore
     *
     * @return self
     */
    public function setDivisione($divisione)
    {
        if (is_null($divisione)) {
            throw new \InvalidArgumentException('non-nullable divisione cannot be null');
        }
        if ((mb_strlen($divisione) > 35)) {
            throw new \InvalidArgumentException('invalid length for $divisione when calling PendenzaPagata., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($divisione) < 1)) {
            throw new \InvalidArgumentException('invalid length for $divisione when calling PendenzaPagata., must be bigger than or equal to 1.');
        }

        $this->container['divisione'] = $divisione;

        return $this;
    }

    /**
     * Gets documento
     *
     * @return \GovPay\Pagamenti\Model\Documento|null
     */
    public function getDocumento()
    {
        return $this->container['documento'];
    }

    /**
     * Sets documento
     *
     * @param \GovPay\Pagamenti\Model\Documento|null $documento documento
     *
     * @return self
     */
    public function setDocumento($documento)
    {
        if (is_null($documento)) {
            throw new \InvalidArgumentException('non-nullable documento cannot be null');
        }
        $this->container['documento'] = $documento;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid Parametro di randomizzazione delle URL di pagamento statiche
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets proprieta
     *
     * @return \GovPay\Pagamenti\Model\ProprietaPendenza|null
     */
    public function getProprieta()
    {
        return $this->container['proprieta'];
    }

    /**
     * Sets proprieta
     *
     * @param \GovPay\Pagamenti\Model\ProprietaPendenza|null $proprieta proprieta
     *
     * @return self
     */
    public function setProprieta($proprieta)
    {
        if (is_null($proprieta)) {
            throw new \InvalidArgumentException('non-nullable proprieta cannot be null');
        }
        $this->container['proprieta'] = $proprieta;

        return $this;
    }

    /**
     * Gets allegati
     *
     * @return \GovPay\Pagamenti\Model\AllegatoPendenza[]|null
     */
    public function getAllegati()
    {
        return $this->container['allegati'];
    }

    /**
     * Sets allegati
     *
     * @param \GovPay\Pagamenti\Model\AllegatoPendenza[]|null $allegati allegati
     *
     * @return self
     */
    public function setAllegati($allegati)
    {
        if (is_null($allegati)) {
            throw new \InvalidArgumentException('non-nullable allegati cannot be null');
        }
        $this->container['allegati'] = $allegati;

        return $this;
    }

    /**
     * Gets voci
     *
     * @return \GovPay\Pagamenti\Model\VocePendenzaPagata[]|null
     */
    public function getVoci()
    {
        return $this->container['voci'];
    }

    /**
     * Sets voci
     *
     * @param \GovPay\Pagamenti\Model\VocePendenzaPagata[]|null $voci voci
     *
     * @return self
     */
    public function setVoci($voci)
    {
        if (is_null($voci)) {
            throw new \InvalidArgumentException('non-nullable voci cannot be null');
        }

        if ((count($voci) > 5)) {
            throw new \InvalidArgumentException('invalid value for $voci when calling PendenzaPagata., number of items must be less than or equal to 5.');
        }
        if ((count($voci) < 1)) {
            throw new \InvalidArgumentException('invalid length for $voci when calling PendenzaPagata., number of items must be greater than or equal to 1.');
        }
        $this->container['voci'] = $voci;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



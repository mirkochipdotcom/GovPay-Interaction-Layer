<?php
/**
 * ProprietaPendenza
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Pagamenti
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Pagamento
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Pagamenti\Model;

use \ArrayAccess;
use \GovPay\Pagamenti\ObjectSerializer;

/**
 * ProprietaPendenza Class Doc Comment
 *
 * @category Class
 * @description Dati supporto per la gestione del ciclo di vita della pendenza.
 * @package  GovPay\Pagamenti
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProprietaPendenza implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProprietaPendenza';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lingua_secondaria' => '\GovPay\Pagamenti\Model\LinguaSecondaria',
        'descrizione_importo' => '\GovPay\Pagamenti\Model\VoceDescrizioneImporto[]',
        'linea_testo_ricevuta1' => 'string',
        'linea_testo_ricevuta2' => 'string',
        'lingua_secondaria_causale' => 'string',
        'informativa_importo_avviso' => 'string',
        'lingua_secondaria_informativa_importo_avviso' => 'string',
        'data_scandenza_avviso' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lingua_secondaria' => null,
        'descrizione_importo' => null,
        'linea_testo_ricevuta1' => null,
        'linea_testo_ricevuta2' => null,
        'lingua_secondaria_causale' => null,
        'informativa_importo_avviso' => null,
        'lingua_secondaria_informativa_importo_avviso' => null,
        'data_scandenza_avviso' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lingua_secondaria' => false,
        'descrizione_importo' => false,
        'linea_testo_ricevuta1' => false,
        'linea_testo_ricevuta2' => false,
        'lingua_secondaria_causale' => false,
        'informativa_importo_avviso' => false,
        'lingua_secondaria_informativa_importo_avviso' => false,
        'data_scandenza_avviso' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lingua_secondaria' => 'linguaSecondaria',
        'descrizione_importo' => 'descrizioneImporto',
        'linea_testo_ricevuta1' => 'lineaTestoRicevuta1',
        'linea_testo_ricevuta2' => 'lineaTestoRicevuta2',
        'lingua_secondaria_causale' => 'linguaSecondariaCausale',
        'informativa_importo_avviso' => 'informativaImportoAvviso',
        'lingua_secondaria_informativa_importo_avviso' => 'linguaSecondariaInformativaImportoAvviso',
        'data_scandenza_avviso' => 'dataScandenzaAvviso'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lingua_secondaria' => 'setLinguaSecondaria',
        'descrizione_importo' => 'setDescrizioneImporto',
        'linea_testo_ricevuta1' => 'setLineaTestoRicevuta1',
        'linea_testo_ricevuta2' => 'setLineaTestoRicevuta2',
        'lingua_secondaria_causale' => 'setLinguaSecondariaCausale',
        'informativa_importo_avviso' => 'setInformativaImportoAvviso',
        'lingua_secondaria_informativa_importo_avviso' => 'setLinguaSecondariaInformativaImportoAvviso',
        'data_scandenza_avviso' => 'setDataScandenzaAvviso'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lingua_secondaria' => 'getLinguaSecondaria',
        'descrizione_importo' => 'getDescrizioneImporto',
        'linea_testo_ricevuta1' => 'getLineaTestoRicevuta1',
        'linea_testo_ricevuta2' => 'getLineaTestoRicevuta2',
        'lingua_secondaria_causale' => 'getLinguaSecondariaCausale',
        'informativa_importo_avviso' => 'getInformativaImportoAvviso',
        'lingua_secondaria_informativa_importo_avviso' => 'getLinguaSecondariaInformativaImportoAvviso',
        'data_scandenza_avviso' => 'getDataScandenzaAvviso'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('lingua_secondaria', $data ?? [], null);
        $this->setIfExists('descrizione_importo', $data ?? [], null);
        $this->setIfExists('linea_testo_ricevuta1', $data ?? [], null);
        $this->setIfExists('linea_testo_ricevuta2', $data ?? [], null);
        $this->setIfExists('lingua_secondaria_causale', $data ?? [], null);
        $this->setIfExists('informativa_importo_avviso', $data ?? [], null);
        $this->setIfExists('lingua_secondaria_informativa_importo_avviso', $data ?? [], null);
        $this->setIfExists('data_scandenza_avviso', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['informativa_importo_avviso']) && (mb_strlen($this->container['informativa_importo_avviso']) > 255)) {
            $invalidProperties[] = "invalid value for 'informativa_importo_avviso', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['lingua_secondaria_informativa_importo_avviso']) && (mb_strlen($this->container['lingua_secondaria_informativa_importo_avviso']) > 255)) {
            $invalidProperties[] = "invalid value for 'lingua_secondaria_informativa_importo_avviso', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lingua_secondaria
     *
     * @return \GovPay\Pagamenti\Model\LinguaSecondaria|null
     */
    public function getLinguaSecondaria()
    {
        return $this->container['lingua_secondaria'];
    }

    /**
     * Sets lingua_secondaria
     *
     * @param \GovPay\Pagamenti\Model\LinguaSecondaria|null $lingua_secondaria lingua_secondaria
     *
     * @return self
     */
    public function setLinguaSecondaria($lingua_secondaria)
    {
        if (is_null($lingua_secondaria)) {
            throw new \InvalidArgumentException('non-nullable lingua_secondaria cannot be null');
        }
        $this->container['lingua_secondaria'] = $lingua_secondaria;

        return $this;
    }

    /**
     * Gets descrizione_importo
     *
     * @return \GovPay\Pagamenti\Model\VoceDescrizioneImporto[]|null
     */
    public function getDescrizioneImporto()
    {
        return $this->container['descrizione_importo'];
    }

    /**
     * Sets descrizione_importo
     *
     * @param \GovPay\Pagamenti\Model\VoceDescrizioneImporto[]|null $descrizione_importo descrizione_importo
     *
     * @return self
     */
    public function setDescrizioneImporto($descrizione_importo)
    {
        if (is_null($descrizione_importo)) {
            throw new \InvalidArgumentException('non-nullable descrizione_importo cannot be null');
        }
        $this->container['descrizione_importo'] = $descrizione_importo;

        return $this;
    }

    /**
     * Gets linea_testo_ricevuta1
     *
     * @return string|null
     */
    public function getLineaTestoRicevuta1()
    {
        return $this->container['linea_testo_ricevuta1'];
    }

    /**
     * Sets linea_testo_ricevuta1
     *
     * @param string|null $linea_testo_ricevuta1 stringa personalizzata da inserire nella ricevuta
     *
     * @return self
     */
    public function setLineaTestoRicevuta1($linea_testo_ricevuta1)
    {
        if (is_null($linea_testo_ricevuta1)) {
            throw new \InvalidArgumentException('non-nullable linea_testo_ricevuta1 cannot be null');
        }
        $this->container['linea_testo_ricevuta1'] = $linea_testo_ricevuta1;

        return $this;
    }

    /**
     * Gets linea_testo_ricevuta2
     *
     * @return string|null
     */
    public function getLineaTestoRicevuta2()
    {
        return $this->container['linea_testo_ricevuta2'];
    }

    /**
     * Sets linea_testo_ricevuta2
     *
     * @param string|null $linea_testo_ricevuta2 stringa personalizzata da inserire nella ricevuta
     *
     * @return self
     */
    public function setLineaTestoRicevuta2($linea_testo_ricevuta2)
    {
        if (is_null($linea_testo_ricevuta2)) {
            throw new \InvalidArgumentException('non-nullable linea_testo_ricevuta2 cannot be null');
        }
        $this->container['linea_testo_ricevuta2'] = $linea_testo_ricevuta2;

        return $this;
    }

    /**
     * Gets lingua_secondaria_causale
     *
     * @return string|null
     */
    public function getLinguaSecondariaCausale()
    {
        return $this->container['lingua_secondaria_causale'];
    }

    /**
     * Sets lingua_secondaria_causale
     *
     * @param string|null $lingua_secondaria_causale causale della pendenza nella lingua secondaria da inserire nell'avviso
     *
     * @return self
     */
    public function setLinguaSecondariaCausale($lingua_secondaria_causale)
    {
        if (is_null($lingua_secondaria_causale)) {
            throw new \InvalidArgumentException('non-nullable lingua_secondaria_causale cannot be null');
        }
        $this->container['lingua_secondaria_causale'] = $lingua_secondaria_causale;

        return $this;
    }

    /**
     * Gets informativa_importo_avviso
     *
     * @return string|null
     */
    public function getInformativaImportoAvviso()
    {
        return $this->container['informativa_importo_avviso'];
    }

    /**
     * Sets informativa_importo_avviso
     *
     * @param string|null $informativa_importo_avviso se valorizzato, sostituisce il testo standard. Se valorizzato con stringa vuota, l'informativa viene omessa.
     *
     * @return self
     */
    public function setInformativaImportoAvviso($informativa_importo_avviso)
    {
        if (is_null($informativa_importo_avviso)) {
            throw new \InvalidArgumentException('non-nullable informativa_importo_avviso cannot be null');
        }
        if ((mb_strlen($informativa_importo_avviso) > 255)) {
            throw new \InvalidArgumentException('invalid length for $informativa_importo_avviso when calling ProprietaPendenza., must be smaller than or equal to 255.');
        }

        $this->container['informativa_importo_avviso'] = $informativa_importo_avviso;

        return $this;
    }

    /**
     * Gets lingua_secondaria_informativa_importo_avviso
     *
     * @return string|null
     */
    public function getLinguaSecondariaInformativaImportoAvviso()
    {
        return $this->container['lingua_secondaria_informativa_importo_avviso'];
    }

    /**
     * Sets lingua_secondaria_informativa_importo_avviso
     *
     * @param string|null $lingua_secondaria_informativa_importo_avviso se valorizzato, sostituisce il testo standard. Se valorizzato con stringa vuota, l'informativa viene omessa.
     *
     * @return self
     */
    public function setLinguaSecondariaInformativaImportoAvviso($lingua_secondaria_informativa_importo_avviso)
    {
        if (is_null($lingua_secondaria_informativa_importo_avviso)) {
            throw new \InvalidArgumentException('non-nullable lingua_secondaria_informativa_importo_avviso cannot be null');
        }
        if ((mb_strlen($lingua_secondaria_informativa_importo_avviso) > 255)) {
            throw new \InvalidArgumentException('invalid length for $lingua_secondaria_informativa_importo_avviso when calling ProprietaPendenza., must be smaller than or equal to 255.');
        }

        $this->container['lingua_secondaria_informativa_importo_avviso'] = $lingua_secondaria_informativa_importo_avviso;

        return $this;
    }

    /**
     * Gets data_scandenza_avviso
     *
     * @return \DateTime|null
     */
    public function getDataScandenzaAvviso()
    {
        return $this->container['data_scandenza_avviso'];
    }

    /**
     * Sets data_scandenza_avviso
     *
     * @param \DateTime|null $data_scandenza_avviso se valorizzata, sostituisce la data di scadenza standard.
     *
     * @return self
     */
    public function setDataScandenzaAvviso($data_scandenza_avviso)
    {
        if (is_null($data_scandenza_avviso)) {
            throw new \InvalidArgumentException('non-nullable data_scandenza_avviso cannot be null');
        }
        $this->container['data_scandenza_avviso'] = $data_scandenza_avviso;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



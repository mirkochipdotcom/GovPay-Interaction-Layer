<?php
/**
 * ContiAccredito
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * ContiAccredito Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContiAccredito implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'contiAccredito';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bic' => 'string',
        'postale' => 'bool',
        'mybank' => 'bool',
        'abilitato' => 'bool',
        'descrizione' => 'string',
        'intestatario' => 'string',
        'aut_stampa_poste_italiane' => 'string',
        'iban' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bic' => null,
        'postale' => null,
        'mybank' => null,
        'abilitato' => null,
        'descrizione' => null,
        'intestatario' => null,
        'aut_stampa_poste_italiane' => null,
        'iban' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bic' => false,
        'postale' => false,
        'mybank' => false,
        'abilitato' => false,
        'descrizione' => false,
        'intestatario' => false,
        'aut_stampa_poste_italiane' => false,
        'iban' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bic' => 'bic',
        'postale' => 'postale',
        'mybank' => 'mybank',
        'abilitato' => 'abilitato',
        'descrizione' => 'descrizione',
        'intestatario' => 'intestatario',
        'aut_stampa_poste_italiane' => 'autStampaPosteItaliane',
        'iban' => 'iban'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bic' => 'setBic',
        'postale' => 'setPostale',
        'mybank' => 'setMybank',
        'abilitato' => 'setAbilitato',
        'descrizione' => 'setDescrizione',
        'intestatario' => 'setIntestatario',
        'aut_stampa_poste_italiane' => 'setAutStampaPosteItaliane',
        'iban' => 'setIban'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bic' => 'getBic',
        'postale' => 'getPostale',
        'mybank' => 'getMybank',
        'abilitato' => 'getAbilitato',
        'descrizione' => 'getDescrizione',
        'intestatario' => 'getIntestatario',
        'aut_stampa_poste_italiane' => 'getAutStampaPosteItaliane',
        'iban' => 'getIban'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bic', $data ?? [], null);
        $this->setIfExists('postale', $data ?? [], false);
        $this->setIfExists('mybank', $data ?? [], false);
        $this->setIfExists('abilitato', $data ?? [], true);
        $this->setIfExists('descrizione', $data ?? [], null);
        $this->setIfExists('intestatario', $data ?? [], null);
        $this->setIfExists('aut_stampa_poste_italiane', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['descrizione']) && !preg_match("/^.{1,255}$/", $this->container['descrizione'])) {
            $invalidProperties[] = "invalid value for 'descrizione', must be conform to the pattern /^.{1,255}$/.";
        }

        if (!is_null($this->container['intestatario']) && !preg_match("/^.{1,255}$/", $this->container['intestatario'])) {
            $invalidProperties[] = "invalid value for 'intestatario', must be conform to the pattern /^.{1,255}$/.";
        }

        if ($this->container['iban'] === null) {
            $invalidProperties[] = "'iban' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bic
     *
     * @return string|null
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string|null $bic bic
     *
     * @return self
     */
    public function setBic($bic)
    {
        if (is_null($bic)) {
            throw new \InvalidArgumentException('non-nullable bic cannot be null');
        }
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets postale
     *
     * @return bool|null
     */
    public function getPostale()
    {
        return $this->container['postale'];
    }

    /**
     * Sets postale
     *
     * @param bool|null $postale indica se e' un c/c postale
     *
     * @return self
     */
    public function setPostale($postale)
    {
        if (is_null($postale)) {
            throw new \InvalidArgumentException('non-nullable postale cannot be null');
        }
        $this->container['postale'] = $postale;

        return $this;
    }

    /**
     * Gets mybank
     *
     * @return bool|null
     * @deprecated
     */
    public function getMybank()
    {
        return $this->container['mybank'];
    }

    /**
     * Sets mybank
     *
     * @param bool|null $mybank indica se e' un iban abilitato sul circuito mybank
     *
     * @return self
     * @deprecated
     */
    public function setMybank($mybank)
    {
        if (is_null($mybank)) {
            throw new \InvalidArgumentException('non-nullable mybank cannot be null');
        }
        $this->container['mybank'] = $mybank;

        return $this;
    }

    /**
     * Gets abilitato
     *
     * @return bool|null
     */
    public function getAbilitato()
    {
        return $this->container['abilitato'];
    }

    /**
     * Sets abilitato
     *
     * @param bool|null $abilitato Indicazione se il creditore è abilitato ad operare sulla piattaforma
     *
     * @return self
     */
    public function setAbilitato($abilitato)
    {
        if (is_null($abilitato)) {
            throw new \InvalidArgumentException('non-nullable abilitato cannot be null');
        }
        $this->container['abilitato'] = $abilitato;

        return $this;
    }

    /**
     * Gets descrizione
     *
     * @return string|null
     */
    public function getDescrizione()
    {
        return $this->container['descrizione'];
    }

    /**
     * Sets descrizione
     *
     * @param string|null $descrizione Descrizione estesa dell'Iban
     *
     * @return self
     */
    public function setDescrizione($descrizione)
    {
        if (is_null($descrizione)) {
            throw new \InvalidArgumentException('non-nullable descrizione cannot be null');
        }

        if ((!preg_match("/^.{1,255}$/", ObjectSerializer::toString($descrizione)))) {
            throw new \InvalidArgumentException("invalid value for \$descrizione when calling ContiAccredito., must conform to the pattern /^.{1,255}$/.");
        }

        $this->container['descrizione'] = $descrizione;

        return $this;
    }

    /**
     * Gets intestatario
     *
     * @return string|null
     */
    public function getIntestatario()
    {
        return $this->container['intestatario'];
    }

    /**
     * Sets intestatario
     *
     * @param string|null $intestatario Intestatario del conto corrente
     *
     * @return self
     */
    public function setIntestatario($intestatario)
    {
        if (is_null($intestatario)) {
            throw new \InvalidArgumentException('non-nullable intestatario cannot be null');
        }

        if ((!preg_match("/^.{1,255}$/", ObjectSerializer::toString($intestatario)))) {
            throw new \InvalidArgumentException("invalid value for \$intestatario when calling ContiAccredito., must conform to the pattern /^.{1,255}$/.");
        }

        $this->container['intestatario'] = $intestatario;

        return $this;
    }

    /**
     * Gets aut_stampa_poste_italiane
     *
     * @return string|null
     */
    public function getAutStampaPosteItaliane()
    {
        return $this->container['aut_stampa_poste_italiane'];
    }

    /**
     * Sets aut_stampa_poste_italiane
     *
     * @param string|null $aut_stampa_poste_italiane numero di autorizzazione per la stampa in proprio rilasciato da poste italiane
     *
     * @return self
     */
    public function setAutStampaPosteItaliane($aut_stampa_poste_italiane)
    {
        if (is_null($aut_stampa_poste_italiane)) {
            throw new \InvalidArgumentException('non-nullable aut_stampa_poste_italiane cannot be null');
        }
        $this->container['aut_stampa_poste_italiane'] = $aut_stampa_poste_italiane;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban iban
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            throw new \InvalidArgumentException('non-nullable iban cannot be null');
        }
        $this->container['iban'] = $iban;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



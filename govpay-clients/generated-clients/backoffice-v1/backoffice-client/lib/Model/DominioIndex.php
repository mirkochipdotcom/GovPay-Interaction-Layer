<?php
/**
 * DominioIndex
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * DominioIndex Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DominioIndex implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'dominioIndex';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ragione_sociale' => 'string',
        'indirizzo' => 'string',
        'civico' => 'string',
        'cap' => 'string',
        'localita' => 'string',
        'provincia' => 'string',
        'nazione' => 'string',
        'email' => 'string',
        'pec' => 'string',
        'tel' => 'string',
        'fax' => 'string',
        'web' => 'string',
        'gln' => 'string',
        'cbill' => 'string',
        'iuv_prefix' => 'string',
        'stazione' => 'string',
        'aux_digit' => 'string',
        'segregation_code' => 'string',
        'logo' => 'string',
        'abilitato' => 'bool',
        'aut_stampa_poste_italiane' => 'string',
        'area' => 'string',
        'servizio_my_pivot' => '\GovPay\Backoffice\Model\ConnettoreNotificaPagamentiMyPivot',
        'servizio_secim' => '\GovPay\Backoffice\Model\ConnettoreNotificaPagamentiSecim',
        'servizio_gov_pay' => '\GovPay\Backoffice\Model\ConnettoreNotificaPagamentiGovPay',
        'servizio_hyper_sic_ap_kappa' => '\GovPay\Backoffice\Model\ConnettoreNotificaPagamentiHyperSicAPKappa',
        'servizio_maggioli_jppa' => '\GovPay\Backoffice\Model\ConnettoreNotificaPagamentiMaggioliJPPA',
        'intermediato' => 'bool',
        'tassonomia_pago_pa' => '\GovPay\Backoffice\Model\TassonomiaPagoPADominio',
        'id_dominio' => 'string',
        'unita_operative' => 'string',
        'conti_accredito' => 'string',
        'entrate' => 'string',
        'tipi_pendenza' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ragione_sociale' => null,
        'indirizzo' => null,
        'civico' => null,
        'cap' => null,
        'localita' => null,
        'provincia' => null,
        'nazione' => null,
        'email' => null,
        'pec' => null,
        'tel' => null,
        'fax' => null,
        'web' => null,
        'gln' => null,
        'cbill' => null,
        'iuv_prefix' => null,
        'stazione' => null,
        'aux_digit' => null,
        'segregation_code' => null,
        'logo' => null,
        'abilitato' => null,
        'aut_stampa_poste_italiane' => null,
        'area' => null,
        'servizio_my_pivot' => null,
        'servizio_secim' => null,
        'servizio_gov_pay' => null,
        'servizio_hyper_sic_ap_kappa' => null,
        'servizio_maggioli_jppa' => null,
        'intermediato' => null,
        'tassonomia_pago_pa' => null,
        'id_dominio' => null,
        'unita_operative' => null,
        'conti_accredito' => null,
        'entrate' => null,
        'tipi_pendenza' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ragione_sociale' => false,
        'indirizzo' => false,
        'civico' => false,
        'cap' => false,
        'localita' => false,
        'provincia' => false,
        'nazione' => false,
        'email' => false,
        'pec' => false,
        'tel' => false,
        'fax' => false,
        'web' => false,
        'gln' => false,
        'cbill' => false,
        'iuv_prefix' => false,
        'stazione' => false,
        'aux_digit' => false,
        'segregation_code' => false,
        'logo' => false,
        'abilitato' => false,
        'aut_stampa_poste_italiane' => false,
        'area' => false,
        'servizio_my_pivot' => false,
        'servizio_secim' => false,
        'servizio_gov_pay' => false,
        'servizio_hyper_sic_ap_kappa' => false,
        'servizio_maggioli_jppa' => false,
        'intermediato' => false,
        'tassonomia_pago_pa' => false,
        'id_dominio' => false,
        'unita_operative' => false,
        'conti_accredito' => false,
        'entrate' => false,
        'tipi_pendenza' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ragione_sociale' => 'ragioneSociale',
        'indirizzo' => 'indirizzo',
        'civico' => 'civico',
        'cap' => 'cap',
        'localita' => 'localita',
        'provincia' => 'provincia',
        'nazione' => 'nazione',
        'email' => 'email',
        'pec' => 'pec',
        'tel' => 'tel',
        'fax' => 'fax',
        'web' => 'web',
        'gln' => 'gln',
        'cbill' => 'cbill',
        'iuv_prefix' => 'iuvPrefix',
        'stazione' => 'stazione',
        'aux_digit' => 'auxDigit',
        'segregation_code' => 'segregationCode',
        'logo' => 'logo',
        'abilitato' => 'abilitato',
        'aut_stampa_poste_italiane' => 'autStampaPosteItaliane',
        'area' => 'area',
        'servizio_my_pivot' => 'servizioMyPivot',
        'servizio_secim' => 'servizioSecim',
        'servizio_gov_pay' => 'servizioGovPay',
        'servizio_hyper_sic_ap_kappa' => 'servizioHyperSicAPKappa',
        'servizio_maggioli_jppa' => 'servizioMaggioliJPPA',
        'intermediato' => 'intermediato',
        'tassonomia_pago_pa' => 'tassonomiaPagoPA',
        'id_dominio' => 'idDominio',
        'unita_operative' => 'unitaOperative',
        'conti_accredito' => 'contiAccredito',
        'entrate' => 'entrate',
        'tipi_pendenza' => 'tipiPendenza'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ragione_sociale' => 'setRagioneSociale',
        'indirizzo' => 'setIndirizzo',
        'civico' => 'setCivico',
        'cap' => 'setCap',
        'localita' => 'setLocalita',
        'provincia' => 'setProvincia',
        'nazione' => 'setNazione',
        'email' => 'setEmail',
        'pec' => 'setPec',
        'tel' => 'setTel',
        'fax' => 'setFax',
        'web' => 'setWeb',
        'gln' => 'setGln',
        'cbill' => 'setCbill',
        'iuv_prefix' => 'setIuvPrefix',
        'stazione' => 'setStazione',
        'aux_digit' => 'setAuxDigit',
        'segregation_code' => 'setSegregationCode',
        'logo' => 'setLogo',
        'abilitato' => 'setAbilitato',
        'aut_stampa_poste_italiane' => 'setAutStampaPosteItaliane',
        'area' => 'setArea',
        'servizio_my_pivot' => 'setServizioMyPivot',
        'servizio_secim' => 'setServizioSecim',
        'servizio_gov_pay' => 'setServizioGovPay',
        'servizio_hyper_sic_ap_kappa' => 'setServizioHyperSicApKappa',
        'servizio_maggioli_jppa' => 'setServizioMaggioliJppa',
        'intermediato' => 'setIntermediato',
        'tassonomia_pago_pa' => 'setTassonomiaPagoPa',
        'id_dominio' => 'setIdDominio',
        'unita_operative' => 'setUnitaOperative',
        'conti_accredito' => 'setContiAccredito',
        'entrate' => 'setEntrate',
        'tipi_pendenza' => 'setTipiPendenza'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ragione_sociale' => 'getRagioneSociale',
        'indirizzo' => 'getIndirizzo',
        'civico' => 'getCivico',
        'cap' => 'getCap',
        'localita' => 'getLocalita',
        'provincia' => 'getProvincia',
        'nazione' => 'getNazione',
        'email' => 'getEmail',
        'pec' => 'getPec',
        'tel' => 'getTel',
        'fax' => 'getFax',
        'web' => 'getWeb',
        'gln' => 'getGln',
        'cbill' => 'getCbill',
        'iuv_prefix' => 'getIuvPrefix',
        'stazione' => 'getStazione',
        'aux_digit' => 'getAuxDigit',
        'segregation_code' => 'getSegregationCode',
        'logo' => 'getLogo',
        'abilitato' => 'getAbilitato',
        'aut_stampa_poste_italiane' => 'getAutStampaPosteItaliane',
        'area' => 'getArea',
        'servizio_my_pivot' => 'getServizioMyPivot',
        'servizio_secim' => 'getServizioSecim',
        'servizio_gov_pay' => 'getServizioGovPay',
        'servizio_hyper_sic_ap_kappa' => 'getServizioHyperSicApKappa',
        'servizio_maggioli_jppa' => 'getServizioMaggioliJppa',
        'intermediato' => 'getIntermediato',
        'tassonomia_pago_pa' => 'getTassonomiaPagoPa',
        'id_dominio' => 'getIdDominio',
        'unita_operative' => 'getUnitaOperative',
        'conti_accredito' => 'getContiAccredito',
        'entrate' => 'getEntrate',
        'tipi_pendenza' => 'getTipiPendenza'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ragione_sociale', $data ?? [], null);
        $this->setIfExists('indirizzo', $data ?? [], null);
        $this->setIfExists('civico', $data ?? [], null);
        $this->setIfExists('cap', $data ?? [], null);
        $this->setIfExists('localita', $data ?? [], null);
        $this->setIfExists('provincia', $data ?? [], null);
        $this->setIfExists('nazione', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('pec', $data ?? [], null);
        $this->setIfExists('tel', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('web', $data ?? [], null);
        $this->setIfExists('gln', $data ?? [], null);
        $this->setIfExists('cbill', $data ?? [], null);
        $this->setIfExists('iuv_prefix', $data ?? [], null);
        $this->setIfExists('stazione', $data ?? [], null);
        $this->setIfExists('aux_digit', $data ?? [], null);
        $this->setIfExists('segregation_code', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('abilitato', $data ?? [], null);
        $this->setIfExists('aut_stampa_poste_italiane', $data ?? [], null);
        $this->setIfExists('area', $data ?? [], null);
        $this->setIfExists('servizio_my_pivot', $data ?? [], null);
        $this->setIfExists('servizio_secim', $data ?? [], null);
        $this->setIfExists('servizio_gov_pay', $data ?? [], null);
        $this->setIfExists('servizio_hyper_sic_ap_kappa', $data ?? [], null);
        $this->setIfExists('servizio_maggioli_jppa', $data ?? [], null);
        $this->setIfExists('intermediato', $data ?? [], null);
        $this->setIfExists('tassonomia_pago_pa', $data ?? [], null);
        $this->setIfExists('id_dominio', $data ?? [], null);
        $this->setIfExists('unita_operative', $data ?? [], null);
        $this->setIfExists('conti_accredito', $data ?? [], null);
        $this->setIfExists('entrate', $data ?? [], null);
        $this->setIfExists('tipi_pendenza', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ragione_sociale'] === null) {
            $invalidProperties[] = "'ragione_sociale' can't be null";
        }
        if ($this->container['gln'] === null) {
            $invalidProperties[] = "'gln' can't be null";
        }
        if (!is_null($this->container['iuv_prefix']) && !preg_match("/(\\d*(%\\([yYa{t|p}]\\))?)+/", $this->container['iuv_prefix'])) {
            $invalidProperties[] = "invalid value for 'iuv_prefix', must be conform to the pattern /(\\d*(%\\([yYa{t|p}]\\))?)+/.";
        }

        if ($this->container['stazione'] === null) {
            $invalidProperties[] = "'stazione' can't be null";
        }
        if ($this->container['abilitato'] === null) {
            $invalidProperties[] = "'abilitato' can't be null";
        }
        if ($this->container['id_dominio'] === null) {
            $invalidProperties[] = "'id_dominio' can't be null";
        }
        if ($this->container['unita_operative'] === null) {
            $invalidProperties[] = "'unita_operative' can't be null";
        }
        if ($this->container['conti_accredito'] === null) {
            $invalidProperties[] = "'conti_accredito' can't be null";
        }
        if ($this->container['entrate'] === null) {
            $invalidProperties[] = "'entrate' can't be null";
        }
        if ($this->container['tipi_pendenza'] === null) {
            $invalidProperties[] = "'tipi_pendenza' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ragione_sociale
     *
     * @return string
     */
    public function getRagioneSociale()
    {
        return $this->container['ragione_sociale'];
    }

    /**
     * Sets ragione_sociale
     *
     * @param string $ragione_sociale Ragione sociale del beneficiario
     *
     * @return self
     */
    public function setRagioneSociale($ragione_sociale)
    {
        if (is_null($ragione_sociale)) {
            throw new \InvalidArgumentException('non-nullable ragione_sociale cannot be null');
        }
        $this->container['ragione_sociale'] = $ragione_sociale;

        return $this;
    }

    /**
     * Gets indirizzo
     *
     * @return string|null
     */
    public function getIndirizzo()
    {
        return $this->container['indirizzo'];
    }

    /**
     * Sets indirizzo
     *
     * @param string|null $indirizzo Indirizzo del beneficiario
     *
     * @return self
     */
    public function setIndirizzo($indirizzo)
    {
        if (is_null($indirizzo)) {
            throw new \InvalidArgumentException('non-nullable indirizzo cannot be null');
        }
        $this->container['indirizzo'] = $indirizzo;

        return $this;
    }

    /**
     * Gets civico
     *
     * @return string|null
     */
    public function getCivico()
    {
        return $this->container['civico'];
    }

    /**
     * Sets civico
     *
     * @param string|null $civico Numero civico del beneficiario
     *
     * @return self
     */
    public function setCivico($civico)
    {
        if (is_null($civico)) {
            throw new \InvalidArgumentException('non-nullable civico cannot be null');
        }
        $this->container['civico'] = $civico;

        return $this;
    }

    /**
     * Gets cap
     *
     * @return string|null
     */
    public function getCap()
    {
        return $this->container['cap'];
    }

    /**
     * Sets cap
     *
     * @param string|null $cap Codice avviamento postale del beneficiario
     *
     * @return self
     */
    public function setCap($cap)
    {
        if (is_null($cap)) {
            throw new \InvalidArgumentException('non-nullable cap cannot be null');
        }
        $this->container['cap'] = $cap;

        return $this;
    }

    /**
     * Gets localita
     *
     * @return string|null
     */
    public function getLocalita()
    {
        return $this->container['localita'];
    }

    /**
     * Sets localita
     *
     * @param string|null $localita Località del beneficiario
     *
     * @return self
     */
    public function setLocalita($localita)
    {
        if (is_null($localita)) {
            throw new \InvalidArgumentException('non-nullable localita cannot be null');
        }
        $this->container['localita'] = $localita;

        return $this;
    }

    /**
     * Gets provincia
     *
     * @return string|null
     */
    public function getProvincia()
    {
        return $this->container['provincia'];
    }

    /**
     * Sets provincia
     *
     * @param string|null $provincia Provincia del beneficiario
     *
     * @return self
     */
    public function setProvincia($provincia)
    {
        if (is_null($provincia)) {
            throw new \InvalidArgumentException('non-nullable provincia cannot be null');
        }
        $this->container['provincia'] = $provincia;

        return $this;
    }

    /**
     * Gets nazione
     *
     * @return string|null
     */
    public function getNazione()
    {
        return $this->container['nazione'];
    }

    /**
     * Sets nazione
     *
     * @param string|null $nazione Nazione del beneficiario
     *
     * @return self
     */
    public function setNazione($nazione)
    {
        if (is_null($nazione)) {
            throw new \InvalidArgumentException('non-nullable nazione cannot be null');
        }
        $this->container['nazione'] = $nazione;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Posta elettronica ordinaria del beneficiario
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets pec
     *
     * @return string|null
     */
    public function getPec()
    {
        return $this->container['pec'];
    }

    /**
     * Sets pec
     *
     * @param string|null $pec Posta elettronica certificata del beneficiario
     *
     * @return self
     */
    public function setPec($pec)
    {
        if (is_null($pec)) {
            throw new \InvalidArgumentException('non-nullable pec cannot be null');
        }
        $this->container['pec'] = $pec;

        return $this;
    }

    /**
     * Gets tel
     *
     * @return string|null
     */
    public function getTel()
    {
        return $this->container['tel'];
    }

    /**
     * Sets tel
     *
     * @param string|null $tel Numero di telefono dell'help desk del beneficiario
     *
     * @return self
     */
    public function setTel($tel)
    {
        if (is_null($tel)) {
            throw new \InvalidArgumentException('non-nullable tel cannot be null');
        }
        $this->container['tel'] = $tel;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax Numero di fax dell'help desk del beneficiario
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            throw new \InvalidArgumentException('non-nullable fax cannot be null');
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets web
     *
     * @return string|null
     */
    public function getWeb()
    {
        return $this->container['web'];
    }

    /**
     * Sets web
     *
     * @param string|null $web Url del sito web
     *
     * @return self
     */
    public function setWeb($web)
    {
        if (is_null($web)) {
            throw new \InvalidArgumentException('non-nullable web cannot be null');
        }
        $this->container['web'] = $web;

        return $this;
    }

    /**
     * Gets gln
     *
     * @return string
     */
    public function getGln()
    {
        return $this->container['gln'];
    }

    /**
     * Sets gln
     *
     * @param string $gln Global location number del beneficiario
     *
     * @return self
     */
    public function setGln($gln)
    {
        if (is_null($gln)) {
            throw new \InvalidArgumentException('non-nullable gln cannot be null');
        }
        $this->container['gln'] = $gln;

        return $this;
    }

    /**
     * Gets cbill
     *
     * @return string|null
     */
    public function getCbill()
    {
        return $this->container['cbill'];
    }

    /**
     * Sets cbill
     *
     * @param string|null $cbill codice cbill del beneficiario
     *
     * @return self
     */
    public function setCbill($cbill)
    {
        if (is_null($cbill)) {
            throw new \InvalidArgumentException('non-nullable cbill cannot be null');
        }
        $this->container['cbill'] = $cbill;

        return $this;
    }

    /**
     * Gets iuv_prefix
     *
     * @return string|null
     */
    public function getIuvPrefix()
    {
        return $this->container['iuv_prefix'];
    }

    /**
     * Sets iuv_prefix
     *
     * @param string|null $iuv_prefix Prefisso negli IUV generati da GovPay - %(y) Anno di due cifre - %(Y) Anno di quattro cifre - %(a) Valore indicato nel campo codificaIuv dell'applicazione - %(t) Valore indicato nel campo codificaIuv del tipo pendenza - %(p) Valore indicato nel campo codificaIuv del tipo pendenza
     *
     * @return self
     */
    public function setIuvPrefix($iuv_prefix)
    {
        if (is_null($iuv_prefix)) {
            throw new \InvalidArgumentException('non-nullable iuv_prefix cannot be null');
        }

        if ((!preg_match("/(\\d*(%\\([yYa{t|p}]\\))?)+/", ObjectSerializer::toString($iuv_prefix)))) {
            throw new \InvalidArgumentException("invalid value for \$iuv_prefix when calling DominioIndex., must conform to the pattern /(\\d*(%\\([yYa{t|p}]\\))?)+/.");
        }

        $this->container['iuv_prefix'] = $iuv_prefix;

        return $this;
    }

    /**
     * Gets stazione
     *
     * @return string
     */
    public function getStazione()
    {
        return $this->container['stazione'];
    }

    /**
     * Sets stazione
     *
     * @param string $stazione Codice stazione PagoPA che intermedia il beneficiario
     *
     * @return self
     */
    public function setStazione($stazione)
    {
        if (is_null($stazione)) {
            throw new \InvalidArgumentException('non-nullable stazione cannot be null');
        }
        $this->container['stazione'] = $stazione;

        return $this;
    }

    /**
     * Gets aux_digit
     *
     * @return string|null
     */
    public function getAuxDigit()
    {
        return $this->container['aux_digit'];
    }

    /**
     * Sets aux_digit
     *
     * @param string|null $aux_digit Valore della prima cifra dei Numero Avviso generati da GovPay
     *
     * @return self
     */
    public function setAuxDigit($aux_digit)
    {
        if (is_null($aux_digit)) {
            throw new \InvalidArgumentException('non-nullable aux_digit cannot be null');
        }
        $this->container['aux_digit'] = $aux_digit;

        return $this;
    }

    /**
     * Gets segregation_code
     *
     * @return string|null
     */
    public function getSegregationCode()
    {
        return $this->container['segregation_code'];
    }

    /**
     * Sets segregation_code
     *
     * @param string|null $segregation_code Codice di segregazione utilizzato in caso di beneficiario pluri-intermediato (auxDigit = 3)
     *
     * @return self
     */
    public function setSegregationCode($segregation_code)
    {
        if (is_null($segregation_code)) {
            throw new \InvalidArgumentException('non-nullable segregation_code cannot be null');
        }
        $this->container['segregation_code'] = $segregation_code;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo Base64 del logo del beneficiario
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets abilitato
     *
     * @return bool
     */
    public function getAbilitato()
    {
        return $this->container['abilitato'];
    }

    /**
     * Sets abilitato
     *
     * @param bool $abilitato Indicazione se il creditore è abilitato ad operare sulla piattaforma
     *
     * @return self
     */
    public function setAbilitato($abilitato)
    {
        if (is_null($abilitato)) {
            throw new \InvalidArgumentException('non-nullable abilitato cannot be null');
        }
        $this->container['abilitato'] = $abilitato;

        return $this;
    }

    /**
     * Gets aut_stampa_poste_italiane
     *
     * @return string|null
     */
    public function getAutStampaPosteItaliane()
    {
        return $this->container['aut_stampa_poste_italiane'];
    }

    /**
     * Sets aut_stampa_poste_italiane
     *
     * @param string|null $aut_stampa_poste_italiane numero di autorizzazione per la stampa in proprio rilasciato da poste italiane
     *
     * @return self
     */
    public function setAutStampaPosteItaliane($aut_stampa_poste_italiane)
    {
        if (is_null($aut_stampa_poste_italiane)) {
            throw new \InvalidArgumentException('non-nullable aut_stampa_poste_italiane cannot be null');
        }
        $this->container['aut_stampa_poste_italiane'] = $aut_stampa_poste_italiane;

        return $this;
    }

    /**
     * Gets area
     *
     * @return string|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param string|null $area Nome dell'area di competenza del dominio
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            throw new \InvalidArgumentException('non-nullable area cannot be null');
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets servizio_my_pivot
     *
     * @return \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiMyPivot|null
     */
    public function getServizioMyPivot()
    {
        return $this->container['servizio_my_pivot'];
    }

    /**
     * Sets servizio_my_pivot
     *
     * @param \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiMyPivot|null $servizio_my_pivot servizio_my_pivot
     *
     * @return self
     */
    public function setServizioMyPivot($servizio_my_pivot)
    {
        if (is_null($servizio_my_pivot)) {
            throw new \InvalidArgumentException('non-nullable servizio_my_pivot cannot be null');
        }
        $this->container['servizio_my_pivot'] = $servizio_my_pivot;

        return $this;
    }

    /**
     * Gets servizio_secim
     *
     * @return \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiSecim|null
     */
    public function getServizioSecim()
    {
        return $this->container['servizio_secim'];
    }

    /**
     * Sets servizio_secim
     *
     * @param \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiSecim|null $servizio_secim servizio_secim
     *
     * @return self
     */
    public function setServizioSecim($servizio_secim)
    {
        if (is_null($servizio_secim)) {
            throw new \InvalidArgumentException('non-nullable servizio_secim cannot be null');
        }
        $this->container['servizio_secim'] = $servizio_secim;

        return $this;
    }

    /**
     * Gets servizio_gov_pay
     *
     * @return \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiGovPay|null
     */
    public function getServizioGovPay()
    {
        return $this->container['servizio_gov_pay'];
    }

    /**
     * Sets servizio_gov_pay
     *
     * @param \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiGovPay|null $servizio_gov_pay servizio_gov_pay
     *
     * @return self
     */
    public function setServizioGovPay($servizio_gov_pay)
    {
        if (is_null($servizio_gov_pay)) {
            throw new \InvalidArgumentException('non-nullable servizio_gov_pay cannot be null');
        }
        $this->container['servizio_gov_pay'] = $servizio_gov_pay;

        return $this;
    }

    /**
     * Gets servizio_hyper_sic_ap_kappa
     *
     * @return \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiHyperSicAPKappa|null
     */
    public function getServizioHyperSicApKappa()
    {
        return $this->container['servizio_hyper_sic_ap_kappa'];
    }

    /**
     * Sets servizio_hyper_sic_ap_kappa
     *
     * @param \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiHyperSicAPKappa|null $servizio_hyper_sic_ap_kappa servizio_hyper_sic_ap_kappa
     *
     * @return self
     */
    public function setServizioHyperSicApKappa($servizio_hyper_sic_ap_kappa)
    {
        if (is_null($servizio_hyper_sic_ap_kappa)) {
            throw new \InvalidArgumentException('non-nullable servizio_hyper_sic_ap_kappa cannot be null');
        }
        $this->container['servizio_hyper_sic_ap_kappa'] = $servizio_hyper_sic_ap_kappa;

        return $this;
    }

    /**
     * Gets servizio_maggioli_jppa
     *
     * @return \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiMaggioliJPPA|null
     */
    public function getServizioMaggioliJppa()
    {
        return $this->container['servizio_maggioli_jppa'];
    }

    /**
     * Sets servizio_maggioli_jppa
     *
     * @param \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiMaggioliJPPA|null $servizio_maggioli_jppa servizio_maggioli_jppa
     *
     * @return self
     */
    public function setServizioMaggioliJppa($servizio_maggioli_jppa)
    {
        if (is_null($servizio_maggioli_jppa)) {
            throw new \InvalidArgumentException('non-nullable servizio_maggioli_jppa cannot be null');
        }
        $this->container['servizio_maggioli_jppa'] = $servizio_maggioli_jppa;

        return $this;
    }

    /**
     * Gets intermediato
     *
     * @return bool|null
     */
    public function getIntermediato()
    {
        return $this->container['intermediato'];
    }

    /**
     * Sets intermediato
     *
     * @param bool|null $intermediato Indica se il creditore viene configurato per utilizzare una  stazione di intermediazione
     *
     * @return self
     */
    public function setIntermediato($intermediato)
    {
        if (is_null($intermediato)) {
            throw new \InvalidArgumentException('non-nullable intermediato cannot be null');
        }
        $this->container['intermediato'] = $intermediato;

        return $this;
    }

    /**
     * Gets tassonomia_pago_pa
     *
     * @return \GovPay\Backoffice\Model\TassonomiaPagoPADominio|null
     */
    public function getTassonomiaPagoPa()
    {
        return $this->container['tassonomia_pago_pa'];
    }

    /**
     * Sets tassonomia_pago_pa
     *
     * @param \GovPay\Backoffice\Model\TassonomiaPagoPADominio|null $tassonomia_pago_pa tassonomia_pago_pa
     *
     * @return self
     */
    public function setTassonomiaPagoPa($tassonomia_pago_pa)
    {
        if (is_null($tassonomia_pago_pa)) {
            throw new \InvalidArgumentException('non-nullable tassonomia_pago_pa cannot be null');
        }
        $this->container['tassonomia_pago_pa'] = $tassonomia_pago_pa;

        return $this;
    }

    /**
     * Gets id_dominio
     *
     * @return string
     */
    public function getIdDominio()
    {
        return $this->container['id_dominio'];
    }

    /**
     * Sets id_dominio
     *
     * @param string $id_dominio Codice fiscale del beneficiario
     *
     * @return self
     */
    public function setIdDominio($id_dominio)
    {
        if (is_null($id_dominio)) {
            throw new \InvalidArgumentException('non-nullable id_dominio cannot be null');
        }
        $this->container['id_dominio'] = $id_dominio;

        return $this;
    }

    /**
     * Gets unita_operative
     *
     * @return string
     */
    public function getUnitaOperative()
    {
        return $this->container['unita_operative'];
    }

    /**
     * Sets unita_operative
     *
     * @param string $unita_operative Url alle unità operative censite per il dominio
     *
     * @return self
     */
    public function setUnitaOperative($unita_operative)
    {
        if (is_null($unita_operative)) {
            throw new \InvalidArgumentException('non-nullable unita_operative cannot be null');
        }
        $this->container['unita_operative'] = $unita_operative;

        return $this;
    }

    /**
     * Gets conti_accredito
     *
     * @return string
     */
    public function getContiAccredito()
    {
        return $this->container['conti_accredito'];
    }

    /**
     * Sets conti_accredito
     *
     * @param string $conti_accredito Conti di accredito censiti per il dominio beneficiario
     *
     * @return self
     */
    public function setContiAccredito($conti_accredito)
    {
        if (is_null($conti_accredito)) {
            throw new \InvalidArgumentException('non-nullable conti_accredito cannot be null');
        }
        $this->container['conti_accredito'] = $conti_accredito;

        return $this;
    }

    /**
     * Gets entrate
     *
     * @return string
     */
    public function getEntrate()
    {
        return $this->container['entrate'];
    }

    /**
     * Sets entrate
     *
     * @param string $entrate Tipologie di entrata censite per il dominio beneficiario
     *
     * @return self
     */
    public function setEntrate($entrate)
    {
        if (is_null($entrate)) {
            throw new \InvalidArgumentException('non-nullable entrate cannot be null');
        }
        $this->container['entrate'] = $entrate;

        return $this;
    }

    /**
     * Gets tipi_pendenza
     *
     * @return string
     */
    public function getTipiPendenza()
    {
        return $this->container['tipi_pendenza'];
    }

    /**
     * Sets tipi_pendenza
     *
     * @param string $tipi_pendenza Tipologie di pendenza censite per il dominio beneficiario
     *
     * @return self
     */
    public function setTipiPendenza($tipi_pendenza)
    {
        if (is_null($tipi_pendenza)) {
            throw new \InvalidArgumentException('non-nullable tipi_pendenza cannot be null');
        }
        $this->container['tipi_pendenza'] = $tipi_pendenza;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



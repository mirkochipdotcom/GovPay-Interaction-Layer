<?php
/**
 * ConnettoreNotificaPagamentiMaggioliJPPA
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * ConnettoreNotificaPagamentiMaggioliJPPA Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConnettoreNotificaPagamentiMaggioliJPPA implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'connettoreNotificaPagamentiMaggioliJPPA';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'abilitato' => 'bool',
        'tipo_connettore' => 'string',
        'versione' => 'string',
        'principal' => 'string',
        'email_indirizzi' => 'string[]',
        'email_subject' => 'string',
        'email_allegato' => 'bool',
        'download_base_url' => 'string',
        'tipi_pendenza' => '\GovPay\Backoffice\Model\ConnettoreNotificaPagamentiTipiPendenzaInner[]',
        'url' => 'string',
        'versione_api' => 'string',
        'auth' => '\GovPay\Backoffice\Model\TipoAutenticazione',
        'contenuti' => '\GovPay\Backoffice\Model\ContenutoNotificaPagamentiGovpay[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'abilitato' => null,
        'tipo_connettore' => null,
        'versione' => null,
        'principal' => null,
        'email_indirizzi' => null,
        'email_subject' => null,
        'email_allegato' => null,
        'download_base_url' => null,
        'tipi_pendenza' => null,
        'url' => null,
        'versione_api' => null,
        'auth' => null,
        'contenuti' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'abilitato' => false,
        'tipo_connettore' => false,
        'versione' => false,
        'principal' => false,
        'email_indirizzi' => false,
        'email_subject' => false,
        'email_allegato' => false,
        'download_base_url' => false,
        'tipi_pendenza' => false,
        'url' => false,
        'versione_api' => false,
        'auth' => false,
        'contenuti' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abilitato' => 'abilitato',
        'tipo_connettore' => 'tipoConnettore',
        'versione' => 'versione',
        'principal' => 'principal',
        'email_indirizzi' => 'emailIndirizzi',
        'email_subject' => 'emailSubject',
        'email_allegato' => 'emailAllegato',
        'download_base_url' => 'downloadBaseUrl',
        'tipi_pendenza' => 'tipiPendenza',
        'url' => 'url',
        'versione_api' => 'versioneApi',
        'auth' => 'auth',
        'contenuti' => 'contenuti'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abilitato' => 'setAbilitato',
        'tipo_connettore' => 'setTipoConnettore',
        'versione' => 'setVersione',
        'principal' => 'setPrincipal',
        'email_indirizzi' => 'setEmailIndirizzi',
        'email_subject' => 'setEmailSubject',
        'email_allegato' => 'setEmailAllegato',
        'download_base_url' => 'setDownloadBaseUrl',
        'tipi_pendenza' => 'setTipiPendenza',
        'url' => 'setUrl',
        'versione_api' => 'setVersioneApi',
        'auth' => 'setAuth',
        'contenuti' => 'setContenuti'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abilitato' => 'getAbilitato',
        'tipo_connettore' => 'getTipoConnettore',
        'versione' => 'getVersione',
        'principal' => 'getPrincipal',
        'email_indirizzi' => 'getEmailIndirizzi',
        'email_subject' => 'getEmailSubject',
        'email_allegato' => 'getEmailAllegato',
        'download_base_url' => 'getDownloadBaseUrl',
        'tipi_pendenza' => 'getTipiPendenza',
        'url' => 'getUrl',
        'versione_api' => 'getVersioneApi',
        'auth' => 'getAuth',
        'contenuti' => 'getContenuti'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIPO_CONNETTORE_EMAIL = 'EMAIL';
    public const VERSIONE_API_SOAP_V1 = 'SOAP v1';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoConnettoreAllowableValues()
    {
        return [
            self::TIPO_CONNETTORE_EMAIL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVersioneApiAllowableValues()
    {
        return [
            self::VERSIONE_API_SOAP_V1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('abilitato', $data ?? [], null);
        $this->setIfExists('tipo_connettore', $data ?? [], null);
        $this->setIfExists('versione', $data ?? [], null);
        $this->setIfExists('principal', $data ?? [], null);
        $this->setIfExists('email_indirizzi', $data ?? [], null);
        $this->setIfExists('email_subject', $data ?? [], null);
        $this->setIfExists('email_allegato', $data ?? [], null);
        $this->setIfExists('download_base_url', $data ?? [], null);
        $this->setIfExists('tipi_pendenza', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('versione_api', $data ?? [], null);
        $this->setIfExists('auth', $data ?? [], null);
        $this->setIfExists('contenuti', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['abilitato'] === null) {
            $invalidProperties[] = "'abilitato' can't be null";
        }
        if ($this->container['tipo_connettore'] === null) {
            $invalidProperties[] = "'tipo_connettore' can't be null";
        }
        $allowedValues = $this->getTipoConnettoreAllowableValues();
        if (!is_null($this->container['tipo_connettore']) && !in_array($this->container['tipo_connettore'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tipo_connettore', must be one of '%s'",
                $this->container['tipo_connettore'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['principal'] === null) {
            $invalidProperties[] = "'principal' can't be null";
        }
        $allowedValues = $this->getVersioneApiAllowableValues();
        if (!is_null($this->container['versione_api']) && !in_array($this->container['versione_api'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'versione_api', must be one of '%s'",
                $this->container['versione_api'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abilitato
     *
     * @return bool
     */
    public function getAbilitato()
    {
        return $this->container['abilitato'];
    }

    /**
     * Sets abilitato
     *
     * @param bool $abilitato Indica se il connettore e' abilitato
     *
     * @return self
     */
    public function setAbilitato($abilitato)
    {
        if (is_null($abilitato)) {
            throw new \InvalidArgumentException('non-nullable abilitato cannot be null');
        }
        $this->container['abilitato'] = $abilitato;

        return $this;
    }

    /**
     * Gets tipo_connettore
     *
     * @return string
     */
    public function getTipoConnettore()
    {
        return $this->container['tipo_connettore'];
    }

    /**
     * Sets tipo_connettore
     *
     * @param string $tipo_connettore tipo_connettore
     *
     * @return self
     */
    public function setTipoConnettore($tipo_connettore)
    {
        if (is_null($tipo_connettore)) {
            throw new \InvalidArgumentException('non-nullable tipo_connettore cannot be null');
        }
        $allowedValues = $this->getTipoConnettoreAllowableValues();
        if (!in_array($tipo_connettore, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tipo_connettore', must be one of '%s'",
                    $tipo_connettore,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_connettore'] = $tipo_connettore;

        return $this;
    }

    /**
     * Gets versione
     *
     * @return string|null
     */
    public function getVersione()
    {
        return $this->container['versione'];
    }

    /**
     * Sets versione
     *
     * @param string|null $versione Versione del servizio.
     *
     * @return self
     */
    public function setVersione($versione)
    {
        if (is_null($versione)) {
            throw new \InvalidArgumentException('non-nullable versione cannot be null');
        }
        $this->container['versione'] = $versione;

        return $this;
    }

    /**
     * Gets principal
     *
     * @return string
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal
     *
     * @param string $principal principal autenticato dalla chiamata di Maggioli
     *
     * @return self
     */
    public function setPrincipal($principal)
    {
        if (is_null($principal)) {
            throw new \InvalidArgumentException('non-nullable principal cannot be null');
        }
        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets email_indirizzi
     *
     * @return string[]|null
     */
    public function getEmailIndirizzi()
    {
        return $this->container['email_indirizzi'];
    }

    /**
     * Sets email_indirizzi
     *
     * @param string[]|null $email_indirizzi Indirizzi Email al quale verra' spedito il tracciato
     *
     * @return self
     */
    public function setEmailIndirizzi($email_indirizzi)
    {
        if (is_null($email_indirizzi)) {
            throw new \InvalidArgumentException('non-nullable email_indirizzi cannot be null');
        }
        $this->container['email_indirizzi'] = $email_indirizzi;

        return $this;
    }

    /**
     * Gets email_subject
     *
     * @return string|null
     */
    public function getEmailSubject()
    {
        return $this->container['email_subject'];
    }

    /**
     * Sets email_subject
     *
     * @param string|null $email_subject Subject da inserire nella mail
     *
     * @return self
     */
    public function setEmailSubject($email_subject)
    {
        if (is_null($email_subject)) {
            throw new \InvalidArgumentException('non-nullable email_subject cannot be null');
        }
        $this->container['email_subject'] = $email_subject;

        return $this;
    }

    /**
     * Gets email_allegato
     *
     * @return bool|null
     */
    public function getEmailAllegato()
    {
        return $this->container['email_allegato'];
    }

    /**
     * Sets email_allegato
     *
     * @param bool|null $email_allegato Indica se inviare il tracciato come allegato all'email oppure se inserire nel messaggio il link al download
     *
     * @return self
     */
    public function setEmailAllegato($email_allegato)
    {
        if (is_null($email_allegato)) {
            throw new \InvalidArgumentException('non-nullable email_allegato cannot be null');
        }
        $this->container['email_allegato'] = $email_allegato;

        return $this;
    }

    /**
     * Gets download_base_url
     *
     * @return string|null
     */
    public function getDownloadBaseUrl()
    {
        return $this->container['download_base_url'];
    }

    /**
     * Sets download_base_url
     *
     * @param string|null $download_base_url URL base del link dove scaricare il tracciato
     *
     * @return self
     */
    public function setDownloadBaseUrl($download_base_url)
    {
        if (is_null($download_base_url)) {
            throw new \InvalidArgumentException('non-nullable download_base_url cannot be null');
        }
        $this->container['download_base_url'] = $download_base_url;

        return $this;
    }

    /**
     * Gets tipi_pendenza
     *
     * @return \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiTipiPendenzaInner[]|null
     */
    public function getTipiPendenza()
    {
        return $this->container['tipi_pendenza'];
    }

    /**
     * Sets tipi_pendenza
     *
     * @param \GovPay\Backoffice\Model\ConnettoreNotificaPagamentiTipiPendenzaInner[]|null $tipi_pendenza tipi pendenza da includere nel tracciato
     *
     * @return self
     */
    public function setTipiPendenza($tipi_pendenza)
    {
        if (is_null($tipi_pendenza)) {
            throw new \InvalidArgumentException('non-nullable tipi_pendenza cannot be null');
        }
        $this->container['tipi_pendenza'] = $tipi_pendenza;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL Base del servizio rest di ricezione dei dati
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets versione_api
     *
     * @return string|null
     */
    public function getVersioneApi()
    {
        return $this->container['versione_api'];
    }

    /**
     * Sets versione_api
     *
     * @param string|null $versione_api Versione delle API di integrazione utilizzate.
     *
     * @return self
     */
    public function setVersioneApi($versione_api)
    {
        if (is_null($versione_api)) {
            throw new \InvalidArgumentException('non-nullable versione_api cannot be null');
        }
        $allowedValues = $this->getVersioneApiAllowableValues();
        if (!in_array($versione_api, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'versione_api', must be one of '%s'",
                    $versione_api,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['versione_api'] = $versione_api;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return \GovPay\Backoffice\Model\TipoAutenticazione|null
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param \GovPay\Backoffice\Model\TipoAutenticazione|null $auth auth
     *
     * @return self
     */
    public function setAuth($auth)
    {
        if (is_null($auth)) {
            throw new \InvalidArgumentException('non-nullable auth cannot be null');
        }
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets contenuti
     *
     * @return \GovPay\Backoffice\Model\ContenutoNotificaPagamentiGovpay[]|null
     */
    public function getContenuti()
    {
        return $this->container['contenuti'];
    }

    /**
     * Sets contenuti
     *
     * @param \GovPay\Backoffice\Model\ContenutoNotificaPagamentiGovpay[]|null $contenuti Lista dei contenuti da inviare al servizio REST
     *
     * @return self
     */
    public function setContenuti($contenuti)
    {
        if (is_null($contenuti)) {
            throw new \InvalidArgumentException('non-nullable contenuti cannot be null');
        }
        $this->container['contenuti'] = $contenuti;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



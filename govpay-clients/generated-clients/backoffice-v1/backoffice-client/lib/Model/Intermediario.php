<?php
/**
 * Intermediario
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * Intermediario Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Intermediario implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'intermediario';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'denominazione' => 'string',
        'principal_pago_pa' => 'string',
        'servizio_pago_pa' => '\GovPay\Backoffice\Model\ConnettorePagopa',
        'servizio_ftp' => '\GovPay\Backoffice\Model\ServizioFtp',
        'servizio_pago_pa_recupero_rt' => '\GovPay\Backoffice\Model\ConnettorePagopaRecuperoRT',
        'abilitato' => 'bool',
        'id_intermediario' => 'string',
        'stazioni' => '\GovPay\Backoffice\Model\StazioneIndex[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'denominazione' => null,
        'principal_pago_pa' => null,
        'servizio_pago_pa' => null,
        'servizio_ftp' => null,
        'servizio_pago_pa_recupero_rt' => null,
        'abilitato' => null,
        'id_intermediario' => null,
        'stazioni' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'denominazione' => false,
        'principal_pago_pa' => false,
        'servizio_pago_pa' => false,
        'servizio_ftp' => false,
        'servizio_pago_pa_recupero_rt' => false,
        'abilitato' => false,
        'id_intermediario' => false,
        'stazioni' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'denominazione' => 'denominazione',
        'principal_pago_pa' => 'principalPagoPa',
        'servizio_pago_pa' => 'servizioPagoPa',
        'servizio_ftp' => 'servizioFtp',
        'servizio_pago_pa_recupero_rt' => 'servizioPagoPaRecuperoRT',
        'abilitato' => 'abilitato',
        'id_intermediario' => 'idIntermediario',
        'stazioni' => 'stazioni'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'denominazione' => 'setDenominazione',
        'principal_pago_pa' => 'setPrincipalPagoPa',
        'servizio_pago_pa' => 'setServizioPagoPa',
        'servizio_ftp' => 'setServizioFtp',
        'servizio_pago_pa_recupero_rt' => 'setServizioPagoPaRecuperoRt',
        'abilitato' => 'setAbilitato',
        'id_intermediario' => 'setIdIntermediario',
        'stazioni' => 'setStazioni'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'denominazione' => 'getDenominazione',
        'principal_pago_pa' => 'getPrincipalPagoPa',
        'servizio_pago_pa' => 'getServizioPagoPa',
        'servizio_ftp' => 'getServizioFtp',
        'servizio_pago_pa_recupero_rt' => 'getServizioPagoPaRecuperoRt',
        'abilitato' => 'getAbilitato',
        'id_intermediario' => 'getIdIntermediario',
        'stazioni' => 'getStazioni'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('denominazione', $data ?? [], null);
        $this->setIfExists('principal_pago_pa', $data ?? [], null);
        $this->setIfExists('servizio_pago_pa', $data ?? [], null);
        $this->setIfExists('servizio_ftp', $data ?? [], null);
        $this->setIfExists('servizio_pago_pa_recupero_rt', $data ?? [], null);
        $this->setIfExists('abilitato', $data ?? [], null);
        $this->setIfExists('id_intermediario', $data ?? [], null);
        $this->setIfExists('stazioni', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['denominazione'] === null) {
            $invalidProperties[] = "'denominazione' can't be null";
        }
        if ($this->container['principal_pago_pa'] === null) {
            $invalidProperties[] = "'principal_pago_pa' can't be null";
        }
        if ($this->container['servizio_pago_pa'] === null) {
            $invalidProperties[] = "'servizio_pago_pa' can't be null";
        }
        if ($this->container['id_intermediario'] === null) {
            $invalidProperties[] = "'id_intermediario' can't be null";
        }
        if ($this->container['stazioni'] === null) {
            $invalidProperties[] = "'stazioni' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets denominazione
     *
     * @return string
     */
    public function getDenominazione()
    {
        return $this->container['denominazione'];
    }

    /**
     * Sets denominazione
     *
     * @param string $denominazione Ragione sociale dell'intermediario PagoPA
     *
     * @return self
     */
    public function setDenominazione($denominazione)
    {
        if (is_null($denominazione)) {
            throw new \InvalidArgumentException('non-nullable denominazione cannot be null');
        }
        $this->container['denominazione'] = $denominazione;

        return $this;
    }

    /**
     * Gets principal_pago_pa
     *
     * @return string
     */
    public function getPrincipalPagoPa()
    {
        return $this->container['principal_pago_pa'];
    }

    /**
     * Sets principal_pago_pa
     *
     * @param string $principal_pago_pa Principal autenticato le richieste ricevute da PagoPA
     *
     * @return self
     */
    public function setPrincipalPagoPa($principal_pago_pa)
    {
        if (is_null($principal_pago_pa)) {
            throw new \InvalidArgumentException('non-nullable principal_pago_pa cannot be null');
        }
        $this->container['principal_pago_pa'] = $principal_pago_pa;

        return $this;
    }

    /**
     * Gets servizio_pago_pa
     *
     * @return \GovPay\Backoffice\Model\ConnettorePagopa
     */
    public function getServizioPagoPa()
    {
        return $this->container['servizio_pago_pa'];
    }

    /**
     * Sets servizio_pago_pa
     *
     * @param \GovPay\Backoffice\Model\ConnettorePagopa $servizio_pago_pa servizio_pago_pa
     *
     * @return self
     */
    public function setServizioPagoPa($servizio_pago_pa)
    {
        if (is_null($servizio_pago_pa)) {
            throw new \InvalidArgumentException('non-nullable servizio_pago_pa cannot be null');
        }
        $this->container['servizio_pago_pa'] = $servizio_pago_pa;

        return $this;
    }

    /**
     * Gets servizio_ftp
     *
     * @return \GovPay\Backoffice\Model\ServizioFtp|null
     */
    public function getServizioFtp()
    {
        return $this->container['servizio_ftp'];
    }

    /**
     * Sets servizio_ftp
     *
     * @param \GovPay\Backoffice\Model\ServizioFtp|null $servizio_ftp servizio_ftp
     *
     * @return self
     */
    public function setServizioFtp($servizio_ftp)
    {
        if (is_null($servizio_ftp)) {
            throw new \InvalidArgumentException('non-nullable servizio_ftp cannot be null');
        }
        $this->container['servizio_ftp'] = $servizio_ftp;

        return $this;
    }

    /**
     * Gets servizio_pago_pa_recupero_rt
     *
     * @return \GovPay\Backoffice\Model\ConnettorePagopaRecuperoRT|null
     */
    public function getServizioPagoPaRecuperoRt()
    {
        return $this->container['servizio_pago_pa_recupero_rt'];
    }

    /**
     * Sets servizio_pago_pa_recupero_rt
     *
     * @param \GovPay\Backoffice\Model\ConnettorePagopaRecuperoRT|null $servizio_pago_pa_recupero_rt servizio_pago_pa_recupero_rt
     *
     * @return self
     */
    public function setServizioPagoPaRecuperoRt($servizio_pago_pa_recupero_rt)
    {
        if (is_null($servizio_pago_pa_recupero_rt)) {
            throw new \InvalidArgumentException('non-nullable servizio_pago_pa_recupero_rt cannot be null');
        }
        $this->container['servizio_pago_pa_recupero_rt'] = $servizio_pago_pa_recupero_rt;

        return $this;
    }

    /**
     * Gets abilitato
     *
     * @return bool|null
     */
    public function getAbilitato()
    {
        return $this->container['abilitato'];
    }

    /**
     * Sets abilitato
     *
     * @param bool|null $abilitato Indica lo stato di abilitazione
     *
     * @return self
     */
    public function setAbilitato($abilitato)
    {
        if (is_null($abilitato)) {
            throw new \InvalidArgumentException('non-nullable abilitato cannot be null');
        }
        $this->container['abilitato'] = $abilitato;

        return $this;
    }

    /**
     * Gets id_intermediario
     *
     * @return string
     */
    public function getIdIntermediario()
    {
        return $this->container['id_intermediario'];
    }

    /**
     * Sets id_intermediario
     *
     * @param string $id_intermediario Identificativo dell'intermediario
     *
     * @return self
     */
    public function setIdIntermediario($id_intermediario)
    {
        if (is_null($id_intermediario)) {
            throw new \InvalidArgumentException('non-nullable id_intermediario cannot be null');
        }
        $this->container['id_intermediario'] = $id_intermediario;

        return $this;
    }

    /**
     * Gets stazioni
     *
     * @return \GovPay\Backoffice\Model\StazioneIndex[]
     */
    public function getStazioni()
    {
        return $this->container['stazioni'];
    }

    /**
     * Sets stazioni
     *
     * @param \GovPay\Backoffice\Model\StazioneIndex[] $stazioni stazioni
     *
     * @return self
     */
    public function setStazioni($stazioni)
    {
        if (is_null($stazioni)) {
            throw new \InvalidArgumentException('non-nullable stazioni cannot be null');
        }
        $this->container['stazioni'] = $stazioni;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



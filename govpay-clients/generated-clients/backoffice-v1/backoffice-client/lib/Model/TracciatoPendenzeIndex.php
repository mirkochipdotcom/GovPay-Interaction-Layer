<?php
/**
 * TracciatoPendenzeIndex
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * TracciatoPendenzeIndex Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TracciatoPendenzeIndex implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tracciatoPendenzeIndex';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'nome_file' => 'string',
        'dominio' => '\GovPay\Backoffice\Model\DominioIndex',
        'data_ora_caricamento' => '\DateTime',
        'stato' => '\GovPay\Backoffice\Model\StatoTracciatoPendenza',
        'descrizione_stato' => 'string',
        'numero_operazioni_totali' => 'int',
        'numero_operazioni_eseguite' => 'int',
        'numero_operazioni_fallite' => 'int',
        'numero_avvisi_totali' => 'int',
        'numero_avvisi_stampati' => 'int',
        'numero_avvisi_falliti' => 'int',
        'operatore_mittente' => 'string',
        'data_ora_ultimo_aggiornamento' => '\DateTime',
        'stampa_avvisi' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'nome_file' => null,
        'dominio' => null,
        'data_ora_caricamento' => 'date-time',
        'stato' => null,
        'descrizione_stato' => null,
        'numero_operazioni_totali' => 'int64',
        'numero_operazioni_eseguite' => 'int64',
        'numero_operazioni_fallite' => 'int64',
        'numero_avvisi_totali' => 'int64',
        'numero_avvisi_stampati' => 'int64',
        'numero_avvisi_falliti' => 'int64',
        'operatore_mittente' => null,
        'data_ora_ultimo_aggiornamento' => 'date-time',
        'stampa_avvisi' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'nome_file' => false,
        'dominio' => false,
        'data_ora_caricamento' => false,
        'stato' => false,
        'descrizione_stato' => false,
        'numero_operazioni_totali' => false,
        'numero_operazioni_eseguite' => false,
        'numero_operazioni_fallite' => false,
        'numero_avvisi_totali' => false,
        'numero_avvisi_stampati' => false,
        'numero_avvisi_falliti' => false,
        'operatore_mittente' => false,
        'data_ora_ultimo_aggiornamento' => false,
        'stampa_avvisi' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'nome_file' => 'nomeFile',
        'dominio' => 'dominio',
        'data_ora_caricamento' => 'dataOraCaricamento',
        'stato' => 'stato',
        'descrizione_stato' => 'descrizioneStato',
        'numero_operazioni_totali' => 'numeroOperazioniTotali',
        'numero_operazioni_eseguite' => 'numeroOperazioniEseguite',
        'numero_operazioni_fallite' => 'numeroOperazioniFallite',
        'numero_avvisi_totali' => 'numeroAvvisiTotali',
        'numero_avvisi_stampati' => 'numeroAvvisiStampati',
        'numero_avvisi_falliti' => 'numeroAvvisiFalliti',
        'operatore_mittente' => 'operatoreMittente',
        'data_ora_ultimo_aggiornamento' => 'dataOraUltimoAggiornamento',
        'stampa_avvisi' => 'stampaAvvisi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'nome_file' => 'setNomeFile',
        'dominio' => 'setDominio',
        'data_ora_caricamento' => 'setDataOraCaricamento',
        'stato' => 'setStato',
        'descrizione_stato' => 'setDescrizioneStato',
        'numero_operazioni_totali' => 'setNumeroOperazioniTotali',
        'numero_operazioni_eseguite' => 'setNumeroOperazioniEseguite',
        'numero_operazioni_fallite' => 'setNumeroOperazioniFallite',
        'numero_avvisi_totali' => 'setNumeroAvvisiTotali',
        'numero_avvisi_stampati' => 'setNumeroAvvisiStampati',
        'numero_avvisi_falliti' => 'setNumeroAvvisiFalliti',
        'operatore_mittente' => 'setOperatoreMittente',
        'data_ora_ultimo_aggiornamento' => 'setDataOraUltimoAggiornamento',
        'stampa_avvisi' => 'setStampaAvvisi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'nome_file' => 'getNomeFile',
        'dominio' => 'getDominio',
        'data_ora_caricamento' => 'getDataOraCaricamento',
        'stato' => 'getStato',
        'descrizione_stato' => 'getDescrizioneStato',
        'numero_operazioni_totali' => 'getNumeroOperazioniTotali',
        'numero_operazioni_eseguite' => 'getNumeroOperazioniEseguite',
        'numero_operazioni_fallite' => 'getNumeroOperazioniFallite',
        'numero_avvisi_totali' => 'getNumeroAvvisiTotali',
        'numero_avvisi_stampati' => 'getNumeroAvvisiStampati',
        'numero_avvisi_falliti' => 'getNumeroAvvisiFalliti',
        'operatore_mittente' => 'getOperatoreMittente',
        'data_ora_ultimo_aggiornamento' => 'getDataOraUltimoAggiornamento',
        'stampa_avvisi' => 'getStampaAvvisi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('nome_file', $data ?? [], null);
        $this->setIfExists('dominio', $data ?? [], null);
        $this->setIfExists('data_ora_caricamento', $data ?? [], null);
        $this->setIfExists('stato', $data ?? [], null);
        $this->setIfExists('descrizione_stato', $data ?? [], null);
        $this->setIfExists('numero_operazioni_totali', $data ?? [], null);
        $this->setIfExists('numero_operazioni_eseguite', $data ?? [], null);
        $this->setIfExists('numero_operazioni_fallite', $data ?? [], null);
        $this->setIfExists('numero_avvisi_totali', $data ?? [], null);
        $this->setIfExists('numero_avvisi_stampati', $data ?? [], null);
        $this->setIfExists('numero_avvisi_falliti', $data ?? [], null);
        $this->setIfExists('operatore_mittente', $data ?? [], null);
        $this->setIfExists('data_ora_ultimo_aggiornamento', $data ?? [], null);
        $this->setIfExists('stampa_avvisi', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['nome_file'] === null) {
            $invalidProperties[] = "'nome_file' can't be null";
        }
        if ($this->container['data_ora_caricamento'] === null) {
            $invalidProperties[] = "'data_ora_caricamento' can't be null";
        }
        if ($this->container['stato'] === null) {
            $invalidProperties[] = "'stato' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identificativo numerico del tracciato
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets nome_file
     *
     * @return string
     */
    public function getNomeFile()
    {
        return $this->container['nome_file'];
    }

    /**
     * Sets nome_file
     *
     * @param string $nome_file Nome del file tracciato
     *
     * @return self
     */
    public function setNomeFile($nome_file)
    {
        if (is_null($nome_file)) {
            throw new \InvalidArgumentException('non-nullable nome_file cannot be null');
        }
        $this->container['nome_file'] = $nome_file;

        return $this;
    }

    /**
     * Gets dominio
     *
     * @return \GovPay\Backoffice\Model\DominioIndex|null
     */
    public function getDominio()
    {
        return $this->container['dominio'];
    }

    /**
     * Sets dominio
     *
     * @param \GovPay\Backoffice\Model\DominioIndex|null $dominio dominio
     *
     * @return self
     */
    public function setDominio($dominio)
    {
        if (is_null($dominio)) {
            throw new \InvalidArgumentException('non-nullable dominio cannot be null');
        }
        $this->container['dominio'] = $dominio;

        return $this;
    }

    /**
     * Gets data_ora_caricamento
     *
     * @return \DateTime
     */
    public function getDataOraCaricamento()
    {
        return $this->container['data_ora_caricamento'];
    }

    /**
     * Sets data_ora_caricamento
     *
     * @param \DateTime $data_ora_caricamento Data di caricamento del tracciato
     *
     * @return self
     */
    public function setDataOraCaricamento($data_ora_caricamento)
    {
        if (is_null($data_ora_caricamento)) {
            throw new \InvalidArgumentException('non-nullable data_ora_caricamento cannot be null');
        }
        $this->container['data_ora_caricamento'] = $data_ora_caricamento;

        return $this;
    }

    /**
     * Gets stato
     *
     * @return \GovPay\Backoffice\Model\StatoTracciatoPendenza
     */
    public function getStato()
    {
        return $this->container['stato'];
    }

    /**
     * Sets stato
     *
     * @param \GovPay\Backoffice\Model\StatoTracciatoPendenza $stato stato
     *
     * @return self
     */
    public function setStato($stato)
    {
        if (is_null($stato)) {
            throw new \InvalidArgumentException('non-nullable stato cannot be null');
        }
        $this->container['stato'] = $stato;

        return $this;
    }

    /**
     * Gets descrizione_stato
     *
     * @return string|null
     */
    public function getDescrizioneStato()
    {
        return $this->container['descrizione_stato'];
    }

    /**
     * Sets descrizione_stato
     *
     * @param string|null $descrizione_stato Descrizione dello stato del tracciato
     *
     * @return self
     */
    public function setDescrizioneStato($descrizione_stato)
    {
        if (is_null($descrizione_stato)) {
            throw new \InvalidArgumentException('non-nullable descrizione_stato cannot be null');
        }
        $this->container['descrizione_stato'] = $descrizione_stato;

        return $this;
    }

    /**
     * Gets numero_operazioni_totali
     *
     * @return int|null
     */
    public function getNumeroOperazioniTotali()
    {
        return $this->container['numero_operazioni_totali'];
    }

    /**
     * Sets numero_operazioni_totali
     *
     * @param int|null $numero_operazioni_totali Numero totale di operazioni previste
     *
     * @return self
     */
    public function setNumeroOperazioniTotali($numero_operazioni_totali)
    {
        if (is_null($numero_operazioni_totali)) {
            throw new \InvalidArgumentException('non-nullable numero_operazioni_totali cannot be null');
        }
        $this->container['numero_operazioni_totali'] = $numero_operazioni_totali;

        return $this;
    }

    /**
     * Gets numero_operazioni_eseguite
     *
     * @return int|null
     */
    public function getNumeroOperazioniEseguite()
    {
        return $this->container['numero_operazioni_eseguite'];
    }

    /**
     * Sets numero_operazioni_eseguite
     *
     * @param int|null $numero_operazioni_eseguite Numero totale di operazioni eseguite con successo
     *
     * @return self
     */
    public function setNumeroOperazioniEseguite($numero_operazioni_eseguite)
    {
        if (is_null($numero_operazioni_eseguite)) {
            throw new \InvalidArgumentException('non-nullable numero_operazioni_eseguite cannot be null');
        }
        $this->container['numero_operazioni_eseguite'] = $numero_operazioni_eseguite;

        return $this;
    }

    /**
     * Gets numero_operazioni_fallite
     *
     * @return int|null
     */
    public function getNumeroOperazioniFallite()
    {
        return $this->container['numero_operazioni_fallite'];
    }

    /**
     * Sets numero_operazioni_fallite
     *
     * @param int|null $numero_operazioni_fallite Numero totale di operazioni fallite
     *
     * @return self
     */
    public function setNumeroOperazioniFallite($numero_operazioni_fallite)
    {
        if (is_null($numero_operazioni_fallite)) {
            throw new \InvalidArgumentException('non-nullable numero_operazioni_fallite cannot be null');
        }
        $this->container['numero_operazioni_fallite'] = $numero_operazioni_fallite;

        return $this;
    }

    /**
     * Gets numero_avvisi_totali
     *
     * @return int|null
     */
    public function getNumeroAvvisiTotali()
    {
        return $this->container['numero_avvisi_totali'];
    }

    /**
     * Sets numero_avvisi_totali
     *
     * @param int|null $numero_avvisi_totali Numero totale di stampe previste
     *
     * @return self
     */
    public function setNumeroAvvisiTotali($numero_avvisi_totali)
    {
        if (is_null($numero_avvisi_totali)) {
            throw new \InvalidArgumentException('non-nullable numero_avvisi_totali cannot be null');
        }
        $this->container['numero_avvisi_totali'] = $numero_avvisi_totali;

        return $this;
    }

    /**
     * Gets numero_avvisi_stampati
     *
     * @return int|null
     */
    public function getNumeroAvvisiStampati()
    {
        return $this->container['numero_avvisi_stampati'];
    }

    /**
     * Sets numero_avvisi_stampati
     *
     * @param int|null $numero_avvisi_stampati Numero totale di stampe eseguite con successo
     *
     * @return self
     */
    public function setNumeroAvvisiStampati($numero_avvisi_stampati)
    {
        if (is_null($numero_avvisi_stampati)) {
            throw new \InvalidArgumentException('non-nullable numero_avvisi_stampati cannot be null');
        }
        $this->container['numero_avvisi_stampati'] = $numero_avvisi_stampati;

        return $this;
    }

    /**
     * Gets numero_avvisi_falliti
     *
     * @return int|null
     */
    public function getNumeroAvvisiFalliti()
    {
        return $this->container['numero_avvisi_falliti'];
    }

    /**
     * Sets numero_avvisi_falliti
     *
     * @param int|null $numero_avvisi_falliti Numero totale di stampe non eseguite a causa di errori
     *
     * @return self
     */
    public function setNumeroAvvisiFalliti($numero_avvisi_falliti)
    {
        if (is_null($numero_avvisi_falliti)) {
            throw new \InvalidArgumentException('non-nullable numero_avvisi_falliti cannot be null');
        }
        $this->container['numero_avvisi_falliti'] = $numero_avvisi_falliti;

        return $this;
    }

    /**
     * Gets operatore_mittente
     *
     * @return string|null
     */
    public function getOperatoreMittente()
    {
        return $this->container['operatore_mittente'];
    }

    /**
     * Sets operatore_mittente
     *
     * @param string|null $operatore_mittente Nome operatore del cruscotto che ha effettuato l'operazione di caricamento
     *
     * @return self
     */
    public function setOperatoreMittente($operatore_mittente)
    {
        if (is_null($operatore_mittente)) {
            throw new \InvalidArgumentException('non-nullable operatore_mittente cannot be null');
        }
        $this->container['operatore_mittente'] = $operatore_mittente;

        return $this;
    }

    /**
     * Gets data_ora_ultimo_aggiornamento
     *
     * @return \DateTime|null
     */
    public function getDataOraUltimoAggiornamento()
    {
        return $this->container['data_ora_ultimo_aggiornamento'];
    }

    /**
     * Sets data_ora_ultimo_aggiornamento
     *
     * @param \DateTime|null $data_ora_ultimo_aggiornamento Data ultimo aggiornamento stato elaborazione del tracciato
     *
     * @return self
     */
    public function setDataOraUltimoAggiornamento($data_ora_ultimo_aggiornamento)
    {
        if (is_null($data_ora_ultimo_aggiornamento)) {
            throw new \InvalidArgumentException('non-nullable data_ora_ultimo_aggiornamento cannot be null');
        }
        $this->container['data_ora_ultimo_aggiornamento'] = $data_ora_ultimo_aggiornamento;

        return $this;
    }

    /**
     * Gets stampa_avvisi
     *
     * @return bool|null
     */
    public function getStampaAvvisi()
    {
        return $this->container['stampa_avvisi'];
    }

    /**
     * Sets stampa_avvisi
     *
     * @param bool|null $stampa_avvisi indica se sono disponibili le stampe degli avvisi caricati con il tracciato
     *
     * @return self
     */
    public function setStampaAvvisi($stampa_avvisi)
    {
        if (is_null($stampa_avvisi)) {
            throw new \InvalidArgumentException('non-nullable stampa_avvisi cannot be null');
        }
        $this->container['stampa_avvisi'] = $stampa_avvisi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * EntrataPrevistaIndex
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * EntrataPrevistaIndex Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EntrataPrevistaIndex implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'entrataPrevistaIndex';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_dominio' => 'string',
        'iuv' => 'string',
        'iur' => 'string',
        'id_flusso' => 'string',
        'trn' => 'string',
        'data_regolamento' => '\DateTime',
        'numero_pagamenti' => 'int',
        'importo_totale' => 'float',
        'importo_pagato' => 'float',
        'data_pagamento' => '\DateTime',
        'id_voce_pendenza' => 'string',
        'indice' => 'int',
        'id_pendenza' => 'string',
        'id_a2_a' => 'string',
        'id_tipo_pendenza' => 'string',
        'id_entrata' => 'string',
        'identificativo_debitore' => 'string',
        'anno' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_dominio' => null,
        'iuv' => null,
        'iur' => null,
        'id_flusso' => null,
        'trn' => null,
        'data_regolamento' => 'date',
        'numero_pagamenti' => 'int64',
        'importo_totale' => 'double',
        'importo_pagato' => 'double',
        'data_pagamento' => 'date',
        'id_voce_pendenza' => null,
        'indice' => 'int32',
        'id_pendenza' => null,
        'id_a2_a' => null,
        'id_tipo_pendenza' => null,
        'id_entrata' => null,
        'identificativo_debitore' => null,
        'anno' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id_dominio' => false,
        'iuv' => false,
        'iur' => false,
        'id_flusso' => false,
        'trn' => false,
        'data_regolamento' => false,
        'numero_pagamenti' => false,
        'importo_totale' => false,
        'importo_pagato' => false,
        'data_pagamento' => false,
        'id_voce_pendenza' => false,
        'indice' => false,
        'id_pendenza' => false,
        'id_a2_a' => false,
        'id_tipo_pendenza' => false,
        'id_entrata' => false,
        'identificativo_debitore' => false,
        'anno' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_dominio' => 'idDominio',
        'iuv' => 'iuv',
        'iur' => 'iur',
        'id_flusso' => 'idFlusso',
        'trn' => 'trn',
        'data_regolamento' => 'dataRegolamento',
        'numero_pagamenti' => 'numeroPagamenti',
        'importo_totale' => 'importoTotale',
        'importo_pagato' => 'importoPagato',
        'data_pagamento' => 'dataPagamento',
        'id_voce_pendenza' => 'idVocePendenza',
        'indice' => 'indice',
        'id_pendenza' => 'idPendenza',
        'id_a2_a' => 'idA2A',
        'id_tipo_pendenza' => 'idTipoPendenza',
        'id_entrata' => 'idEntrata',
        'identificativo_debitore' => 'identificativoDebitore',
        'anno' => 'anno'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_dominio' => 'setIdDominio',
        'iuv' => 'setIuv',
        'iur' => 'setIur',
        'id_flusso' => 'setIdFlusso',
        'trn' => 'setTrn',
        'data_regolamento' => 'setDataRegolamento',
        'numero_pagamenti' => 'setNumeroPagamenti',
        'importo_totale' => 'setImportoTotale',
        'importo_pagato' => 'setImportoPagato',
        'data_pagamento' => 'setDataPagamento',
        'id_voce_pendenza' => 'setIdVocePendenza',
        'indice' => 'setIndice',
        'id_pendenza' => 'setIdPendenza',
        'id_a2_a' => 'setIdA2A',
        'id_tipo_pendenza' => 'setIdTipoPendenza',
        'id_entrata' => 'setIdEntrata',
        'identificativo_debitore' => 'setIdentificativoDebitore',
        'anno' => 'setAnno'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_dominio' => 'getIdDominio',
        'iuv' => 'getIuv',
        'iur' => 'getIur',
        'id_flusso' => 'getIdFlusso',
        'trn' => 'getTrn',
        'data_regolamento' => 'getDataRegolamento',
        'numero_pagamenti' => 'getNumeroPagamenti',
        'importo_totale' => 'getImportoTotale',
        'importo_pagato' => 'getImportoPagato',
        'data_pagamento' => 'getDataPagamento',
        'id_voce_pendenza' => 'getIdVocePendenza',
        'indice' => 'getIndice',
        'id_pendenza' => 'getIdPendenza',
        'id_a2_a' => 'getIdA2A',
        'id_tipo_pendenza' => 'getIdTipoPendenza',
        'id_entrata' => 'getIdEntrata',
        'identificativo_debitore' => 'getIdentificativoDebitore',
        'anno' => 'getAnno'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id_dominio', $data ?? [], null);
        $this->setIfExists('iuv', $data ?? [], null);
        $this->setIfExists('iur', $data ?? [], null);
        $this->setIfExists('id_flusso', $data ?? [], null);
        $this->setIfExists('trn', $data ?? [], null);
        $this->setIfExists('data_regolamento', $data ?? [], null);
        $this->setIfExists('numero_pagamenti', $data ?? [], null);
        $this->setIfExists('importo_totale', $data ?? [], null);
        $this->setIfExists('importo_pagato', $data ?? [], null);
        $this->setIfExists('data_pagamento', $data ?? [], null);
        $this->setIfExists('id_voce_pendenza', $data ?? [], null);
        $this->setIfExists('indice', $data ?? [], null);
        $this->setIfExists('id_pendenza', $data ?? [], null);
        $this->setIfExists('id_a2_a', $data ?? [], null);
        $this->setIfExists('id_tipo_pendenza', $data ?? [], null);
        $this->setIfExists('id_entrata', $data ?? [], null);
        $this->setIfExists('identificativo_debitore', $data ?? [], null);
        $this->setIfExists('anno', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_dominio
     *
     * @return string|null
     */
    public function getIdDominio()
    {
        return $this->container['id_dominio'];
    }

    /**
     * Sets id_dominio
     *
     * @param string|null $id_dominio Codice fiscale del dominio beneficiario
     *
     * @return self
     */
    public function setIdDominio($id_dominio)
    {
        if (is_null($id_dominio)) {
            throw new \InvalidArgumentException('non-nullable id_dominio cannot be null');
        }
        $this->container['id_dominio'] = $id_dominio;

        return $this;
    }

    /**
     * Gets iuv
     *
     * @return string|null
     */
    public function getIuv()
    {
        return $this->container['iuv'];
    }

    /**
     * Sets iuv
     *
     * @param string|null $iuv Identificativo univoco di versamento
     *
     * @return self
     */
    public function setIuv($iuv)
    {
        if (is_null($iuv)) {
            throw new \InvalidArgumentException('non-nullable iuv cannot be null');
        }
        $this->container['iuv'] = $iuv;

        return $this;
    }

    /**
     * Gets iur
     *
     * @return string|null
     */
    public function getIur()
    {
        return $this->container['iur'];
    }

    /**
     * Sets iur
     *
     * @param string|null $iur Identificativo univoco di riscossione
     *
     * @return self
     */
    public function setIur($iur)
    {
        if (is_null($iur)) {
            throw new \InvalidArgumentException('non-nullable iur cannot be null');
        }
        $this->container['iur'] = $iur;

        return $this;
    }

    /**
     * Gets id_flusso
     *
     * @return string|null
     */
    public function getIdFlusso()
    {
        return $this->container['id_flusso'];
    }

    /**
     * Sets id_flusso
     *
     * @param string|null $id_flusso Identificativo del flusso di rendicontazione
     *
     * @return self
     */
    public function setIdFlusso($id_flusso)
    {
        if (is_null($id_flusso)) {
            throw new \InvalidArgumentException('non-nullable id_flusso cannot be null');
        }
        $this->container['id_flusso'] = $id_flusso;

        return $this;
    }

    /**
     * Gets trn
     *
     * @return string|null
     */
    public function getTrn()
    {
        return $this->container['trn'];
    }

    /**
     * Sets trn
     *
     * @param string|null $trn Identificativo dell'operazione di riversamento assegnato dal psp debitore
     *
     * @return self
     */
    public function setTrn($trn)
    {
        if (is_null($trn)) {
            throw new \InvalidArgumentException('non-nullable trn cannot be null');
        }
        $this->container['trn'] = $trn;

        return $this;
    }

    /**
     * Gets data_regolamento
     *
     * @return \DateTime|null
     */
    public function getDataRegolamento()
    {
        return $this->container['data_regolamento'];
    }

    /**
     * Sets data_regolamento
     *
     * @param \DateTime|null $data_regolamento Data dell'operazione di riversamento fondi
     *
     * @return self
     */
    public function setDataRegolamento($data_regolamento)
    {
        if (is_null($data_regolamento)) {
            throw new \InvalidArgumentException('non-nullable data_regolamento cannot be null');
        }
        $this->container['data_regolamento'] = $data_regolamento;

        return $this;
    }

    /**
     * Gets numero_pagamenti
     *
     * @return int|null
     */
    public function getNumeroPagamenti()
    {
        return $this->container['numero_pagamenti'];
    }

    /**
     * Sets numero_pagamenti
     *
     * @param int|null $numero_pagamenti numero di pagamenti oggetto della rendicontazione
     *
     * @return self
     */
    public function setNumeroPagamenti($numero_pagamenti)
    {
        if (is_null($numero_pagamenti)) {
            throw new \InvalidArgumentException('non-nullable numero_pagamenti cannot be null');
        }
        $this->container['numero_pagamenti'] = $numero_pagamenti;

        return $this;
    }

    /**
     * Gets importo_totale
     *
     * @return float|null
     */
    public function getImportoTotale()
    {
        return $this->container['importo_totale'];
    }

    /**
     * Sets importo_totale
     *
     * @param float|null $importo_totale somma degli importi rendicontati
     *
     * @return self
     */
    public function setImportoTotale($importo_totale)
    {
        if (is_null($importo_totale)) {
            throw new \InvalidArgumentException('non-nullable importo_totale cannot be null');
        }
        $this->container['importo_totale'] = $importo_totale;

        return $this;
    }

    /**
     * Gets importo_pagato
     *
     * @return float|null
     */
    public function getImportoPagato()
    {
        return $this->container['importo_pagato'];
    }

    /**
     * Sets importo_pagato
     *
     * @param float|null $importo_pagato Importo Pagato.
     *
     * @return self
     */
    public function setImportoPagato($importo_pagato)
    {
        if (is_null($importo_pagato)) {
            throw new \InvalidArgumentException('non-nullable importo_pagato cannot be null');
        }
        $this->container['importo_pagato'] = $importo_pagato;

        return $this;
    }

    /**
     * Gets data_pagamento
     *
     * @return \DateTime|null
     */
    public function getDataPagamento()
    {
        return $this->container['data_pagamento'];
    }

    /**
     * Sets data_pagamento
     *
     * @param \DateTime|null $data_pagamento Data di pagamento della pendenza
     *
     * @return self
     */
    public function setDataPagamento($data_pagamento)
    {
        if (is_null($data_pagamento)) {
            throw new \InvalidArgumentException('non-nullable data_pagamento cannot be null');
        }
        $this->container['data_pagamento'] = $data_pagamento;

        return $this;
    }

    /**
     * Gets id_voce_pendenza
     *
     * @return string|null
     */
    public function getIdVocePendenza()
    {
        return $this->container['id_voce_pendenza'];
    }

    /**
     * Sets id_voce_pendenza
     *
     * @param string|null $id_voce_pendenza Identificativo della voce di pedenza nel gestionale proprietario
     *
     * @return self
     */
    public function setIdVocePendenza($id_voce_pendenza)
    {
        if (is_null($id_voce_pendenza)) {
            throw new \InvalidArgumentException('non-nullable id_voce_pendenza cannot be null');
        }
        $this->container['id_voce_pendenza'] = $id_voce_pendenza;

        return $this;
    }

    /**
     * Gets indice
     *
     * @return int|null
     */
    public function getIndice()
    {
        return $this->container['indice'];
    }

    /**
     * Sets indice
     *
     * @param int|null $indice indice di voce all'interno della pendenza
     *
     * @return self
     */
    public function setIndice($indice)
    {
        if (is_null($indice)) {
            throw new \InvalidArgumentException('non-nullable indice cannot be null');
        }
        $this->container['indice'] = $indice;

        return $this;
    }

    /**
     * Gets id_pendenza
     *
     * @return string|null
     */
    public function getIdPendenza()
    {
        return $this->container['id_pendenza'];
    }

    /**
     * Sets id_pendenza
     *
     * @param string|null $id_pendenza Identificativo della pendenza nel gestionale responsabile
     *
     * @return self
     */
    public function setIdPendenza($id_pendenza)
    {
        if (is_null($id_pendenza)) {
            throw new \InvalidArgumentException('non-nullable id_pendenza cannot be null');
        }
        $this->container['id_pendenza'] = $id_pendenza;

        return $this;
    }

    /**
     * Gets id_a2_a
     *
     * @return string|null
     */
    public function getIdA2A()
    {
        return $this->container['id_a2_a'];
    }

    /**
     * Sets id_a2_a
     *
     * @param string|null $id_a2_a Identificativo applicazione
     *
     * @return self
     */
    public function setIdA2A($id_a2_a)
    {
        if (is_null($id_a2_a)) {
            throw new \InvalidArgumentException('non-nullable id_a2_a cannot be null');
        }
        $this->container['id_a2_a'] = $id_a2_a;

        return $this;
    }

    /**
     * Gets id_tipo_pendenza
     *
     * @return string|null
     */
    public function getIdTipoPendenza()
    {
        return $this->container['id_tipo_pendenza'];
    }

    /**
     * Sets id_tipo_pendenza
     *
     * @param string|null $id_tipo_pendenza Identificativo della tipologia pendenza
     *
     * @return self
     */
    public function setIdTipoPendenza($id_tipo_pendenza)
    {
        if (is_null($id_tipo_pendenza)) {
            throw new \InvalidArgumentException('non-nullable id_tipo_pendenza cannot be null');
        }
        $this->container['id_tipo_pendenza'] = $id_tipo_pendenza;

        return $this;
    }

    /**
     * Gets id_entrata
     *
     * @return string|null
     */
    public function getIdEntrata()
    {
        return $this->container['id_entrata'];
    }

    /**
     * Sets id_entrata
     *
     * @param string|null $id_entrata Identificativo dell'entrata
     *
     * @return self
     */
    public function setIdEntrata($id_entrata)
    {
        if (is_null($id_entrata)) {
            throw new \InvalidArgumentException('non-nullable id_entrata cannot be null');
        }
        $this->container['id_entrata'] = $id_entrata;

        return $this;
    }

    /**
     * Gets identificativo_debitore
     *
     * @return string|null
     */
    public function getIdentificativoDebitore()
    {
        return $this->container['identificativo_debitore'];
    }

    /**
     * Sets identificativo_debitore
     *
     * @param string|null $identificativo_debitore Codice fiscale o partita iva del soggetto
     *
     * @return self
     */
    public function setIdentificativoDebitore($identificativo_debitore)
    {
        if (is_null($identificativo_debitore)) {
            throw new \InvalidArgumentException('non-nullable identificativo_debitore cannot be null');
        }
        $this->container['identificativo_debitore'] = $identificativo_debitore;

        return $this;
    }

    /**
     * Gets anno
     *
     * @return int|null
     */
    public function getAnno()
    {
        return $this->container['anno'];
    }

    /**
     * Sets anno
     *
     * @param int|null $anno Anno di riferimento della pendenza
     *
     * @return self
     */
    public function setAnno($anno)
    {
        if (is_null($anno)) {
            throw new \InvalidArgumentException('non-nullable anno cannot be null');
        }
        $this->container['anno'] = $anno;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * FlussoRendicontazioneIndex
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * FlussoRendicontazioneIndex Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FlussoRendicontazioneIndex implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'flussoRendicontazioneIndex';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_flusso' => 'string',
        'data_flusso' => '\DateTime',
        'trn' => 'string',
        'data_regolamento' => '\DateTime',
        'id_psp' => 'string',
        'ragione_sociale_psp' => 'string',
        'bic_riversamento' => 'string',
        'id_dominio' => 'string',
        'ragione_sociale_dominio' => 'string',
        'numero_pagamenti' => 'int',
        'importo_totale' => 'float',
        'stato' => '\GovPay\Backoffice\Model\StatoFlussoRendicontazione',
        'segnalazioni' => '\GovPay\Backoffice\Model\Segnalazione[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_flusso' => null,
        'data_flusso' => 'date-time',
        'trn' => null,
        'data_regolamento' => 'date-time',
        'id_psp' => null,
        'ragione_sociale_psp' => null,
        'bic_riversamento' => null,
        'id_dominio' => null,
        'ragione_sociale_dominio' => null,
        'numero_pagamenti' => 'int64',
        'importo_totale' => 'double',
        'stato' => null,
        'segnalazioni' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id_flusso' => false,
        'data_flusso' => false,
        'trn' => false,
        'data_regolamento' => false,
        'id_psp' => false,
        'ragione_sociale_psp' => false,
        'bic_riversamento' => false,
        'id_dominio' => false,
        'ragione_sociale_dominio' => false,
        'numero_pagamenti' => false,
        'importo_totale' => false,
        'stato' => false,
        'segnalazioni' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_flusso' => 'idFlusso',
        'data_flusso' => 'dataFlusso',
        'trn' => 'trn',
        'data_regolamento' => 'dataRegolamento',
        'id_psp' => 'idPsp',
        'ragione_sociale_psp' => 'ragioneSocialePsp',
        'bic_riversamento' => 'bicRiversamento',
        'id_dominio' => 'idDominio',
        'ragione_sociale_dominio' => 'ragioneSocialeDominio',
        'numero_pagamenti' => 'numeroPagamenti',
        'importo_totale' => 'importoTotale',
        'stato' => 'stato',
        'segnalazioni' => 'segnalazioni'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_flusso' => 'setIdFlusso',
        'data_flusso' => 'setDataFlusso',
        'trn' => 'setTrn',
        'data_regolamento' => 'setDataRegolamento',
        'id_psp' => 'setIdPsp',
        'ragione_sociale_psp' => 'setRagioneSocialePsp',
        'bic_riversamento' => 'setBicRiversamento',
        'id_dominio' => 'setIdDominio',
        'ragione_sociale_dominio' => 'setRagioneSocialeDominio',
        'numero_pagamenti' => 'setNumeroPagamenti',
        'importo_totale' => 'setImportoTotale',
        'stato' => 'setStato',
        'segnalazioni' => 'setSegnalazioni'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_flusso' => 'getIdFlusso',
        'data_flusso' => 'getDataFlusso',
        'trn' => 'getTrn',
        'data_regolamento' => 'getDataRegolamento',
        'id_psp' => 'getIdPsp',
        'ragione_sociale_psp' => 'getRagioneSocialePsp',
        'bic_riversamento' => 'getBicRiversamento',
        'id_dominio' => 'getIdDominio',
        'ragione_sociale_dominio' => 'getRagioneSocialeDominio',
        'numero_pagamenti' => 'getNumeroPagamenti',
        'importo_totale' => 'getImportoTotale',
        'stato' => 'getStato',
        'segnalazioni' => 'getSegnalazioni'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id_flusso', $data ?? [], null);
        $this->setIfExists('data_flusso', $data ?? [], null);
        $this->setIfExists('trn', $data ?? [], null);
        $this->setIfExists('data_regolamento', $data ?? [], null);
        $this->setIfExists('id_psp', $data ?? [], null);
        $this->setIfExists('ragione_sociale_psp', $data ?? [], null);
        $this->setIfExists('bic_riversamento', $data ?? [], null);
        $this->setIfExists('id_dominio', $data ?? [], null);
        $this->setIfExists('ragione_sociale_dominio', $data ?? [], null);
        $this->setIfExists('numero_pagamenti', $data ?? [], null);
        $this->setIfExists('importo_totale', $data ?? [], null);
        $this->setIfExists('stato', $data ?? [], null);
        $this->setIfExists('segnalazioni', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id_flusso'] === null) {
            $invalidProperties[] = "'id_flusso' can't be null";
        }
        if ($this->container['data_flusso'] === null) {
            $invalidProperties[] = "'data_flusso' can't be null";
        }
        if ($this->container['trn'] === null) {
            $invalidProperties[] = "'trn' can't be null";
        }
        if ($this->container['data_regolamento'] === null) {
            $invalidProperties[] = "'data_regolamento' can't be null";
        }
        if ($this->container['id_psp'] === null) {
            $invalidProperties[] = "'id_psp' can't be null";
        }
        if ($this->container['id_dominio'] === null) {
            $invalidProperties[] = "'id_dominio' can't be null";
        }
        if ($this->container['numero_pagamenti'] === null) {
            $invalidProperties[] = "'numero_pagamenti' can't be null";
        }
        if ($this->container['importo_totale'] === null) {
            $invalidProperties[] = "'importo_totale' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_flusso
     *
     * @return string
     */
    public function getIdFlusso()
    {
        return $this->container['id_flusso'];
    }

    /**
     * Sets id_flusso
     *
     * @param string $id_flusso identificativo del flusso di rendicontazione
     *
     * @return self
     */
    public function setIdFlusso($id_flusso)
    {
        if (is_null($id_flusso)) {
            throw new \InvalidArgumentException('non-nullable id_flusso cannot be null');
        }
        $this->container['id_flusso'] = $id_flusso;

        return $this;
    }

    /**
     * Gets data_flusso
     *
     * @return \DateTime
     */
    public function getDataFlusso()
    {
        return $this->container['data_flusso'];
    }

    /**
     * Sets data_flusso
     *
     * @param \DateTime $data_flusso Data di emissione del flusso
     *
     * @return self
     */
    public function setDataFlusso($data_flusso)
    {
        if (is_null($data_flusso)) {
            throw new \InvalidArgumentException('non-nullable data_flusso cannot be null');
        }
        $this->container['data_flusso'] = $data_flusso;

        return $this;
    }

    /**
     * Gets trn
     *
     * @return string
     */
    public function getTrn()
    {
        return $this->container['trn'];
    }

    /**
     * Sets trn
     *
     * @param string $trn Identificativo dell'operazione di riversamento assegnato dal psp debitore
     *
     * @return self
     */
    public function setTrn($trn)
    {
        if (is_null($trn)) {
            throw new \InvalidArgumentException('non-nullable trn cannot be null');
        }
        $this->container['trn'] = $trn;

        return $this;
    }

    /**
     * Gets data_regolamento
     *
     * @return \DateTime
     */
    public function getDataRegolamento()
    {
        return $this->container['data_regolamento'];
    }

    /**
     * Sets data_regolamento
     *
     * @param \DateTime $data_regolamento Data dell'operazione di riversamento fondi
     *
     * @return self
     */
    public function setDataRegolamento($data_regolamento)
    {
        if (is_null($data_regolamento)) {
            throw new \InvalidArgumentException('non-nullable data_regolamento cannot be null');
        }
        $this->container['data_regolamento'] = $data_regolamento;

        return $this;
    }

    /**
     * Gets id_psp
     *
     * @return string
     */
    public function getIdPsp()
    {
        return $this->container['id_psp'];
    }

    /**
     * Sets id_psp
     *
     * @param string $id_psp Identificativo del psp che ha emesso la rendicontazione
     *
     * @return self
     */
    public function setIdPsp($id_psp)
    {
        if (is_null($id_psp)) {
            throw new \InvalidArgumentException('non-nullable id_psp cannot be null');
        }
        $this->container['id_psp'] = $id_psp;

        return $this;
    }

    /**
     * Gets ragione_sociale_psp
     *
     * @return string|null
     */
    public function getRagioneSocialePsp()
    {
        return $this->container['ragione_sociale_psp'];
    }

    /**
     * Sets ragione_sociale_psp
     *
     * @param string|null $ragione_sociale_psp Nome del PSP che ha emesso il flusso
     *
     * @return self
     */
    public function setRagioneSocialePsp($ragione_sociale_psp)
    {
        if (is_null($ragione_sociale_psp)) {
            throw new \InvalidArgumentException('non-nullable ragione_sociale_psp cannot be null');
        }
        $this->container['ragione_sociale_psp'] = $ragione_sociale_psp;

        return $this;
    }

    /**
     * Gets bic_riversamento
     *
     * @return string|null
     */
    public function getBicRiversamento()
    {
        return $this->container['bic_riversamento'];
    }

    /**
     * Sets bic_riversamento
     *
     * @param string|null $bic_riversamento Codice Bic della banca che ha generato il riversamento
     *
     * @return self
     */
    public function setBicRiversamento($bic_riversamento)
    {
        if (is_null($bic_riversamento)) {
            throw new \InvalidArgumentException('non-nullable bic_riversamento cannot be null');
        }
        $this->container['bic_riversamento'] = $bic_riversamento;

        return $this;
    }

    /**
     * Gets id_dominio
     *
     * @return string
     */
    public function getIdDominio()
    {
        return $this->container['id_dominio'];
    }

    /**
     * Sets id_dominio
     *
     * @param string $id_dominio Identificativo del dominio creditore del riversamento
     *
     * @return self
     */
    public function setIdDominio($id_dominio)
    {
        if (is_null($id_dominio)) {
            throw new \InvalidArgumentException('non-nullable id_dominio cannot be null');
        }
        $this->container['id_dominio'] = $id_dominio;

        return $this;
    }

    /**
     * Gets ragione_sociale_dominio
     *
     * @return string|null
     */
    public function getRagioneSocialeDominio()
    {
        return $this->container['ragione_sociale_dominio'];
    }

    /**
     * Sets ragione_sociale_dominio
     *
     * @param string|null $ragione_sociale_dominio Nome del Dominio destinatario del flusso
     *
     * @return self
     */
    public function setRagioneSocialeDominio($ragione_sociale_dominio)
    {
        if (is_null($ragione_sociale_dominio)) {
            throw new \InvalidArgumentException('non-nullable ragione_sociale_dominio cannot be null');
        }
        $this->container['ragione_sociale_dominio'] = $ragione_sociale_dominio;

        return $this;
    }

    /**
     * Gets numero_pagamenti
     *
     * @return int
     */
    public function getNumeroPagamenti()
    {
        return $this->container['numero_pagamenti'];
    }

    /**
     * Sets numero_pagamenti
     *
     * @param int $numero_pagamenti numero di pagamenti oggetto della rendicontazione
     *
     * @return self
     */
    public function setNumeroPagamenti($numero_pagamenti)
    {
        if (is_null($numero_pagamenti)) {
            throw new \InvalidArgumentException('non-nullable numero_pagamenti cannot be null');
        }
        $this->container['numero_pagamenti'] = $numero_pagamenti;

        return $this;
    }

    /**
     * Gets importo_totale
     *
     * @return float
     */
    public function getImportoTotale()
    {
        return $this->container['importo_totale'];
    }

    /**
     * Sets importo_totale
     *
     * @param float $importo_totale somma degli importi rendicontati
     *
     * @return self
     */
    public function setImportoTotale($importo_totale)
    {
        if (is_null($importo_totale)) {
            throw new \InvalidArgumentException('non-nullable importo_totale cannot be null');
        }
        $this->container['importo_totale'] = $importo_totale;

        return $this;
    }

    /**
     * Gets stato
     *
     * @return \GovPay\Backoffice\Model\StatoFlussoRendicontazione|null
     */
    public function getStato()
    {
        return $this->container['stato'];
    }

    /**
     * Sets stato
     *
     * @param \GovPay\Backoffice\Model\StatoFlussoRendicontazione|null $stato stato
     *
     * @return self
     */
    public function setStato($stato)
    {
        if (is_null($stato)) {
            throw new \InvalidArgumentException('non-nullable stato cannot be null');
        }
        $this->container['stato'] = $stato;

        return $this;
    }

    /**
     * Gets segnalazioni
     *
     * @return \GovPay\Backoffice\Model\Segnalazione[]|null
     */
    public function getSegnalazioni()
    {
        return $this->container['segnalazioni'];
    }

    /**
     * Sets segnalazioni
     *
     * @param \GovPay\Backoffice\Model\Segnalazione[]|null $segnalazioni segnalazioni
     *
     * @return self
     */
    public function setSegnalazioni($segnalazioni)
    {
        if (is_null($segnalazioni)) {
            throw new \InvalidArgumentException('non-nullable segnalazioni cannot be null');
        }
        $this->container['segnalazioni'] = $segnalazioni;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



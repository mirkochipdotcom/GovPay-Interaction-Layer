<?php
/**
 * ConfigurazioneReCaptcha
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * ConfigurazioneReCaptcha Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConfigurazioneReCaptcha implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'configurazioneReCaptcha';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'server_url' => 'string',
        'site_key' => 'string',
        'secret_key' => 'string',
        'soglia' => 'float',
        'parametro' => 'string',
        'deny_on_fail' => 'bool',
        'connection_timeout' => 'int',
        'read_timeout' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'server_url' => null,
        'site_key' => null,
        'secret_key' => null,
        'soglia' => 'double',
        'parametro' => null,
        'deny_on_fail' => null,
        'connection_timeout' => 'int64',
        'read_timeout' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'server_url' => false,
        'site_key' => false,
        'secret_key' => false,
        'soglia' => false,
        'parametro' => false,
        'deny_on_fail' => false,
        'connection_timeout' => false,
        'read_timeout' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'server_url' => 'serverURL',
        'site_key' => 'siteKey',
        'secret_key' => 'secretKey',
        'soglia' => 'soglia',
        'parametro' => 'parametro',
        'deny_on_fail' => 'denyOnFail',
        'connection_timeout' => 'connectionTimeout',
        'read_timeout' => 'readTimeout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'server_url' => 'setServerUrl',
        'site_key' => 'setSiteKey',
        'secret_key' => 'setSecretKey',
        'soglia' => 'setSoglia',
        'parametro' => 'setParametro',
        'deny_on_fail' => 'setDenyOnFail',
        'connection_timeout' => 'setConnectionTimeout',
        'read_timeout' => 'setReadTimeout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'server_url' => 'getServerUrl',
        'site_key' => 'getSiteKey',
        'secret_key' => 'getSecretKey',
        'soglia' => 'getSoglia',
        'parametro' => 'getParametro',
        'deny_on_fail' => 'getDenyOnFail',
        'connection_timeout' => 'getConnectionTimeout',
        'read_timeout' => 'getReadTimeout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('server_url', $data ?? [], null);
        $this->setIfExists('site_key', $data ?? [], null);
        $this->setIfExists('secret_key', $data ?? [], null);
        $this->setIfExists('soglia', $data ?? [], null);
        $this->setIfExists('parametro', $data ?? [], null);
        $this->setIfExists('deny_on_fail', $data ?? [], null);
        $this->setIfExists('connection_timeout', $data ?? [], null);
        $this->setIfExists('read_timeout', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['server_url'] === null) {
            $invalidProperties[] = "'server_url' can't be null";
        }
        if ($this->container['site_key'] === null) {
            $invalidProperties[] = "'site_key' can't be null";
        }
        if ($this->container['secret_key'] === null) {
            $invalidProperties[] = "'secret_key' can't be null";
        }
        if ($this->container['soglia'] === null) {
            $invalidProperties[] = "'soglia' can't be null";
        }
        if (($this->container['soglia'] > 1)) {
            $invalidProperties[] = "invalid value for 'soglia', must be smaller than or equal to 1.";
        }

        if (($this->container['soglia'] < 0.1)) {
            $invalidProperties[] = "invalid value for 'soglia', must be bigger than or equal to 0.1.";
        }

        if ($this->container['parametro'] === null) {
            $invalidProperties[] = "'parametro' can't be null";
        }
        if (!preg_match("/[a-zA-Z0-9-_]+/", $this->container['parametro'])) {
            $invalidProperties[] = "invalid value for 'parametro', must be conform to the pattern /[a-zA-Z0-9-_]+/.";
        }

        if ($this->container['deny_on_fail'] === null) {
            $invalidProperties[] = "'deny_on_fail' can't be null";
        }
        if ($this->container['connection_timeout'] === null) {
            $invalidProperties[] = "'connection_timeout' can't be null";
        }
        if (($this->container['connection_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'connection_timeout', must be bigger than or equal to 1.";
        }

        if ($this->container['read_timeout'] === null) {
            $invalidProperties[] = "'read_timeout' can't be null";
        }
        if (($this->container['read_timeout'] < 1)) {
            $invalidProperties[] = "invalid value for 'read_timeout', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets server_url
     *
     * @return string
     */
    public function getServerUrl()
    {
        return $this->container['server_url'];
    }

    /**
     * Sets server_url
     *
     * @param string $server_url URL del servizio di verifica
     *
     * @return self
     */
    public function setServerUrl($server_url)
    {
        if (is_null($server_url)) {
            throw new \InvalidArgumentException('non-nullable server_url cannot be null');
        }
        $this->container['server_url'] = $server_url;

        return $this;
    }

    /**
     * Gets site_key
     *
     * @return string
     */
    public function getSiteKey()
    {
        return $this->container['site_key'];
    }

    /**
     * Sets site_key
     *
     * @param string $site_key chiave sito
     *
     * @return self
     */
    public function setSiteKey($site_key)
    {
        if (is_null($site_key)) {
            throw new \InvalidArgumentException('non-nullable site_key cannot be null');
        }
        $this->container['site_key'] = $site_key;

        return $this;
    }

    /**
     * Gets secret_key
     *
     * @return string
     */
    public function getSecretKey()
    {
        return $this->container['secret_key'];
    }

    /**
     * Sets secret_key
     *
     * @param string $secret_key chiave segreta di configurazione per l'applicazione
     *
     * @return self
     */
    public function setSecretKey($secret_key)
    {
        if (is_null($secret_key)) {
            throw new \InvalidArgumentException('non-nullable secret_key cannot be null');
        }
        $this->container['secret_key'] = $secret_key;

        return $this;
    }

    /**
     * Gets soglia
     *
     * @return float
     */
    public function getSoglia()
    {
        return $this->container['soglia'];
    }

    /**
     * Sets soglia
     *
     * @param float $soglia Soglia di accettazione della risposta di validazione
     *
     * @return self
     */
    public function setSoglia($soglia)
    {
        if (is_null($soglia)) {
            throw new \InvalidArgumentException('non-nullable soglia cannot be null');
        }

        if (($soglia > 1)) {
            throw new \InvalidArgumentException('invalid value for $soglia when calling ConfigurazioneReCaptcha., must be smaller than or equal to 1.');
        }
        if (($soglia < 0.1)) {
            throw new \InvalidArgumentException('invalid value for $soglia when calling ConfigurazioneReCaptcha., must be bigger than or equal to 0.1.');
        }

        $this->container['soglia'] = $soglia;

        return $this;
    }

    /**
     * Gets parametro
     *
     * @return string
     */
    public function getParametro()
    {
        return $this->container['parametro'];
    }

    /**
     * Sets parametro
     *
     * @param string $parametro nome del parametro da utilizzare per leggere la response da inviare al server
     *
     * @return self
     */
    public function setParametro($parametro)
    {
        if (is_null($parametro)) {
            throw new \InvalidArgumentException('non-nullable parametro cannot be null');
        }

        if ((!preg_match("/[a-zA-Z0-9-_]+/", ObjectSerializer::toString($parametro)))) {
            throw new \InvalidArgumentException("invalid value for \$parametro when calling ConfigurazioneReCaptcha., must conform to the pattern /[a-zA-Z0-9-_]+/.");
        }

        $this->container['parametro'] = $parametro;

        return $this;
    }

    /**
     * Gets deny_on_fail
     *
     * @return bool
     */
    public function getDenyOnFail()
    {
        return $this->container['deny_on_fail'];
    }

    /**
     * Sets deny_on_fail
     *
     * @param bool $deny_on_fail Indica se autorizzare la richiesta in caso di errore di raggiungibilita' del server
     *
     * @return self
     */
    public function setDenyOnFail($deny_on_fail)
    {
        if (is_null($deny_on_fail)) {
            throw new \InvalidArgumentException('non-nullable deny_on_fail cannot be null');
        }
        $this->container['deny_on_fail'] = $deny_on_fail;

        return $this;
    }

    /**
     * Gets connection_timeout
     *
     * @return int
     */
    public function getConnectionTimeout()
    {
        return $this->container['connection_timeout'];
    }

    /**
     * Sets connection_timeout
     *
     * @param int $connection_timeout Valore di ConnectionTimeout da impostare nella connessione con il server
     *
     * @return self
     */
    public function setConnectionTimeout($connection_timeout)
    {
        if (is_null($connection_timeout)) {
            throw new \InvalidArgumentException('non-nullable connection_timeout cannot be null');
        }

        if (($connection_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $connection_timeout when calling ConfigurazioneReCaptcha., must be bigger than or equal to 1.');
        }

        $this->container['connection_timeout'] = $connection_timeout;

        return $this;
    }

    /**
     * Gets read_timeout
     *
     * @return int
     */
    public function getReadTimeout()
    {
        return $this->container['read_timeout'];
    }

    /**
     * Sets read_timeout
     *
     * @param int $read_timeout Valore di ReadTimeout da impostare nella connessione con il server
     *
     * @return self
     */
    public function setReadTimeout($read_timeout)
    {
        if (is_null($read_timeout)) {
            throw new \InvalidArgumentException('non-nullable read_timeout cannot be null');
        }

        if (($read_timeout < 1)) {
            throw new \InvalidArgumentException('invalid value for $read_timeout when calling ConfigurazioneReCaptcha., must be bigger than or equal to 1.');
        }

        $this->container['read_timeout'] = $read_timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



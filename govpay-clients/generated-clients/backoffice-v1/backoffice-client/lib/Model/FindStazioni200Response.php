<?php
/**
 * FindStazioni200Response
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * FindStazioni200Response Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FindStazioni200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'findStazioni_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'num_risultati' => 'int',
        'num_pagine' => 'int',
        'risultati_per_pagina' => 'int',
        'pagina' => 'int',
        'prossimi_risultati' => 'string',
        'max_risultati' => 'int',
        'risultati' => '\GovPay\Backoffice\Model\StazioneIndex[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'num_risultati' => 'int32',
        'num_pagine' => 'int32',
        'risultati_per_pagina' => 'int32',
        'pagina' => 'int32',
        'prossimi_risultati' => null,
        'max_risultati' => 'int32',
        'risultati' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'num_risultati' => false,
        'num_pagine' => false,
        'risultati_per_pagina' => false,
        'pagina' => false,
        'prossimi_risultati' => false,
        'max_risultati' => false,
        'risultati' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'num_risultati' => 'numRisultati',
        'num_pagine' => 'numPagine',
        'risultati_per_pagina' => 'risultatiPerPagina',
        'pagina' => 'pagina',
        'prossimi_risultati' => 'prossimiRisultati',
        'max_risultati' => 'maxRisultati',
        'risultati' => 'risultati'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'num_risultati' => 'setNumRisultati',
        'num_pagine' => 'setNumPagine',
        'risultati_per_pagina' => 'setRisultatiPerPagina',
        'pagina' => 'setPagina',
        'prossimi_risultati' => 'setProssimiRisultati',
        'max_risultati' => 'setMaxRisultati',
        'risultati' => 'setRisultati'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'num_risultati' => 'getNumRisultati',
        'num_pagine' => 'getNumPagine',
        'risultati_per_pagina' => 'getRisultatiPerPagina',
        'pagina' => 'getPagina',
        'prossimi_risultati' => 'getProssimiRisultati',
        'max_risultati' => 'getMaxRisultati',
        'risultati' => 'getRisultati'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('num_risultati', $data ?? [], null);
        $this->setIfExists('num_pagine', $data ?? [], null);
        $this->setIfExists('risultati_per_pagina', $data ?? [], null);
        $this->setIfExists('pagina', $data ?? [], null);
        $this->setIfExists('prossimi_risultati', $data ?? [], null);
        $this->setIfExists('max_risultati', $data ?? [], null);
        $this->setIfExists('risultati', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['risultati'] === null) {
            $invalidProperties[] = "'risultati' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets num_risultati
     *
     * @return int|null
     */
    public function getNumRisultati()
    {
        return $this->container['num_risultati'];
    }

    /**
     * Sets num_risultati
     *
     * @param int|null $num_risultati num_risultati
     *
     * @return self
     */
    public function setNumRisultati($num_risultati)
    {
        if (is_null($num_risultati)) {
            throw new \InvalidArgumentException('non-nullable num_risultati cannot be null');
        }
        $this->container['num_risultati'] = $num_risultati;

        return $this;
    }

    /**
     * Gets num_pagine
     *
     * @return int|null
     */
    public function getNumPagine()
    {
        return $this->container['num_pagine'];
    }

    /**
     * Sets num_pagine
     *
     * @param int|null $num_pagine num_pagine
     *
     * @return self
     */
    public function setNumPagine($num_pagine)
    {
        if (is_null($num_pagine)) {
            throw new \InvalidArgumentException('non-nullable num_pagine cannot be null');
        }
        $this->container['num_pagine'] = $num_pagine;

        return $this;
    }

    /**
     * Gets risultati_per_pagina
     *
     * @return int|null
     */
    public function getRisultatiPerPagina()
    {
        return $this->container['risultati_per_pagina'];
    }

    /**
     * Sets risultati_per_pagina
     *
     * @param int|null $risultati_per_pagina risultati_per_pagina
     *
     * @return self
     */
    public function setRisultatiPerPagina($risultati_per_pagina)
    {
        if (is_null($risultati_per_pagina)) {
            throw new \InvalidArgumentException('non-nullable risultati_per_pagina cannot be null');
        }
        $this->container['risultati_per_pagina'] = $risultati_per_pagina;

        return $this;
    }

    /**
     * Gets pagina
     *
     * @return int|null
     */
    public function getPagina()
    {
        return $this->container['pagina'];
    }

    /**
     * Sets pagina
     *
     * @param int|null $pagina pagina
     *
     * @return self
     */
    public function setPagina($pagina)
    {
        if (is_null($pagina)) {
            throw new \InvalidArgumentException('non-nullable pagina cannot be null');
        }
        $this->container['pagina'] = $pagina;

        return $this;
    }

    /**
     * Gets prossimi_risultati
     *
     * @return string|null
     */
    public function getProssimiRisultati()
    {
        return $this->container['prossimi_risultati'];
    }

    /**
     * Sets prossimi_risultati
     *
     * @param string|null $prossimi_risultati prossimi_risultati
     *
     * @return self
     */
    public function setProssimiRisultati($prossimi_risultati)
    {
        if (is_null($prossimi_risultati)) {
            throw new \InvalidArgumentException('non-nullable prossimi_risultati cannot be null');
        }
        $this->container['prossimi_risultati'] = $prossimi_risultati;

        return $this;
    }

    /**
     * Gets max_risultati
     *
     * @return int|null
     */
    public function getMaxRisultati()
    {
        return $this->container['max_risultati'];
    }

    /**
     * Sets max_risultati
     *
     * @param int|null $max_risultati max_risultati
     *
     * @return self
     */
    public function setMaxRisultati($max_risultati)
    {
        if (is_null($max_risultati)) {
            throw new \InvalidArgumentException('non-nullable max_risultati cannot be null');
        }
        $this->container['max_risultati'] = $max_risultati;

        return $this;
    }

    /**
     * Gets risultati
     *
     * @return \GovPay\Backoffice\Model\StazioneIndex[]
     */
    public function getRisultati()
    {
        return $this->container['risultati'];
    }

    /**
     * Sets risultati
     *
     * @param \GovPay\Backoffice\Model\StazioneIndex[] $risultati risultati
     *
     * @return self
     */
    public function setRisultati($risultati)
    {
        if (is_null($risultati)) {
            throw new \InvalidArgumentException('non-nullable risultati cannot be null');
        }
        $this->container['risultati'] = $risultati;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * Tracciato
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * Tracciato Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Tracciato implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tracciato';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'cod_dominio' => 'string',
        'tipo' => 'string',
        'stato' => 'string',
        'descrizione_stato' => 'string',
        'data_caricamento' => '\DateTime',
        'data_completamento' => '\DateTime',
        'bean_dati' => 'object',
        'filename_richiesta' => 'string',
        'filename_esito' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'cod_dominio' => null,
        'tipo' => null,
        'stato' => null,
        'descrizione_stato' => null,
        'data_caricamento' => 'date-time',
        'data_completamento' => 'date-time',
        'bean_dati' => null,
        'filename_richiesta' => null,
        'filename_esito' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'cod_dominio' => false,
        'tipo' => false,
        'stato' => false,
        'descrizione_stato' => false,
        'data_caricamento' => false,
        'data_completamento' => false,
        'bean_dati' => false,
        'filename_richiesta' => false,
        'filename_esito' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'cod_dominio' => 'codDominio',
        'tipo' => 'tipo',
        'stato' => 'stato',
        'descrizione_stato' => 'descrizioneStato',
        'data_caricamento' => 'dataCaricamento',
        'data_completamento' => 'dataCompletamento',
        'bean_dati' => 'beanDati',
        'filename_richiesta' => 'filenameRichiesta',
        'filename_esito' => 'filenameEsito'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'cod_dominio' => 'setCodDominio',
        'tipo' => 'setTipo',
        'stato' => 'setStato',
        'descrizione_stato' => 'setDescrizioneStato',
        'data_caricamento' => 'setDataCaricamento',
        'data_completamento' => 'setDataCompletamento',
        'bean_dati' => 'setBeanDati',
        'filename_richiesta' => 'setFilenameRichiesta',
        'filename_esito' => 'setFilenameEsito'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'cod_dominio' => 'getCodDominio',
        'tipo' => 'getTipo',
        'stato' => 'getStato',
        'descrizione_stato' => 'getDescrizioneStato',
        'data_caricamento' => 'getDataCaricamento',
        'data_completamento' => 'getDataCompletamento',
        'bean_dati' => 'getBeanDati',
        'filename_richiesta' => 'getFilenameRichiesta',
        'filename_esito' => 'getFilenameEsito'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('cod_dominio', $data ?? [], null);
        $this->setIfExists('tipo', $data ?? [], null);
        $this->setIfExists('stato', $data ?? [], null);
        $this->setIfExists('descrizione_stato', $data ?? [], null);
        $this->setIfExists('data_caricamento', $data ?? [], null);
        $this->setIfExists('data_completamento', $data ?? [], null);
        $this->setIfExists('bean_dati', $data ?? [], null);
        $this->setIfExists('filename_richiesta', $data ?? [], null);
        $this->setIfExists('filename_esito', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['cod_dominio'] === null) {
            $invalidProperties[] = "'cod_dominio' can't be null";
        }
        if ($this->container['tipo'] === null) {
            $invalidProperties[] = "'tipo' can't be null";
        }
        if ($this->container['stato'] === null) {
            $invalidProperties[] = "'stato' can't be null";
        }
        if ($this->container['data_caricamento'] === null) {
            $invalidProperties[] = "'data_caricamento' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identificativo numerico del tracciato
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets cod_dominio
     *
     * @return string
     */
    public function getCodDominio()
    {
        return $this->container['cod_dominio'];
    }

    /**
     * Sets cod_dominio
     *
     * @param string $cod_dominio Dominio creatore al tracciato
     *
     * @return self
     */
    public function setCodDominio($cod_dominio)
    {
        if (is_null($cod_dominio)) {
            throw new \InvalidArgumentException('non-nullable cod_dominio cannot be null');
        }
        $this->container['cod_dominio'] = $cod_dominio;

        return $this;
    }

    /**
     * Gets tipo
     *
     * @return string
     */
    public function getTipo()
    {
        return $this->container['tipo'];
    }

    /**
     * Sets tipo
     *
     * @param string $tipo Tipo di tracciato
     *
     * @return self
     */
    public function setTipo($tipo)
    {
        if (is_null($tipo)) {
            throw new \InvalidArgumentException('non-nullable tipo cannot be null');
        }
        $this->container['tipo'] = $tipo;

        return $this;
    }

    /**
     * Gets stato
     *
     * @return string
     */
    public function getStato()
    {
        return $this->container['stato'];
    }

    /**
     * Sets stato
     *
     * @param string $stato Stato del tracciato
     *
     * @return self
     */
    public function setStato($stato)
    {
        if (is_null($stato)) {
            throw new \InvalidArgumentException('non-nullable stato cannot be null');
        }
        $this->container['stato'] = $stato;

        return $this;
    }

    /**
     * Gets descrizione_stato
     *
     * @return string|null
     */
    public function getDescrizioneStato()
    {
        return $this->container['descrizione_stato'];
    }

    /**
     * Sets descrizione_stato
     *
     * @param string|null $descrizione_stato Descrizione dello stato del tracciato
     *
     * @return self
     */
    public function setDescrizioneStato($descrizione_stato)
    {
        if (is_null($descrizione_stato)) {
            throw new \InvalidArgumentException('non-nullable descrizione_stato cannot be null');
        }
        $this->container['descrizione_stato'] = $descrizione_stato;

        return $this;
    }

    /**
     * Gets data_caricamento
     *
     * @return \DateTime
     */
    public function getDataCaricamento()
    {
        return $this->container['data_caricamento'];
    }

    /**
     * Sets data_caricamento
     *
     * @param \DateTime $data_caricamento Data di caricamento del tracciato
     *
     * @return self
     */
    public function setDataCaricamento($data_caricamento)
    {
        if (is_null($data_caricamento)) {
            throw new \InvalidArgumentException('non-nullable data_caricamento cannot be null');
        }
        $this->container['data_caricamento'] = $data_caricamento;

        return $this;
    }

    /**
     * Gets data_completamento
     *
     * @return \DateTime|null
     */
    public function getDataCompletamento()
    {
        return $this->container['data_completamento'];
    }

    /**
     * Sets data_completamento
     *
     * @param \DateTime|null $data_completamento Data di completamento del caricamento del tracciato
     *
     * @return self
     */
    public function setDataCompletamento($data_completamento)
    {
        if (is_null($data_completamento)) {
            throw new \InvalidArgumentException('non-nullable data_completamento cannot be null');
        }
        $this->container['data_completamento'] = $data_completamento;

        return $this;
    }

    /**
     * Gets bean_dati
     *
     * @return object|null
     */
    public function getBeanDati()
    {
        return $this->container['bean_dati'];
    }

    /**
     * Sets bean_dati
     *
     * @param object|null $bean_dati Dati applicativi del tracciato
     *
     * @return self
     */
    public function setBeanDati($bean_dati)
    {
        if (is_null($bean_dati)) {
            throw new \InvalidArgumentException('non-nullable bean_dati cannot be null');
        }
        $this->container['bean_dati'] = $bean_dati;

        return $this;
    }

    /**
     * Gets filename_richiesta
     *
     * @return string|null
     */
    public function getFilenameRichiesta()
    {
        return $this->container['filename_richiesta'];
    }

    /**
     * Sets filename_richiesta
     *
     * @param string|null $filename_richiesta Nome del file di richiesta del tracciato
     *
     * @return self
     */
    public function setFilenameRichiesta($filename_richiesta)
    {
        if (is_null($filename_richiesta)) {
            throw new \InvalidArgumentException('non-nullable filename_richiesta cannot be null');
        }
        $this->container['filename_richiesta'] = $filename_richiesta;

        return $this;
    }

    /**
     * Gets filename_esito
     *
     * @return string|null
     */
    public function getFilenameEsito()
    {
        return $this->container['filename_esito'];
    }

    /**
     * Sets filename_esito
     *
     * @param string|null $filename_esito Nome del file di esito del tracciato
     *
     * @return self
     */
    public function setFilenameEsito($filename_esito)
    {
        if (is_null($filename_esito)) {
            throw new \InvalidArgumentException('non-nullable filename_esito cannot be null');
        }
        $this->container['filename_esito'] = $filename_esito;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



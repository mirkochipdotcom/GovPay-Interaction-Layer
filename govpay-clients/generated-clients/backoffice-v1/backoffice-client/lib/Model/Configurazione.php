<?php
/**
 * Configurazione
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * Configurazione Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Configurazione implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'configurazione';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'giornale_eventi' => '\GovPay\Backoffice\Model\Giornale',
        'tracciato_csv' => '\GovPay\Backoffice\Model\TracciatoCsv',
        'hardening' => '\GovPay\Backoffice\Model\Hardening',
        'mail_batch' => '\GovPay\Backoffice\Model\MailBatch',
        'avvisatura_mail' => '\GovPay\Backoffice\Model\ConfigurazioneAvvisaturaMail',
        'avvisatura_app_io' => '\GovPay\Backoffice\Model\ConfigurazioneAvvisaturaAppIO',
        'app_io_batch' => '\GovPay\Backoffice\Model\AppIOBatch'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'giornale_eventi' => null,
        'tracciato_csv' => null,
        'hardening' => null,
        'mail_batch' => null,
        'avvisatura_mail' => null,
        'avvisatura_app_io' => null,
        'app_io_batch' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'giornale_eventi' => false,
        'tracciato_csv' => false,
        'hardening' => false,
        'mail_batch' => false,
        'avvisatura_mail' => false,
        'avvisatura_app_io' => false,
        'app_io_batch' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'giornale_eventi' => 'giornaleEventi',
        'tracciato_csv' => 'tracciatoCsv',
        'hardening' => 'hardening',
        'mail_batch' => 'mailBatch',
        'avvisatura_mail' => 'avvisaturaMail',
        'avvisatura_app_io' => 'avvisaturaAppIO',
        'app_io_batch' => 'appIOBatch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'giornale_eventi' => 'setGiornaleEventi',
        'tracciato_csv' => 'setTracciatoCsv',
        'hardening' => 'setHardening',
        'mail_batch' => 'setMailBatch',
        'avvisatura_mail' => 'setAvvisaturaMail',
        'avvisatura_app_io' => 'setAvvisaturaAppIo',
        'app_io_batch' => 'setAppIoBatch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'giornale_eventi' => 'getGiornaleEventi',
        'tracciato_csv' => 'getTracciatoCsv',
        'hardening' => 'getHardening',
        'mail_batch' => 'getMailBatch',
        'avvisatura_mail' => 'getAvvisaturaMail',
        'avvisatura_app_io' => 'getAvvisaturaAppIo',
        'app_io_batch' => 'getAppIoBatch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('giornale_eventi', $data ?? [], null);
        $this->setIfExists('tracciato_csv', $data ?? [], null);
        $this->setIfExists('hardening', $data ?? [], null);
        $this->setIfExists('mail_batch', $data ?? [], null);
        $this->setIfExists('avvisatura_mail', $data ?? [], null);
        $this->setIfExists('avvisatura_app_io', $data ?? [], null);
        $this->setIfExists('app_io_batch', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['giornale_eventi'] === null) {
            $invalidProperties[] = "'giornale_eventi' can't be null";
        }
        if ($this->container['tracciato_csv'] === null) {
            $invalidProperties[] = "'tracciato_csv' can't be null";
        }
        if ($this->container['hardening'] === null) {
            $invalidProperties[] = "'hardening' can't be null";
        }
        if ($this->container['mail_batch'] === null) {
            $invalidProperties[] = "'mail_batch' can't be null";
        }
        if ($this->container['avvisatura_mail'] === null) {
            $invalidProperties[] = "'avvisatura_mail' can't be null";
        }
        if ($this->container['avvisatura_app_io'] === null) {
            $invalidProperties[] = "'avvisatura_app_io' can't be null";
        }
        if ($this->container['app_io_batch'] === null) {
            $invalidProperties[] = "'app_io_batch' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets giornale_eventi
     *
     * @return \GovPay\Backoffice\Model\Giornale
     */
    public function getGiornaleEventi()
    {
        return $this->container['giornale_eventi'];
    }

    /**
     * Sets giornale_eventi
     *
     * @param \GovPay\Backoffice\Model\Giornale $giornale_eventi giornale_eventi
     *
     * @return self
     */
    public function setGiornaleEventi($giornale_eventi)
    {
        if (is_null($giornale_eventi)) {
            throw new \InvalidArgumentException('non-nullable giornale_eventi cannot be null');
        }
        $this->container['giornale_eventi'] = $giornale_eventi;

        return $this;
    }

    /**
     * Gets tracciato_csv
     *
     * @return \GovPay\Backoffice\Model\TracciatoCsv
     */
    public function getTracciatoCsv()
    {
        return $this->container['tracciato_csv'];
    }

    /**
     * Sets tracciato_csv
     *
     * @param \GovPay\Backoffice\Model\TracciatoCsv $tracciato_csv tracciato_csv
     *
     * @return self
     */
    public function setTracciatoCsv($tracciato_csv)
    {
        if (is_null($tracciato_csv)) {
            throw new \InvalidArgumentException('non-nullable tracciato_csv cannot be null');
        }
        $this->container['tracciato_csv'] = $tracciato_csv;

        return $this;
    }

    /**
     * Gets hardening
     *
     * @return \GovPay\Backoffice\Model\Hardening
     */
    public function getHardening()
    {
        return $this->container['hardening'];
    }

    /**
     * Sets hardening
     *
     * @param \GovPay\Backoffice\Model\Hardening $hardening hardening
     *
     * @return self
     */
    public function setHardening($hardening)
    {
        if (is_null($hardening)) {
            throw new \InvalidArgumentException('non-nullable hardening cannot be null');
        }
        $this->container['hardening'] = $hardening;

        return $this;
    }

    /**
     * Gets mail_batch
     *
     * @return \GovPay\Backoffice\Model\MailBatch
     */
    public function getMailBatch()
    {
        return $this->container['mail_batch'];
    }

    /**
     * Sets mail_batch
     *
     * @param \GovPay\Backoffice\Model\MailBatch $mail_batch mail_batch
     *
     * @return self
     */
    public function setMailBatch($mail_batch)
    {
        if (is_null($mail_batch)) {
            throw new \InvalidArgumentException('non-nullable mail_batch cannot be null');
        }
        $this->container['mail_batch'] = $mail_batch;

        return $this;
    }

    /**
     * Gets avvisatura_mail
     *
     * @return \GovPay\Backoffice\Model\ConfigurazioneAvvisaturaMail
     */
    public function getAvvisaturaMail()
    {
        return $this->container['avvisatura_mail'];
    }

    /**
     * Sets avvisatura_mail
     *
     * @param \GovPay\Backoffice\Model\ConfigurazioneAvvisaturaMail $avvisatura_mail avvisatura_mail
     *
     * @return self
     */
    public function setAvvisaturaMail($avvisatura_mail)
    {
        if (is_null($avvisatura_mail)) {
            throw new \InvalidArgumentException('non-nullable avvisatura_mail cannot be null');
        }
        $this->container['avvisatura_mail'] = $avvisatura_mail;

        return $this;
    }

    /**
     * Gets avvisatura_app_io
     *
     * @return \GovPay\Backoffice\Model\ConfigurazioneAvvisaturaAppIO
     */
    public function getAvvisaturaAppIo()
    {
        return $this->container['avvisatura_app_io'];
    }

    /**
     * Sets avvisatura_app_io
     *
     * @param \GovPay\Backoffice\Model\ConfigurazioneAvvisaturaAppIO $avvisatura_app_io avvisatura_app_io
     *
     * @return self
     */
    public function setAvvisaturaAppIo($avvisatura_app_io)
    {
        if (is_null($avvisatura_app_io)) {
            throw new \InvalidArgumentException('non-nullable avvisatura_app_io cannot be null');
        }
        $this->container['avvisatura_app_io'] = $avvisatura_app_io;

        return $this;
    }

    /**
     * Gets app_io_batch
     *
     * @return \GovPay\Backoffice\Model\AppIOBatch
     */
    public function getAppIoBatch()
    {
        return $this->container['app_io_batch'];
    }

    /**
     * Sets app_io_batch
     *
     * @param \GovPay\Backoffice\Model\AppIOBatch $app_io_batch app_io_batch
     *
     * @return self
     */
    public function setAppIoBatch($app_io_batch)
    {
        if (is_null($app_io_batch)) {
            throw new \InvalidArgumentException('non-nullable app_io_batch cannot be null');
        }
        $this->container['app_io_batch'] = $app_io_batch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * StatisticaQuadratura
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * StatisticaQuadratura Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StatisticaQuadratura implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'statisticaQuadratura';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'numero_pagamenti' => 'int',
        'importo' => 'float',
        'dettaglio' => 'string',
        'direzione' => 'string',
        'divisione' => 'string',
        'tassonomia' => 'string',
        'tipo_pendenza' => '\GovPay\Backoffice\Model\TipoPendenzaIndex',
        'dominio' => '\GovPay\Backoffice\Model\DominioIndex',
        'unita_operativa' => '\GovPay\Backoffice\Model\UnitaOperativaIndex',
        'applicazione' => '\GovPay\Backoffice\Model\ApplicazioneIndex'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'numero_pagamenti' => 'int64',
        'importo' => 'double',
        'dettaglio' => null,
        'direzione' => null,
        'divisione' => null,
        'tassonomia' => null,
        'tipo_pendenza' => null,
        'dominio' => null,
        'unita_operativa' => null,
        'applicazione' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'numero_pagamenti' => false,
        'importo' => false,
        'dettaglio' => false,
        'direzione' => false,
        'divisione' => false,
        'tassonomia' => false,
        'tipo_pendenza' => false,
        'dominio' => false,
        'unita_operativa' => false,
        'applicazione' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numero_pagamenti' => 'numeroPagamenti',
        'importo' => 'importo',
        'dettaglio' => 'dettaglio',
        'direzione' => 'direzione',
        'divisione' => 'divisione',
        'tassonomia' => 'tassonomia',
        'tipo_pendenza' => 'tipoPendenza',
        'dominio' => 'dominio',
        'unita_operativa' => 'unitaOperativa',
        'applicazione' => 'applicazione'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numero_pagamenti' => 'setNumeroPagamenti',
        'importo' => 'setImporto',
        'dettaglio' => 'setDettaglio',
        'direzione' => 'setDirezione',
        'divisione' => 'setDivisione',
        'tassonomia' => 'setTassonomia',
        'tipo_pendenza' => 'setTipoPendenza',
        'dominio' => 'setDominio',
        'unita_operativa' => 'setUnitaOperativa',
        'applicazione' => 'setApplicazione'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numero_pagamenti' => 'getNumeroPagamenti',
        'importo' => 'getImporto',
        'dettaglio' => 'getDettaglio',
        'direzione' => 'getDirezione',
        'divisione' => 'getDivisione',
        'tassonomia' => 'getTassonomia',
        'tipo_pendenza' => 'getTipoPendenza',
        'dominio' => 'getDominio',
        'unita_operativa' => 'getUnitaOperativa',
        'applicazione' => 'getApplicazione'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('numero_pagamenti', $data ?? [], null);
        $this->setIfExists('importo', $data ?? [], null);
        $this->setIfExists('dettaglio', $data ?? [], null);
        $this->setIfExists('direzione', $data ?? [], null);
        $this->setIfExists('divisione', $data ?? [], null);
        $this->setIfExists('tassonomia', $data ?? [], null);
        $this->setIfExists('tipo_pendenza', $data ?? [], null);
        $this->setIfExists('dominio', $data ?? [], null);
        $this->setIfExists('unita_operativa', $data ?? [], null);
        $this->setIfExists('applicazione', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['numero_pagamenti'] === null) {
            $invalidProperties[] = "'numero_pagamenti' can't be null";
        }
        if ($this->container['importo'] === null) {
            $invalidProperties[] = "'importo' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets numero_pagamenti
     *
     * @return int
     */
    public function getNumeroPagamenti()
    {
        return $this->container['numero_pagamenti'];
    }

    /**
     * Sets numero_pagamenti
     *
     * @param int $numero_pagamenti Numero di pagamenti corrispondenti ai parametri impostati
     *
     * @return self
     */
    public function setNumeroPagamenti($numero_pagamenti)
    {
        if (is_null($numero_pagamenti)) {
            throw new \InvalidArgumentException('non-nullable numero_pagamenti cannot be null');
        }
        $this->container['numero_pagamenti'] = $numero_pagamenti;

        return $this;
    }

    /**
     * Gets importo
     *
     * @return float
     */
    public function getImporto()
    {
        return $this->container['importo'];
    }

    /**
     * Sets importo
     *
     * @param float $importo Importo Totale corrispondente ai parametri impostati
     *
     * @return self
     */
    public function setImporto($importo)
    {
        if (is_null($importo)) {
            throw new \InvalidArgumentException('non-nullable importo cannot be null');
        }
        $this->container['importo'] = $importo;

        return $this;
    }

    /**
     * Gets dettaglio
     *
     * @return string|null
     */
    public function getDettaglio()
    {
        return $this->container['dettaglio'];
    }

    /**
     * Sets dettaglio
     *
     * @param string|null $dettaglio Url al dettaglio della statistica
     *
     * @return self
     */
    public function setDettaglio($dettaglio)
    {
        if (is_null($dettaglio)) {
            throw new \InvalidArgumentException('non-nullable dettaglio cannot be null');
        }
        $this->container['dettaglio'] = $dettaglio;

        return $this;
    }

    /**
     * Gets direzione
     *
     * @return string|null
     */
    public function getDirezione()
    {
        return $this->container['direzione'];
    }

    /**
     * Sets direzione
     *
     * @param string|null $direzione Identificativo della direzione interna all'ente creditore
     *
     * @return self
     */
    public function setDirezione($direzione)
    {
        if (is_null($direzione)) {
            throw new \InvalidArgumentException('non-nullable direzione cannot be null');
        }
        $this->container['direzione'] = $direzione;

        return $this;
    }

    /**
     * Gets divisione
     *
     * @return string|null
     */
    public function getDivisione()
    {
        return $this->container['divisione'];
    }

    /**
     * Sets divisione
     *
     * @param string|null $divisione Identificativo della divisione interna all'ente creditore
     *
     * @return self
     */
    public function setDivisione($divisione)
    {
        if (is_null($divisione)) {
            throw new \InvalidArgumentException('non-nullable divisione cannot be null');
        }
        $this->container['divisione'] = $divisione;

        return $this;
    }

    /**
     * Gets tassonomia
     *
     * @return string|null
     */
    public function getTassonomia()
    {
        return $this->container['tassonomia'];
    }

    /**
     * Sets tassonomia
     *
     * @param string|null $tassonomia Macro categoria della pendenza secondo la classificazione del creditore
     *
     * @return self
     */
    public function setTassonomia($tassonomia)
    {
        if (is_null($tassonomia)) {
            throw new \InvalidArgumentException('non-nullable tassonomia cannot be null');
        }
        $this->container['tassonomia'] = $tassonomia;

        return $this;
    }

    /**
     * Gets tipo_pendenza
     *
     * @return \GovPay\Backoffice\Model\TipoPendenzaIndex|null
     */
    public function getTipoPendenza()
    {
        return $this->container['tipo_pendenza'];
    }

    /**
     * Sets tipo_pendenza
     *
     * @param \GovPay\Backoffice\Model\TipoPendenzaIndex|null $tipo_pendenza tipo_pendenza
     *
     * @return self
     */
    public function setTipoPendenza($tipo_pendenza)
    {
        if (is_null($tipo_pendenza)) {
            throw new \InvalidArgumentException('non-nullable tipo_pendenza cannot be null');
        }
        $this->container['tipo_pendenza'] = $tipo_pendenza;

        return $this;
    }

    /**
     * Gets dominio
     *
     * @return \GovPay\Backoffice\Model\DominioIndex|null
     */
    public function getDominio()
    {
        return $this->container['dominio'];
    }

    /**
     * Sets dominio
     *
     * @param \GovPay\Backoffice\Model\DominioIndex|null $dominio dominio
     *
     * @return self
     */
    public function setDominio($dominio)
    {
        if (is_null($dominio)) {
            throw new \InvalidArgumentException('non-nullable dominio cannot be null');
        }
        $this->container['dominio'] = $dominio;

        return $this;
    }

    /**
     * Gets unita_operativa
     *
     * @return \GovPay\Backoffice\Model\UnitaOperativaIndex|null
     */
    public function getUnitaOperativa()
    {
        return $this->container['unita_operativa'];
    }

    /**
     * Sets unita_operativa
     *
     * @param \GovPay\Backoffice\Model\UnitaOperativaIndex|null $unita_operativa unita_operativa
     *
     * @return self
     */
    public function setUnitaOperativa($unita_operativa)
    {
        if (is_null($unita_operativa)) {
            throw new \InvalidArgumentException('non-nullable unita_operativa cannot be null');
        }
        $this->container['unita_operativa'] = $unita_operativa;

        return $this;
    }

    /**
     * Gets applicazione
     *
     * @return \GovPay\Backoffice\Model\ApplicazioneIndex|null
     */
    public function getApplicazione()
    {
        return $this->container['applicazione'];
    }

    /**
     * Sets applicazione
     *
     * @param \GovPay\Backoffice\Model\ApplicazioneIndex|null $applicazione applicazione
     *
     * @return self
     */
    public function setApplicazione($applicazione)
    {
        if (is_null($applicazione)) {
            throw new \InvalidArgumentException('non-nullable applicazione cannot be null');
        }
        $this->container['applicazione'] = $applicazione;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * Entrata
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * Entrata Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Entrata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'entrata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'iban_accredito' => 'string',
        'iban_appoggio' => 'string',
        'tipo_contabilita' => '\GovPay\Backoffice\Model\TipoContabilita',
        'codice_contabilita' => 'string',
        'abilitato' => 'bool',
        'id_entrata' => 'string',
        'tipo_entrata' => '\GovPay\Backoffice\Model\TipoEntrata'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'iban_accredito' => null,
        'iban_appoggio' => null,
        'tipo_contabilita' => null,
        'codice_contabilita' => null,
        'abilitato' => null,
        'id_entrata' => null,
        'tipo_entrata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'iban_accredito' => false,
        'iban_appoggio' => false,
        'tipo_contabilita' => false,
        'codice_contabilita' => false,
        'abilitato' => true,
        'id_entrata' => false,
        'tipo_entrata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iban_accredito' => 'ibanAccredito',
        'iban_appoggio' => 'ibanAppoggio',
        'tipo_contabilita' => 'tipoContabilita',
        'codice_contabilita' => 'codiceContabilita',
        'abilitato' => 'abilitato',
        'id_entrata' => 'idEntrata',
        'tipo_entrata' => 'tipoEntrata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iban_accredito' => 'setIbanAccredito',
        'iban_appoggio' => 'setIbanAppoggio',
        'tipo_contabilita' => 'setTipoContabilita',
        'codice_contabilita' => 'setCodiceContabilita',
        'abilitato' => 'setAbilitato',
        'id_entrata' => 'setIdEntrata',
        'tipo_entrata' => 'setTipoEntrata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iban_accredito' => 'getIbanAccredito',
        'iban_appoggio' => 'getIbanAppoggio',
        'tipo_contabilita' => 'getTipoContabilita',
        'codice_contabilita' => 'getCodiceContabilita',
        'abilitato' => 'getAbilitato',
        'id_entrata' => 'getIdEntrata',
        'tipo_entrata' => 'getTipoEntrata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('iban_accredito', $data ?? [], null);
        $this->setIfExists('iban_appoggio', $data ?? [], null);
        $this->setIfExists('tipo_contabilita', $data ?? [], null);
        $this->setIfExists('codice_contabilita', $data ?? [], null);
        $this->setIfExists('abilitato', $data ?? [], true);
        $this->setIfExists('id_entrata', $data ?? [], null);
        $this->setIfExists('tipo_entrata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['iban_accredito'] === null) {
            $invalidProperties[] = "'iban_accredito' can't be null";
        }
        if ($this->container['id_entrata'] === null) {
            $invalidProperties[] = "'id_entrata' can't be null";
        }
        if ($this->container['tipo_entrata'] === null) {
            $invalidProperties[] = "'tipo_entrata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iban_accredito
     *
     * @return string
     */
    public function getIbanAccredito()
    {
        return $this->container['iban_accredito'];
    }

    /**
     * Sets iban_accredito
     *
     * @param string $iban_accredito iban_accredito
     *
     * @return self
     */
    public function setIbanAccredito($iban_accredito)
    {
        if (is_null($iban_accredito)) {
            throw new \InvalidArgumentException('non-nullable iban_accredito cannot be null');
        }
        $this->container['iban_accredito'] = $iban_accredito;

        return $this;
    }

    /**
     * Gets iban_appoggio
     *
     * @return string|null
     */
    public function getIbanAppoggio()
    {
        return $this->container['iban_appoggio'];
    }

    /**
     * Sets iban_appoggio
     *
     * @param string|null $iban_appoggio iban_appoggio
     *
     * @return self
     */
    public function setIbanAppoggio($iban_appoggio)
    {
        if (is_null($iban_appoggio)) {
            throw new \InvalidArgumentException('non-nullable iban_appoggio cannot be null');
        }
        $this->container['iban_appoggio'] = $iban_appoggio;

        return $this;
    }

    /**
     * Gets tipo_contabilita
     *
     * @return \GovPay\Backoffice\Model\TipoContabilita|null
     */
    public function getTipoContabilita()
    {
        return $this->container['tipo_contabilita'];
    }

    /**
     * Sets tipo_contabilita
     *
     * @param \GovPay\Backoffice\Model\TipoContabilita|null $tipo_contabilita tipo_contabilita
     *
     * @return self
     */
    public function setTipoContabilita($tipo_contabilita)
    {
        if (is_null($tipo_contabilita)) {
            throw new \InvalidArgumentException('non-nullable tipo_contabilita cannot be null');
        }
        $this->container['tipo_contabilita'] = $tipo_contabilita;

        return $this;
    }

    /**
     * Gets codice_contabilita
     *
     * @return string|null
     */
    public function getCodiceContabilita()
    {
        return $this->container['codice_contabilita'];
    }

    /**
     * Sets codice_contabilita
     *
     * @param string|null $codice_contabilita Codifica del capitolo di bilancio
     *
     * @return self
     */
    public function setCodiceContabilita($codice_contabilita)
    {
        if (is_null($codice_contabilita)) {
            throw new \InvalidArgumentException('non-nullable codice_contabilita cannot be null');
        }
        $this->container['codice_contabilita'] = $codice_contabilita;

        return $this;
    }

    /**
     * Gets abilitato
     *
     * @return bool|null
     */
    public function getAbilitato()
    {
        return $this->container['abilitato'];
    }

    /**
     * Sets abilitato
     *
     * @param bool|null $abilitato Indicazione l'entrata e' abilitata
     *
     * @return self
     */
    public function setAbilitato($abilitato)
    {
        if (is_null($abilitato)) {
            array_push($this->openAPINullablesSetToNull, 'abilitato');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abilitato', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['abilitato'] = $abilitato;

        return $this;
    }

    /**
     * Gets id_entrata
     *
     * @return string
     */
    public function getIdEntrata()
    {
        return $this->container['id_entrata'];
    }

    /**
     * Sets id_entrata
     *
     * @param string $id_entrata id_entrata
     *
     * @return self
     */
    public function setIdEntrata($id_entrata)
    {
        if (is_null($id_entrata)) {
            throw new \InvalidArgumentException('non-nullable id_entrata cannot be null');
        }
        $this->container['id_entrata'] = $id_entrata;

        return $this;
    }

    /**
     * Gets tipo_entrata
     *
     * @return \GovPay\Backoffice\Model\TipoEntrata
     */
    public function getTipoEntrata()
    {
        return $this->container['tipo_entrata'];
    }

    /**
     * Sets tipo_entrata
     *
     * @param \GovPay\Backoffice\Model\TipoEntrata $tipo_entrata tipo_entrata
     *
     * @return self
     */
    public function setTipoEntrata($tipo_entrata)
    {
        if (is_null($tipo_entrata)) {
            throw new \InvalidArgumentException('non-nullable tipo_entrata cannot be null');
        }
        $this->container['tipo_entrata'] = $tipo_entrata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



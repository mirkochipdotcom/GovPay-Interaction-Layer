<?php
/**
 * Applicazione
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * Applicazione Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Applicazione implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'applicazione';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_a2_a' => 'string',
        'principal' => 'string',
        'password' => 'bool',
        'codifica_avvisi' => '\GovPay\Backoffice\Model\CodificaAvvisi',
        'domini' => '\GovPay\Backoffice\Model\DominioProfiloIndex[]',
        'tipi_pendenza' => '\GovPay\Backoffice\Model\TipoPendenza[]',
        'api_pagamenti' => 'bool',
        'api_pendenze' => 'bool',
        'api_ragioneria' => 'bool',
        'acl' => '\GovPay\Backoffice\Model\AclPost[]',
        'ruoli' => '\GovPay\Backoffice\Model\Ruolo[]',
        'servizio_integrazione' => '\GovPay\Backoffice\Model\Connector',
        'abilitato' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_a2_a' => null,
        'principal' => null,
        'password' => null,
        'codifica_avvisi' => null,
        'domini' => null,
        'tipi_pendenza' => null,
        'api_pagamenti' => null,
        'api_pendenze' => null,
        'api_ragioneria' => null,
        'acl' => null,
        'ruoli' => null,
        'servizio_integrazione' => null,
        'abilitato' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id_a2_a' => false,
        'principal' => false,
        'password' => false,
        'codifica_avvisi' => false,
        'domini' => false,
        'tipi_pendenza' => false,
        'api_pagamenti' => false,
        'api_pendenze' => false,
        'api_ragioneria' => false,
        'acl' => false,
        'ruoli' => false,
        'servizio_integrazione' => false,
        'abilitato' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_a2_a' => 'idA2A',
        'principal' => 'principal',
        'password' => 'password',
        'codifica_avvisi' => 'codificaAvvisi',
        'domini' => 'domini',
        'tipi_pendenza' => 'tipiPendenza',
        'api_pagamenti' => 'apiPagamenti',
        'api_pendenze' => 'apiPendenze',
        'api_ragioneria' => 'apiRagioneria',
        'acl' => 'acl',
        'ruoli' => 'ruoli',
        'servizio_integrazione' => 'servizioIntegrazione',
        'abilitato' => 'abilitato'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_a2_a' => 'setIdA2A',
        'principal' => 'setPrincipal',
        'password' => 'setPassword',
        'codifica_avvisi' => 'setCodificaAvvisi',
        'domini' => 'setDomini',
        'tipi_pendenza' => 'setTipiPendenza',
        'api_pagamenti' => 'setApiPagamenti',
        'api_pendenze' => 'setApiPendenze',
        'api_ragioneria' => 'setApiRagioneria',
        'acl' => 'setAcl',
        'ruoli' => 'setRuoli',
        'servizio_integrazione' => 'setServizioIntegrazione',
        'abilitato' => 'setAbilitato'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_a2_a' => 'getIdA2A',
        'principal' => 'getPrincipal',
        'password' => 'getPassword',
        'codifica_avvisi' => 'getCodificaAvvisi',
        'domini' => 'getDomini',
        'tipi_pendenza' => 'getTipiPendenza',
        'api_pagamenti' => 'getApiPagamenti',
        'api_pendenze' => 'getApiPendenze',
        'api_ragioneria' => 'getApiRagioneria',
        'acl' => 'getAcl',
        'ruoli' => 'getRuoli',
        'servizio_integrazione' => 'getServizioIntegrazione',
        'abilitato' => 'getAbilitato'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id_a2_a', $data ?? [], null);
        $this->setIfExists('principal', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('codifica_avvisi', $data ?? [], null);
        $this->setIfExists('domini', $data ?? [], null);
        $this->setIfExists('tipi_pendenza', $data ?? [], null);
        $this->setIfExists('api_pagamenti', $data ?? [], false);
        $this->setIfExists('api_pendenze', $data ?? [], false);
        $this->setIfExists('api_ragioneria', $data ?? [], false);
        $this->setIfExists('acl', $data ?? [], null);
        $this->setIfExists('ruoli', $data ?? [], null);
        $this->setIfExists('servizio_integrazione', $data ?? [], null);
        $this->setIfExists('abilitato', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id_a2_a'] === null) {
            $invalidProperties[] = "'id_a2_a' can't be null";
        }
        if ($this->container['principal'] === null) {
            $invalidProperties[] = "'principal' can't be null";
        }
        if ($this->container['abilitato'] === null) {
            $invalidProperties[] = "'abilitato' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_a2_a
     *
     * @return string
     */
    public function getIdA2A()
    {
        return $this->container['id_a2_a'];
    }

    /**
     * Sets id_a2_a
     *
     * @param string $id_a2_a Identificativo dell'applicazione
     *
     * @return self
     */
    public function setIdA2A($id_a2_a)
    {
        if (is_null($id_a2_a)) {
            throw new \InvalidArgumentException('non-nullable id_a2_a cannot be null');
        }
        $this->container['id_a2_a'] = $id_a2_a;

        return $this;
    }

    /**
     * Gets principal
     *
     * @return string
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal
     *
     * @param string $principal Identificativo di autenticazione
     *
     * @return self
     */
    public function setPrincipal($principal)
    {
        if (is_null($principal)) {
            throw new \InvalidArgumentException('non-nullable principal cannot be null');
        }
        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets password
     *
     * @return bool|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param bool|null $password Indica se e' stata configurata una password per l'accesso con HTTP-Basic.
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets codifica_avvisi
     *
     * @return \GovPay\Backoffice\Model\CodificaAvvisi|null
     */
    public function getCodificaAvvisi()
    {
        return $this->container['codifica_avvisi'];
    }

    /**
     * Sets codifica_avvisi
     *
     * @param \GovPay\Backoffice\Model\CodificaAvvisi|null $codifica_avvisi codifica_avvisi
     *
     * @return self
     */
    public function setCodificaAvvisi($codifica_avvisi)
    {
        if (is_null($codifica_avvisi)) {
            throw new \InvalidArgumentException('non-nullable codifica_avvisi cannot be null');
        }
        $this->container['codifica_avvisi'] = $codifica_avvisi;

        return $this;
    }

    /**
     * Gets domini
     *
     * @return \GovPay\Backoffice\Model\DominioProfiloIndex[]|null
     */
    public function getDomini()
    {
        return $this->container['domini'];
    }

    /**
     * Sets domini
     *
     * @param \GovPay\Backoffice\Model\DominioProfiloIndex[]|null $domini domini su cui e' abilitato ad operare
     *
     * @return self
     */
    public function setDomini($domini)
    {
        if (is_null($domini)) {
            throw new \InvalidArgumentException('non-nullable domini cannot be null');
        }
        $this->container['domini'] = $domini;

        return $this;
    }

    /**
     * Gets tipi_pendenza
     *
     * @return \GovPay\Backoffice\Model\TipoPendenza[]|null
     */
    public function getTipiPendenza()
    {
        return $this->container['tipi_pendenza'];
    }

    /**
     * Sets tipi_pendenza
     *
     * @param \GovPay\Backoffice\Model\TipoPendenza[]|null $tipi_pendenza tipologie di pendenza su cui e' abilitato ad operare
     *
     * @return self
     */
    public function setTipiPendenza($tipi_pendenza)
    {
        if (is_null($tipi_pendenza)) {
            throw new \InvalidArgumentException('non-nullable tipi_pendenza cannot be null');
        }
        $this->container['tipi_pendenza'] = $tipi_pendenza;

        return $this;
    }

    /**
     * Gets api_pagamenti
     *
     * @return bool|null
     */
    public function getApiPagamenti()
    {
        return $this->container['api_pagamenti'];
    }

    /**
     * Sets api_pagamenti
     *
     * @param bool|null $api_pagamenti Indicazione l'applicazione e' abitata all'utilizzo delle API-Pagamento
     *
     * @return self
     */
    public function setApiPagamenti($api_pagamenti)
    {
        if (is_null($api_pagamenti)) {
            throw new \InvalidArgumentException('non-nullable api_pagamenti cannot be null');
        }
        $this->container['api_pagamenti'] = $api_pagamenti;

        return $this;
    }

    /**
     * Gets api_pendenze
     *
     * @return bool|null
     */
    public function getApiPendenze()
    {
        return $this->container['api_pendenze'];
    }

    /**
     * Sets api_pendenze
     *
     * @param bool|null $api_pendenze Indicazione l'applicazione e' abitata all'utilizzo delle API-Pendenze
     *
     * @return self
     */
    public function setApiPendenze($api_pendenze)
    {
        if (is_null($api_pendenze)) {
            throw new \InvalidArgumentException('non-nullable api_pendenze cannot be null');
        }
        $this->container['api_pendenze'] = $api_pendenze;

        return $this;
    }

    /**
     * Gets api_ragioneria
     *
     * @return bool|null
     */
    public function getApiRagioneria()
    {
        return $this->container['api_ragioneria'];
    }

    /**
     * Sets api_ragioneria
     *
     * @param bool|null $api_ragioneria Indicazione l'applicazione e' abitata all'utilizzo delle API-Ragioneria
     *
     * @return self
     */
    public function setApiRagioneria($api_ragioneria)
    {
        if (is_null($api_ragioneria)) {
            throw new \InvalidArgumentException('non-nullable api_ragioneria cannot be null');
        }
        $this->container['api_ragioneria'] = $api_ragioneria;

        return $this;
    }

    /**
     * Gets acl
     *
     * @return \GovPay\Backoffice\Model\AclPost[]|null
     */
    public function getAcl()
    {
        return $this->container['acl'];
    }

    /**
     * Sets acl
     *
     * @param \GovPay\Backoffice\Model\AclPost[]|null $acl lista delle acl attive sull'applicazione
     *
     * @return self
     */
    public function setAcl($acl)
    {
        if (is_null($acl)) {
            throw new \InvalidArgumentException('non-nullable acl cannot be null');
        }
        $this->container['acl'] = $acl;

        return $this;
    }

    /**
     * Gets ruoli
     *
     * @return \GovPay\Backoffice\Model\Ruolo[]|null
     */
    public function getRuoli()
    {
        return $this->container['ruoli'];
    }

    /**
     * Sets ruoli
     *
     * @param \GovPay\Backoffice\Model\Ruolo[]|null $ruoli lista dei ruoli attivi sull'applicazione
     *
     * @return self
     */
    public function setRuoli($ruoli)
    {
        if (is_null($ruoli)) {
            throw new \InvalidArgumentException('non-nullable ruoli cannot be null');
        }
        $this->container['ruoli'] = $ruoli;

        return $this;
    }

    /**
     * Gets servizio_integrazione
     *
     * @return \GovPay\Backoffice\Model\Connector|null
     */
    public function getServizioIntegrazione()
    {
        return $this->container['servizio_integrazione'];
    }

    /**
     * Sets servizio_integrazione
     *
     * @param \GovPay\Backoffice\Model\Connector|null $servizio_integrazione servizio_integrazione
     *
     * @return self
     */
    public function setServizioIntegrazione($servizio_integrazione)
    {
        if (is_null($servizio_integrazione)) {
            throw new \InvalidArgumentException('non-nullable servizio_integrazione cannot be null');
        }
        $this->container['servizio_integrazione'] = $servizio_integrazione;

        return $this;
    }

    /**
     * Gets abilitato
     *
     * @return bool
     */
    public function getAbilitato()
    {
        return $this->container['abilitato'];
    }

    /**
     * Sets abilitato
     *
     * @param bool $abilitato Indicazione se il creditore è abilitato ad operare sulla piattaforma
     *
     * @return self
     */
    public function setAbilitato($abilitato)
    {
        if (is_null($abilitato)) {
            throw new \InvalidArgumentException('non-nullable abilitato cannot be null');
        }
        $this->container['abilitato'] = $abilitato;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



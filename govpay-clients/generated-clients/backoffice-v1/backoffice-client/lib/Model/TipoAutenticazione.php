<?php
/**
 * TipoAutenticazione
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * TipoAutenticazione Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TipoAutenticazione implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tipoAutenticazione';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'username' => 'string',
        'password' => 'string',
        'tipo' => 'string',
        'ks_location' => 'string',
        'ks_password' => 'string',
        'ks_type' => '\GovPay\Backoffice\Model\KeystoreType',
        'ks_p_key_passwd' => 'string',
        'ts_location' => 'string',
        'ts_password' => 'string',
        'ts_type' => '\GovPay\Backoffice\Model\KeystoreType',
        'ssl_type' => '\GovPay\Backoffice\Model\SslConfigType',
        'header_name' => 'string',
        'header_value' => 'string',
        'api_id' => 'string',
        'api_key' => 'string',
        'client_id' => 'string',
        'client_secret' => 'string',
        'url_token_endpoint' => 'string',
        'scope' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'username' => null,
        'password' => null,
        'tipo' => null,
        'ks_location' => null,
        'ks_password' => null,
        'ks_type' => null,
        'ks_p_key_passwd' => null,
        'ts_location' => null,
        'ts_password' => null,
        'ts_type' => null,
        'ssl_type' => null,
        'header_name' => null,
        'header_value' => null,
        'api_id' => null,
        'api_key' => null,
        'client_id' => null,
        'client_secret' => null,
        'url_token_endpoint' => null,
        'scope' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'username' => false,
        'password' => false,
        'tipo' => false,
        'ks_location' => false,
        'ks_password' => false,
        'ks_type' => false,
        'ks_p_key_passwd' => false,
        'ts_location' => false,
        'ts_password' => false,
        'ts_type' => false,
        'ssl_type' => false,
        'header_name' => false,
        'header_value' => false,
        'api_id' => false,
        'api_key' => false,
        'client_id' => false,
        'client_secret' => false,
        'url_token_endpoint' => false,
        'scope' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'username',
        'password' => 'password',
        'tipo' => 'tipo',
        'ks_location' => 'ksLocation',
        'ks_password' => 'ksPassword',
        'ks_type' => 'ksType',
        'ks_p_key_passwd' => 'ksPKeyPasswd',
        'ts_location' => 'tsLocation',
        'ts_password' => 'tsPassword',
        'ts_type' => 'tsType',
        'ssl_type' => 'sslType',
        'header_name' => 'headerName',
        'header_value' => 'headerValue',
        'api_id' => 'apiId',
        'api_key' => 'apiKey',
        'client_id' => 'clientId',
        'client_secret' => 'clientSecret',
        'url_token_endpoint' => 'urlTokenEndpoint',
        'scope' => 'scope'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'setUsername',
        'password' => 'setPassword',
        'tipo' => 'setTipo',
        'ks_location' => 'setKsLocation',
        'ks_password' => 'setKsPassword',
        'ks_type' => 'setKsType',
        'ks_p_key_passwd' => 'setKsPKeyPasswd',
        'ts_location' => 'setTsLocation',
        'ts_password' => 'setTsPassword',
        'ts_type' => 'setTsType',
        'ssl_type' => 'setSslType',
        'header_name' => 'setHeaderName',
        'header_value' => 'setHeaderValue',
        'api_id' => 'setApiId',
        'api_key' => 'setApiKey',
        'client_id' => 'setClientId',
        'client_secret' => 'setClientSecret',
        'url_token_endpoint' => 'setUrlTokenEndpoint',
        'scope' => 'setScope'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'getUsername',
        'password' => 'getPassword',
        'tipo' => 'getTipo',
        'ks_location' => 'getKsLocation',
        'ks_password' => 'getKsPassword',
        'ks_type' => 'getKsType',
        'ks_p_key_passwd' => 'getKsPKeyPasswd',
        'ts_location' => 'getTsLocation',
        'ts_password' => 'getTsPassword',
        'ts_type' => 'getTsType',
        'ssl_type' => 'getSslType',
        'header_name' => 'getHeaderName',
        'header_value' => 'getHeaderValue',
        'api_id' => 'getApiId',
        'api_key' => 'getApiKey',
        'client_id' => 'getClientId',
        'client_secret' => 'getClientSecret',
        'url_token_endpoint' => 'getUrlTokenEndpoint',
        'scope' => 'getScope'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIPO_CLIENT = 'Client';
    public const TIPO_SERVER = 'Server';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoAllowableValues()
    {
        return [
            self::TIPO_CLIENT,
            self::TIPO_SERVER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('tipo', $data ?? [], null);
        $this->setIfExists('ks_location', $data ?? [], null);
        $this->setIfExists('ks_password', $data ?? [], null);
        $this->setIfExists('ks_type', $data ?? [], null);
        $this->setIfExists('ks_p_key_passwd', $data ?? [], null);
        $this->setIfExists('ts_location', $data ?? [], null);
        $this->setIfExists('ts_password', $data ?? [], null);
        $this->setIfExists('ts_type', $data ?? [], null);
        $this->setIfExists('ssl_type', $data ?? [], null);
        $this->setIfExists('header_name', $data ?? [], null);
        $this->setIfExists('header_value', $data ?? [], null);
        $this->setIfExists('api_id', $data ?? [], null);
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('client_secret', $data ?? [], null);
        $this->setIfExists('url_token_endpoint', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ($this->container['tipo'] === null) {
            $invalidProperties[] = "'tipo' can't be null";
        }
        $allowedValues = $this->getTipoAllowableValues();
        if (!is_null($this->container['tipo']) && !in_array($this->container['tipo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tipo', must be one of '%s'",
                $this->container['tipo'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ts_location'] === null) {
            $invalidProperties[] = "'ts_location' can't be null";
        }
        if ($this->container['ts_password'] === null) {
            $invalidProperties[] = "'ts_password' can't be null";
        }
        if ($this->container['ts_type'] === null) {
            $invalidProperties[] = "'ts_type' can't be null";
        }
        if ($this->container['ssl_type'] === null) {
            $invalidProperties[] = "'ssl_type' can't be null";
        }
        if ($this->container['header_name'] === null) {
            $invalidProperties[] = "'header_name' can't be null";
        }
        if ((mb_strlen($this->container['header_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'header_name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['header_value'] === null) {
            $invalidProperties[] = "'header_value' can't be null";
        }
        if ((mb_strlen($this->container['header_value']) > 255)) {
            $invalidProperties[] = "invalid value for 'header_value', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['api_id'] === null) {
            $invalidProperties[] = "'api_id' can't be null";
        }
        if ((mb_strlen($this->container['api_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'api_id', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ((mb_strlen($this->container['api_key']) > 255)) {
            $invalidProperties[] = "invalid value for 'api_key', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ((mb_strlen($this->container['client_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['client_secret'] === null) {
            $invalidProperties[] = "'client_secret' can't be null";
        }
        if ((mb_strlen($this->container['client_secret']) > 255)) {
            $invalidProperties[] = "invalid value for 'client_secret', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['url_token_endpoint'] === null) {
            $invalidProperties[] = "'url_token_endpoint' can't be null";
        }
        if ((mb_strlen($this->container['url_token_endpoint']) > 255)) {
            $invalidProperties[] = "invalid value for 'url_token_endpoint', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['scope']) && (mb_strlen($this->container['scope']) > 255)) {
            $invalidProperties[] = "invalid value for 'scope', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets tipo
     *
     * @return string
     */
    public function getTipo()
    {
        return $this->container['tipo'];
    }

    /**
     * Sets tipo
     *
     * @param string $tipo tipo
     *
     * @return self
     */
    public function setTipo($tipo)
    {
        if (is_null($tipo)) {
            throw new \InvalidArgumentException('non-nullable tipo cannot be null');
        }
        $allowedValues = $this->getTipoAllowableValues();
        if (!in_array($tipo, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tipo', must be one of '%s'",
                    $tipo,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo'] = $tipo;

        return $this;
    }

    /**
     * Gets ks_location
     *
     * @return string|null
     */
    public function getKsLocation()
    {
        return $this->container['ks_location'];
    }

    /**
     * Sets ks_location
     *
     * @param string|null $ks_location Location del keystore
     *
     * @return self
     */
    public function setKsLocation($ks_location)
    {
        if (is_null($ks_location)) {
            throw new \InvalidArgumentException('non-nullable ks_location cannot be null');
        }
        $this->container['ks_location'] = $ks_location;

        return $this;
    }

    /**
     * Gets ks_password
     *
     * @return string|null
     */
    public function getKsPassword()
    {
        return $this->container['ks_password'];
    }

    /**
     * Sets ks_password
     *
     * @param string|null $ks_password Password del keystore
     *
     * @return self
     */
    public function setKsPassword($ks_password)
    {
        if (is_null($ks_password)) {
            throw new \InvalidArgumentException('non-nullable ks_password cannot be null');
        }
        $this->container['ks_password'] = $ks_password;

        return $this;
    }

    /**
     * Gets ks_type
     *
     * @return \GovPay\Backoffice\Model\KeystoreType|null
     */
    public function getKsType()
    {
        return $this->container['ks_type'];
    }

    /**
     * Sets ks_type
     *
     * @param \GovPay\Backoffice\Model\KeystoreType|null $ks_type ks_type
     *
     * @return self
     */
    public function setKsType($ks_type)
    {
        if (is_null($ks_type)) {
            throw new \InvalidArgumentException('non-nullable ks_type cannot be null');
        }
        $this->container['ks_type'] = $ks_type;

        return $this;
    }

    /**
     * Gets ks_p_key_passwd
     *
     * @return string|null
     */
    public function getKsPKeyPasswd()
    {
        return $this->container['ks_p_key_passwd'];
    }

    /**
     * Sets ks_p_key_passwd
     *
     * @param string|null $ks_p_key_passwd Password della chiave privata del keystore
     *
     * @return self
     */
    public function setKsPKeyPasswd($ks_p_key_passwd)
    {
        if (is_null($ks_p_key_passwd)) {
            throw new \InvalidArgumentException('non-nullable ks_p_key_passwd cannot be null');
        }
        $this->container['ks_p_key_passwd'] = $ks_p_key_passwd;

        return $this;
    }

    /**
     * Gets ts_location
     *
     * @return string
     */
    public function getTsLocation()
    {
        return $this->container['ts_location'];
    }

    /**
     * Sets ts_location
     *
     * @param string $ts_location Location del truststore
     *
     * @return self
     */
    public function setTsLocation($ts_location)
    {
        if (is_null($ts_location)) {
            throw new \InvalidArgumentException('non-nullable ts_location cannot be null');
        }
        $this->container['ts_location'] = $ts_location;

        return $this;
    }

    /**
     * Gets ts_password
     *
     * @return string
     */
    public function getTsPassword()
    {
        return $this->container['ts_password'];
    }

    /**
     * Sets ts_password
     *
     * @param string $ts_password Password del truststore
     *
     * @return self
     */
    public function setTsPassword($ts_password)
    {
        if (is_null($ts_password)) {
            throw new \InvalidArgumentException('non-nullable ts_password cannot be null');
        }
        $this->container['ts_password'] = $ts_password;

        return $this;
    }

    /**
     * Gets ts_type
     *
     * @return \GovPay\Backoffice\Model\KeystoreType
     */
    public function getTsType()
    {
        return $this->container['ts_type'];
    }

    /**
     * Sets ts_type
     *
     * @param \GovPay\Backoffice\Model\KeystoreType $ts_type ts_type
     *
     * @return self
     */
    public function setTsType($ts_type)
    {
        if (is_null($ts_type)) {
            throw new \InvalidArgumentException('non-nullable ts_type cannot be null');
        }
        $this->container['ts_type'] = $ts_type;

        return $this;
    }

    /**
     * Gets ssl_type
     *
     * @return \GovPay\Backoffice\Model\SslConfigType
     */
    public function getSslType()
    {
        return $this->container['ssl_type'];
    }

    /**
     * Sets ssl_type
     *
     * @param \GovPay\Backoffice\Model\SslConfigType $ssl_type ssl_type
     *
     * @return self
     */
    public function setSslType($ssl_type)
    {
        if (is_null($ssl_type)) {
            throw new \InvalidArgumentException('non-nullable ssl_type cannot be null');
        }
        $this->container['ssl_type'] = $ssl_type;

        return $this;
    }

    /**
     * Gets header_name
     *
     * @return string
     */
    public function getHeaderName()
    {
        return $this->container['header_name'];
    }

    /**
     * Sets header_name
     *
     * @param string $header_name header_name
     *
     * @return self
     */
    public function setHeaderName($header_name)
    {
        if (is_null($header_name)) {
            throw new \InvalidArgumentException('non-nullable header_name cannot be null');
        }
        if ((mb_strlen($header_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $header_name when calling TipoAutenticazione., must be smaller than or equal to 255.');
        }

        $this->container['header_name'] = $header_name;

        return $this;
    }

    /**
     * Gets header_value
     *
     * @return string
     */
    public function getHeaderValue()
    {
        return $this->container['header_value'];
    }

    /**
     * Sets header_value
     *
     * @param string $header_value header_value
     *
     * @return self
     */
    public function setHeaderValue($header_value)
    {
        if (is_null($header_value)) {
            throw new \InvalidArgumentException('non-nullable header_value cannot be null');
        }
        if ((mb_strlen($header_value) > 255)) {
            throw new \InvalidArgumentException('invalid length for $header_value when calling TipoAutenticazione., must be smaller than or equal to 255.');
        }

        $this->container['header_value'] = $header_value;

        return $this;
    }

    /**
     * Gets api_id
     *
     * @return string
     */
    public function getApiId()
    {
        return $this->container['api_id'];
    }

    /**
     * Sets api_id
     *
     * @param string $api_id valore da inserire all'interno dell'header previsto per l'API-ID
     *
     * @return self
     */
    public function setApiId($api_id)
    {
        if (is_null($api_id)) {
            throw new \InvalidArgumentException('non-nullable api_id cannot be null');
        }
        if ((mb_strlen($api_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $api_id when calling TipoAutenticazione., must be smaller than or equal to 255.');
        }

        $this->container['api_id'] = $api_id;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key valore da inserire all'interno dell'header previsto per l'API-KEY
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        if ((mb_strlen($api_key) > 255)) {
            throw new \InvalidArgumentException('invalid length for $api_key when calling TipoAutenticazione., must be smaller than or equal to 255.');
        }

        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id Identificativo dell'applicazione da inviare all'authorization server
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        if ((mb_strlen($client_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling TipoAutenticazione., must be smaller than or equal to 255.');
        }

        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_secret
     *
     * @return string
     */
    public function getClientSecret()
    {
        return $this->container['client_secret'];
    }

    /**
     * Sets client_secret
     *
     * @param string $client_secret Password assegnata all'applicazione da inviare all'authorization server
     *
     * @return self
     */
    public function setClientSecret($client_secret)
    {
        if (is_null($client_secret)) {
            throw new \InvalidArgumentException('non-nullable client_secret cannot be null');
        }
        if ((mb_strlen($client_secret) > 255)) {
            throw new \InvalidArgumentException('invalid length for $client_secret when calling TipoAutenticazione., must be smaller than or equal to 255.');
        }

        $this->container['client_secret'] = $client_secret;

        return $this;
    }

    /**
     * Gets url_token_endpoint
     *
     * @return string
     */
    public function getUrlTokenEndpoint()
    {
        return $this->container['url_token_endpoint'];
    }

    /**
     * Sets url_token_endpoint
     *
     * @param string $url_token_endpoint URL del server dove fare la chiamata di richiesta del token
     *
     * @return self
     */
    public function setUrlTokenEndpoint($url_token_endpoint)
    {
        if (is_null($url_token_endpoint)) {
            throw new \InvalidArgumentException('non-nullable url_token_endpoint cannot be null');
        }
        if ((mb_strlen($url_token_endpoint) > 255)) {
            throw new \InvalidArgumentException('invalid length for $url_token_endpoint when calling TipoAutenticazione., must be smaller than or equal to 255.');
        }

        $this->container['url_token_endpoint'] = $url_token_endpoint;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope Livello di accesso richiesto per l'operazione da eseguire
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        if ((mb_strlen($scope) > 255)) {
            throw new \InvalidArgumentException('invalid length for $scope when calling TipoAutenticazione., must be smaller than or equal to 255.');
        }

        $this->container['scope'] = $scope;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



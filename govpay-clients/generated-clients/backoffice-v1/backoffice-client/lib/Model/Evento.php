<?php
/**
 * Evento
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * Evento Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Evento implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'evento';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'componente' => '\GovPay\Backoffice\Model\ComponenteEvento',
        'categoria_evento' => '\GovPay\Backoffice\Model\CategoriaEvento',
        'ruolo' => '\GovPay\Backoffice\Model\RuoloEvento',
        'tipo_evento' => 'string',
        'esito' => '\GovPay\Backoffice\Model\EsitoEvento',
        'data_evento' => '\DateTime',
        'durata_evento' => 'int',
        'sottotipo_evento' => 'string',
        'sottotipo_esito' => 'string',
        'dettaglio_esito' => 'string',
        'id_dominio' => 'string',
        'iuv' => 'string',
        'ccp' => 'string',
        'id_a2_a' => 'string',
        'id_pendenza' => 'string',
        'id_pagamento' => 'string',
        'dati_pago_pa' => '\GovPay\Backoffice\Model\DatiPagoPA',
        'severita' => 'int',
        'cluster_id' => 'string',
        'transaction_id' => 'string',
        'parametri_richiesta' => 'object',
        'parametri_risposta' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'componente' => null,
        'categoria_evento' => null,
        'ruolo' => null,
        'tipo_evento' => null,
        'esito' => null,
        'data_evento' => 'date-time',
        'durata_evento' => 'int64',
        'sottotipo_evento' => null,
        'sottotipo_esito' => null,
        'dettaglio_esito' => null,
        'id_dominio' => null,
        'iuv' => null,
        'ccp' => null,
        'id_a2_a' => null,
        'id_pendenza' => null,
        'id_pagamento' => null,
        'dati_pago_pa' => null,
        'severita' => 'int32',
        'cluster_id' => null,
        'transaction_id' => null,
        'parametri_richiesta' => null,
        'parametri_risposta' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'componente' => false,
        'categoria_evento' => false,
        'ruolo' => false,
        'tipo_evento' => false,
        'esito' => false,
        'data_evento' => false,
        'durata_evento' => false,
        'sottotipo_evento' => false,
        'sottotipo_esito' => false,
        'dettaglio_esito' => false,
        'id_dominio' => false,
        'iuv' => false,
        'ccp' => false,
        'id_a2_a' => false,
        'id_pendenza' => false,
        'id_pagamento' => false,
        'dati_pago_pa' => false,
        'severita' => false,
        'cluster_id' => false,
        'transaction_id' => false,
        'parametri_richiesta' => false,
        'parametri_risposta' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'componente' => 'componente',
        'categoria_evento' => 'categoriaEvento',
        'ruolo' => 'ruolo',
        'tipo_evento' => 'tipoEvento',
        'esito' => 'esito',
        'data_evento' => 'dataEvento',
        'durata_evento' => 'durataEvento',
        'sottotipo_evento' => 'sottotipoEvento',
        'sottotipo_esito' => 'sottotipoEsito',
        'dettaglio_esito' => 'dettaglioEsito',
        'id_dominio' => 'idDominio',
        'iuv' => 'iuv',
        'ccp' => 'ccp',
        'id_a2_a' => 'idA2A',
        'id_pendenza' => 'idPendenza',
        'id_pagamento' => 'idPagamento',
        'dati_pago_pa' => 'datiPagoPA',
        'severita' => 'severita',
        'cluster_id' => 'clusterId',
        'transaction_id' => 'transactionId',
        'parametri_richiesta' => 'parametriRichiesta',
        'parametri_risposta' => 'parametriRisposta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'componente' => 'setComponente',
        'categoria_evento' => 'setCategoriaEvento',
        'ruolo' => 'setRuolo',
        'tipo_evento' => 'setTipoEvento',
        'esito' => 'setEsito',
        'data_evento' => 'setDataEvento',
        'durata_evento' => 'setDurataEvento',
        'sottotipo_evento' => 'setSottotipoEvento',
        'sottotipo_esito' => 'setSottotipoEsito',
        'dettaglio_esito' => 'setDettaglioEsito',
        'id_dominio' => 'setIdDominio',
        'iuv' => 'setIuv',
        'ccp' => 'setCcp',
        'id_a2_a' => 'setIdA2A',
        'id_pendenza' => 'setIdPendenza',
        'id_pagamento' => 'setIdPagamento',
        'dati_pago_pa' => 'setDatiPagoPa',
        'severita' => 'setSeverita',
        'cluster_id' => 'setClusterId',
        'transaction_id' => 'setTransactionId',
        'parametri_richiesta' => 'setParametriRichiesta',
        'parametri_risposta' => 'setParametriRisposta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'componente' => 'getComponente',
        'categoria_evento' => 'getCategoriaEvento',
        'ruolo' => 'getRuolo',
        'tipo_evento' => 'getTipoEvento',
        'esito' => 'getEsito',
        'data_evento' => 'getDataEvento',
        'durata_evento' => 'getDurataEvento',
        'sottotipo_evento' => 'getSottotipoEvento',
        'sottotipo_esito' => 'getSottotipoEsito',
        'dettaglio_esito' => 'getDettaglioEsito',
        'id_dominio' => 'getIdDominio',
        'iuv' => 'getIuv',
        'ccp' => 'getCcp',
        'id_a2_a' => 'getIdA2A',
        'id_pendenza' => 'getIdPendenza',
        'id_pagamento' => 'getIdPagamento',
        'dati_pago_pa' => 'getDatiPagoPa',
        'severita' => 'getSeverita',
        'cluster_id' => 'getClusterId',
        'transaction_id' => 'getTransactionId',
        'parametri_richiesta' => 'getParametriRichiesta',
        'parametri_risposta' => 'getParametriRisposta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('componente', $data ?? [], null);
        $this->setIfExists('categoria_evento', $data ?? [], null);
        $this->setIfExists('ruolo', $data ?? [], null);
        $this->setIfExists('tipo_evento', $data ?? [], null);
        $this->setIfExists('esito', $data ?? [], null);
        $this->setIfExists('data_evento', $data ?? [], null);
        $this->setIfExists('durata_evento', $data ?? [], null);
        $this->setIfExists('sottotipo_evento', $data ?? [], null);
        $this->setIfExists('sottotipo_esito', $data ?? [], null);
        $this->setIfExists('dettaglio_esito', $data ?? [], null);
        $this->setIfExists('id_dominio', $data ?? [], null);
        $this->setIfExists('iuv', $data ?? [], null);
        $this->setIfExists('ccp', $data ?? [], null);
        $this->setIfExists('id_a2_a', $data ?? [], null);
        $this->setIfExists('id_pendenza', $data ?? [], null);
        $this->setIfExists('id_pagamento', $data ?? [], null);
        $this->setIfExists('dati_pago_pa', $data ?? [], null);
        $this->setIfExists('severita', $data ?? [], null);
        $this->setIfExists('cluster_id', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('parametri_richiesta', $data ?? [], null);
        $this->setIfExists('parametri_risposta', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['componente'] === null) {
            $invalidProperties[] = "'componente' can't be null";
        }
        if ($this->container['categoria_evento'] === null) {
            $invalidProperties[] = "'categoria_evento' can't be null";
        }
        if ($this->container['ruolo'] === null) {
            $invalidProperties[] = "'ruolo' can't be null";
        }
        if ($this->container['tipo_evento'] === null) {
            $invalidProperties[] = "'tipo_evento' can't be null";
        }
        if ($this->container['esito'] === null) {
            $invalidProperties[] = "'esito' can't be null";
        }
        if ($this->container['data_evento'] === null) {
            $invalidProperties[] = "'data_evento' can't be null";
        }
        if ($this->container['durata_evento'] === null) {
            $invalidProperties[] = "'durata_evento' can't be null";
        }
        if ($this->container['parametri_richiesta'] === null) {
            $invalidProperties[] = "'parametri_richiesta' can't be null";
        }
        if ($this->container['parametri_risposta'] === null) {
            $invalidProperties[] = "'parametri_risposta' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Identificativo evento
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets componente
     *
     * @return \GovPay\Backoffice\Model\ComponenteEvento
     */
    public function getComponente()
    {
        return $this->container['componente'];
    }

    /**
     * Sets componente
     *
     * @param \GovPay\Backoffice\Model\ComponenteEvento $componente componente
     *
     * @return self
     */
    public function setComponente($componente)
    {
        if (is_null($componente)) {
            throw new \InvalidArgumentException('non-nullable componente cannot be null');
        }
        $this->container['componente'] = $componente;

        return $this;
    }

    /**
     * Gets categoria_evento
     *
     * @return \GovPay\Backoffice\Model\CategoriaEvento
     */
    public function getCategoriaEvento()
    {
        return $this->container['categoria_evento'];
    }

    /**
     * Sets categoria_evento
     *
     * @param \GovPay\Backoffice\Model\CategoriaEvento $categoria_evento categoria_evento
     *
     * @return self
     */
    public function setCategoriaEvento($categoria_evento)
    {
        if (is_null($categoria_evento)) {
            throw new \InvalidArgumentException('non-nullable categoria_evento cannot be null');
        }
        $this->container['categoria_evento'] = $categoria_evento;

        return $this;
    }

    /**
     * Gets ruolo
     *
     * @return \GovPay\Backoffice\Model\RuoloEvento
     */
    public function getRuolo()
    {
        return $this->container['ruolo'];
    }

    /**
     * Sets ruolo
     *
     * @param \GovPay\Backoffice\Model\RuoloEvento $ruolo ruolo
     *
     * @return self
     */
    public function setRuolo($ruolo)
    {
        if (is_null($ruolo)) {
            throw new \InvalidArgumentException('non-nullable ruolo cannot be null');
        }
        $this->container['ruolo'] = $ruolo;

        return $this;
    }

    /**
     * Gets tipo_evento
     *
     * @return string
     */
    public function getTipoEvento()
    {
        return $this->container['tipo_evento'];
    }

    /**
     * Sets tipo_evento
     *
     * @param string $tipo_evento tipo_evento
     *
     * @return self
     */
    public function setTipoEvento($tipo_evento)
    {
        if (is_null($tipo_evento)) {
            throw new \InvalidArgumentException('non-nullable tipo_evento cannot be null');
        }
        $this->container['tipo_evento'] = $tipo_evento;

        return $this;
    }

    /**
     * Gets esito
     *
     * @return \GovPay\Backoffice\Model\EsitoEvento
     */
    public function getEsito()
    {
        return $this->container['esito'];
    }

    /**
     * Sets esito
     *
     * @param \GovPay\Backoffice\Model\EsitoEvento $esito esito
     *
     * @return self
     */
    public function setEsito($esito)
    {
        if (is_null($esito)) {
            throw new \InvalidArgumentException('non-nullable esito cannot be null');
        }
        $this->container['esito'] = $esito;

        return $this;
    }

    /**
     * Gets data_evento
     *
     * @return \DateTime
     */
    public function getDataEvento()
    {
        return $this->container['data_evento'];
    }

    /**
     * Sets data_evento
     *
     * @param \DateTime $data_evento Data emissione evento
     *
     * @return self
     */
    public function setDataEvento($data_evento)
    {
        if (is_null($data_evento)) {
            throw new \InvalidArgumentException('non-nullable data_evento cannot be null');
        }
        $this->container['data_evento'] = $data_evento;

        return $this;
    }

    /**
     * Gets durata_evento
     *
     * @return int
     */
    public function getDurataEvento()
    {
        return $this->container['durata_evento'];
    }

    /**
     * Sets durata_evento
     *
     * @param int $durata_evento Durata evento (in millisecondi)
     *
     * @return self
     */
    public function setDurataEvento($durata_evento)
    {
        if (is_null($durata_evento)) {
            throw new \InvalidArgumentException('non-nullable durata_evento cannot be null');
        }
        $this->container['durata_evento'] = $durata_evento;

        return $this;
    }

    /**
     * Gets sottotipo_evento
     *
     * @return string|null
     */
    public function getSottotipoEvento()
    {
        return $this->container['sottotipo_evento'];
    }

    /**
     * Sets sottotipo_evento
     *
     * @param string|null $sottotipo_evento sottotipo_evento
     *
     * @return self
     */
    public function setSottotipoEvento($sottotipo_evento)
    {
        if (is_null($sottotipo_evento)) {
            throw new \InvalidArgumentException('non-nullable sottotipo_evento cannot be null');
        }
        $this->container['sottotipo_evento'] = $sottotipo_evento;

        return $this;
    }

    /**
     * Gets sottotipo_esito
     *
     * @return string|null
     */
    public function getSottotipoEsito()
    {
        return $this->container['sottotipo_esito'];
    }

    /**
     * Sets sottotipo_esito
     *
     * @param string|null $sottotipo_esito Descrizione dell'esito
     *
     * @return self
     */
    public function setSottotipoEsito($sottotipo_esito)
    {
        if (is_null($sottotipo_esito)) {
            throw new \InvalidArgumentException('non-nullable sottotipo_esito cannot be null');
        }
        $this->container['sottotipo_esito'] = $sottotipo_esito;

        return $this;
    }

    /**
     * Gets dettaglio_esito
     *
     * @return string|null
     */
    public function getDettaglioEsito()
    {
        return $this->container['dettaglio_esito'];
    }

    /**
     * Sets dettaglio_esito
     *
     * @param string|null $dettaglio_esito dettaglio_esito
     *
     * @return self
     */
    public function setDettaglioEsito($dettaglio_esito)
    {
        if (is_null($dettaglio_esito)) {
            throw new \InvalidArgumentException('non-nullable dettaglio_esito cannot be null');
        }
        $this->container['dettaglio_esito'] = $dettaglio_esito;

        return $this;
    }

    /**
     * Gets id_dominio
     *
     * @return string|null
     */
    public function getIdDominio()
    {
        return $this->container['id_dominio'];
    }

    /**
     * Sets id_dominio
     *
     * @param string|null $id_dominio Identificativo ente creditore
     *
     * @return self
     */
    public function setIdDominio($id_dominio)
    {
        if (is_null($id_dominio)) {
            throw new \InvalidArgumentException('non-nullable id_dominio cannot be null');
        }
        $this->container['id_dominio'] = $id_dominio;

        return $this;
    }

    /**
     * Gets iuv
     *
     * @return string|null
     */
    public function getIuv()
    {
        return $this->container['iuv'];
    }

    /**
     * Sets iuv
     *
     * @param string|null $iuv Identificativo univoco di versamento
     *
     * @return self
     */
    public function setIuv($iuv)
    {
        if (is_null($iuv)) {
            throw new \InvalidArgumentException('non-nullable iuv cannot be null');
        }
        $this->container['iuv'] = $iuv;

        return $this;
    }

    /**
     * Gets ccp
     *
     * @return string|null
     */
    public function getCcp()
    {
        return $this->container['ccp'];
    }

    /**
     * Sets ccp
     *
     * @param string|null $ccp Codice contesto di pagamento
     *
     * @return self
     */
    public function setCcp($ccp)
    {
        if (is_null($ccp)) {
            throw new \InvalidArgumentException('non-nullable ccp cannot be null');
        }
        $this->container['ccp'] = $ccp;

        return $this;
    }

    /**
     * Gets id_a2_a
     *
     * @return string|null
     */
    public function getIdA2A()
    {
        return $this->container['id_a2_a'];
    }

    /**
     * Sets id_a2_a
     *
     * @param string|null $id_a2_a Identificativo del gestionale responsabile della pendenza
     *
     * @return self
     */
    public function setIdA2A($id_a2_a)
    {
        if (is_null($id_a2_a)) {
            throw new \InvalidArgumentException('non-nullable id_a2_a cannot be null');
        }
        $this->container['id_a2_a'] = $id_a2_a;

        return $this;
    }

    /**
     * Gets id_pendenza
     *
     * @return string|null
     */
    public function getIdPendenza()
    {
        return $this->container['id_pendenza'];
    }

    /**
     * Sets id_pendenza
     *
     * @param string|null $id_pendenza Identificativo della pendenza nel gestionale responsabile
     *
     * @return self
     */
    public function setIdPendenza($id_pendenza)
    {
        if (is_null($id_pendenza)) {
            throw new \InvalidArgumentException('non-nullable id_pendenza cannot be null');
        }
        $this->container['id_pendenza'] = $id_pendenza;

        return $this;
    }

    /**
     * Gets id_pagamento
     *
     * @return string|null
     */
    public function getIdPagamento()
    {
        return $this->container['id_pagamento'];
    }

    /**
     * Sets id_pagamento
     *
     * @param string|null $id_pagamento Identificativo del pagamento assegnato da GovPay
     *
     * @return self
     */
    public function setIdPagamento($id_pagamento)
    {
        if (is_null($id_pagamento)) {
            throw new \InvalidArgumentException('non-nullable id_pagamento cannot be null');
        }
        $this->container['id_pagamento'] = $id_pagamento;

        return $this;
    }

    /**
     * Gets dati_pago_pa
     *
     * @return \GovPay\Backoffice\Model\DatiPagoPA|null
     */
    public function getDatiPagoPa()
    {
        return $this->container['dati_pago_pa'];
    }

    /**
     * Sets dati_pago_pa
     *
     * @param \GovPay\Backoffice\Model\DatiPagoPA|null $dati_pago_pa dati_pago_pa
     *
     * @return self
     */
    public function setDatiPagoPa($dati_pago_pa)
    {
        if (is_null($dati_pago_pa)) {
            throw new \InvalidArgumentException('non-nullable dati_pago_pa cannot be null');
        }
        $this->container['dati_pago_pa'] = $dati_pago_pa;

        return $this;
    }

    /**
     * Gets severita
     *
     * @return int|null
     */
    public function getSeverita()
    {
        return $this->container['severita'];
    }

    /**
     * Sets severita
     *
     * @param int|null $severita indica il livello di severita nel caso di evento con esito KO/FAIL
     *
     * @return self
     */
    public function setSeverita($severita)
    {
        if (is_null($severita)) {
            throw new \InvalidArgumentException('non-nullable severita cannot be null');
        }
        $this->container['severita'] = $severita;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string|null
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string|null $cluster_id Identificativo del nodo dove viene registrata l'operazione
     *
     * @return self
     */
    public function setClusterId($cluster_id)
    {
        if (is_null($cluster_id)) {
            throw new \InvalidArgumentException('non-nullable cluster_id cannot be null');
        }
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id Identificativo della transazione registrata
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets parametri_richiesta
     *
     * @return object
     */
    public function getParametriRichiesta()
    {
        return $this->container['parametri_richiesta'];
    }

    /**
     * Sets parametri_richiesta
     *
     * @param object $parametri_richiesta Dettaglio del messaggio di richiesta
     *
     * @return self
     */
    public function setParametriRichiesta($parametri_richiesta)
    {
        if (is_null($parametri_richiesta)) {
            throw new \InvalidArgumentException('non-nullable parametri_richiesta cannot be null');
        }
        $this->container['parametri_richiesta'] = $parametri_richiesta;

        return $this;
    }

    /**
     * Gets parametri_risposta
     *
     * @return object
     */
    public function getParametriRisposta()
    {
        return $this->container['parametri_risposta'];
    }

    /**
     * Sets parametri_risposta
     *
     * @param object $parametri_risposta Dettaglio del messaggio di risposta
     *
     * @return self
     */
    public function setParametriRisposta($parametri_risposta)
    {
        if (is_null($parametri_risposta)) {
            throw new \InvalidArgumentException('non-nullable parametri_risposta cannot be null');
        }
        $this->container['parametri_risposta'] = $parametri_risposta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



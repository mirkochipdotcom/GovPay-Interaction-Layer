<?php
/**
 * DatiPagoPA
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * DatiPagoPA Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DatiPagoPA implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'datiPagoPA';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_psp' => 'string',
        'id_canale' => 'string',
        'id_intermediario_psp' => 'string',
        'tipo_versamento' => 'string',
        'modello_pagamento' => 'string',
        'id_dominio' => 'string',
        'id_intermediario' => 'string',
        'id_stazione' => 'string',
        'id_incasso' => 'string',
        'sct' => 'string',
        'id_flusso' => 'string',
        'id_tracciato' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_psp' => null,
        'id_canale' => null,
        'id_intermediario_psp' => null,
        'tipo_versamento' => null,
        'modello_pagamento' => null,
        'id_dominio' => null,
        'id_intermediario' => null,
        'id_stazione' => null,
        'id_incasso' => null,
        'sct' => null,
        'id_flusso' => null,
        'id_tracciato' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id_psp' => false,
        'id_canale' => false,
        'id_intermediario_psp' => false,
        'tipo_versamento' => false,
        'modello_pagamento' => false,
        'id_dominio' => false,
        'id_intermediario' => false,
        'id_stazione' => false,
        'id_incasso' => false,
        'sct' => false,
        'id_flusso' => false,
        'id_tracciato' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_psp' => 'idPsp',
        'id_canale' => 'idCanale',
        'id_intermediario_psp' => 'idIntermediarioPsp',
        'tipo_versamento' => 'tipoVersamento',
        'modello_pagamento' => 'modelloPagamento',
        'id_dominio' => 'idDominio',
        'id_intermediario' => 'idIntermediario',
        'id_stazione' => 'idStazione',
        'id_incasso' => 'idIncasso',
        'sct' => 'sct',
        'id_flusso' => 'idFlusso',
        'id_tracciato' => 'idTracciato'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_psp' => 'setIdPsp',
        'id_canale' => 'setIdCanale',
        'id_intermediario_psp' => 'setIdIntermediarioPsp',
        'tipo_versamento' => 'setTipoVersamento',
        'modello_pagamento' => 'setModelloPagamento',
        'id_dominio' => 'setIdDominio',
        'id_intermediario' => 'setIdIntermediario',
        'id_stazione' => 'setIdStazione',
        'id_incasso' => 'setIdIncasso',
        'sct' => 'setSct',
        'id_flusso' => 'setIdFlusso',
        'id_tracciato' => 'setIdTracciato'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_psp' => 'getIdPsp',
        'id_canale' => 'getIdCanale',
        'id_intermediario_psp' => 'getIdIntermediarioPsp',
        'tipo_versamento' => 'getTipoVersamento',
        'modello_pagamento' => 'getModelloPagamento',
        'id_dominio' => 'getIdDominio',
        'id_intermediario' => 'getIdIntermediario',
        'id_stazione' => 'getIdStazione',
        'id_incasso' => 'getIdIncasso',
        'sct' => 'getSct',
        'id_flusso' => 'getIdFlusso',
        'id_tracciato' => 'getIdTracciato'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id_psp', $data ?? [], null);
        $this->setIfExists('id_canale', $data ?? [], null);
        $this->setIfExists('id_intermediario_psp', $data ?? [], null);
        $this->setIfExists('tipo_versamento', $data ?? [], null);
        $this->setIfExists('modello_pagamento', $data ?? [], null);
        $this->setIfExists('id_dominio', $data ?? [], null);
        $this->setIfExists('id_intermediario', $data ?? [], null);
        $this->setIfExists('id_stazione', $data ?? [], null);
        $this->setIfExists('id_incasso', $data ?? [], null);
        $this->setIfExists('sct', $data ?? [], null);
        $this->setIfExists('id_flusso', $data ?? [], null);
        $this->setIfExists('id_tracciato', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_psp
     *
     * @return string|null
     */
    public function getIdPsp()
    {
        return $this->container['id_psp'];
    }

    /**
     * Sets id_psp
     *
     * @param string|null $id_psp Identificativo del PSP
     *
     * @return self
     */
    public function setIdPsp($id_psp)
    {
        if (is_null($id_psp)) {
            throw new \InvalidArgumentException('non-nullable id_psp cannot be null');
        }
        $this->container['id_psp'] = $id_psp;

        return $this;
    }

    /**
     * Gets id_canale
     *
     * @return string|null
     */
    public function getIdCanale()
    {
        return $this->container['id_canale'];
    }

    /**
     * Sets id_canale
     *
     * @param string|null $id_canale id_canale
     *
     * @return self
     */
    public function setIdCanale($id_canale)
    {
        if (is_null($id_canale)) {
            throw new \InvalidArgumentException('non-nullable id_canale cannot be null');
        }
        $this->container['id_canale'] = $id_canale;

        return $this;
    }

    /**
     * Gets id_intermediario_psp
     *
     * @return string|null
     */
    public function getIdIntermediarioPsp()
    {
        return $this->container['id_intermediario_psp'];
    }

    /**
     * Sets id_intermediario_psp
     *
     * @param string|null $id_intermediario_psp id_intermediario_psp
     *
     * @return self
     */
    public function setIdIntermediarioPsp($id_intermediario_psp)
    {
        if (is_null($id_intermediario_psp)) {
            throw new \InvalidArgumentException('non-nullable id_intermediario_psp cannot be null');
        }
        $this->container['id_intermediario_psp'] = $id_intermediario_psp;

        return $this;
    }

    /**
     * Gets tipo_versamento
     *
     * @return string|null
     */
    public function getTipoVersamento()
    {
        return $this->container['tipo_versamento'];
    }

    /**
     * Sets tipo_versamento
     *
     * @param string|null $tipo_versamento Tipologia di versamento realizzato
     *
     * @return self
     */
    public function setTipoVersamento($tipo_versamento)
    {
        if (is_null($tipo_versamento)) {
            throw new \InvalidArgumentException('non-nullable tipo_versamento cannot be null');
        }
        $this->container['tipo_versamento'] = $tipo_versamento;

        return $this;
    }

    /**
     * Gets modello_pagamento
     *
     * @return string|null
     */
    public function getModelloPagamento()
    {
        return $this->container['modello_pagamento'];
    }

    /**
     * Sets modello_pagamento
     *
     * @param string|null $modello_pagamento Modello di pagamento utilizzato
     *
     * @return self
     */
    public function setModelloPagamento($modello_pagamento)
    {
        if (is_null($modello_pagamento)) {
            throw new \InvalidArgumentException('non-nullable modello_pagamento cannot be null');
        }
        $this->container['modello_pagamento'] = $modello_pagamento;

        return $this;
    }

    /**
     * Gets id_dominio
     *
     * @return string|null
     */
    public function getIdDominio()
    {
        return $this->container['id_dominio'];
    }

    /**
     * Sets id_dominio
     *
     * @param string|null $id_dominio id_dominio
     *
     * @return self
     */
    public function setIdDominio($id_dominio)
    {
        if (is_null($id_dominio)) {
            throw new \InvalidArgumentException('non-nullable id_dominio cannot be null');
        }
        $this->container['id_dominio'] = $id_dominio;

        return $this;
    }

    /**
     * Gets id_intermediario
     *
     * @return string|null
     */
    public function getIdIntermediario()
    {
        return $this->container['id_intermediario'];
    }

    /**
     * Sets id_intermediario
     *
     * @param string|null $id_intermediario id_intermediario
     *
     * @return self
     */
    public function setIdIntermediario($id_intermediario)
    {
        if (is_null($id_intermediario)) {
            throw new \InvalidArgumentException('non-nullable id_intermediario cannot be null');
        }
        $this->container['id_intermediario'] = $id_intermediario;

        return $this;
    }

    /**
     * Gets id_stazione
     *
     * @return string|null
     */
    public function getIdStazione()
    {
        return $this->container['id_stazione'];
    }

    /**
     * Sets id_stazione
     *
     * @param string|null $id_stazione id_stazione
     *
     * @return self
     */
    public function setIdStazione($id_stazione)
    {
        if (is_null($id_stazione)) {
            throw new \InvalidArgumentException('non-nullable id_stazione cannot be null');
        }
        $this->container['id_stazione'] = $id_stazione;

        return $this;
    }

    /**
     * Gets id_incasso
     *
     * @return string|null
     */
    public function getIdIncasso()
    {
        return $this->container['id_incasso'];
    }

    /**
     * Sets id_incasso
     *
     * @param string|null $id_incasso Identificativo dell'incasso
     *
     * @return self
     */
    public function setIdIncasso($id_incasso)
    {
        if (is_null($id_incasso)) {
            throw new \InvalidArgumentException('non-nullable id_incasso cannot be null');
        }
        $this->container['id_incasso'] = $id_incasso;

        return $this;
    }

    /**
     * Gets sct
     *
     * @return string|null
     */
    public function getSct()
    {
        return $this->container['sct'];
    }

    /**
     * Sets sct
     *
     * @param string|null $sct Identificativo Sepa Credit Transfer
     *
     * @return self
     */
    public function setSct($sct)
    {
        if (is_null($sct)) {
            throw new \InvalidArgumentException('non-nullable sct cannot be null');
        }
        $this->container['sct'] = $sct;

        return $this;
    }

    /**
     * Gets id_flusso
     *
     * @return string|null
     */
    public function getIdFlusso()
    {
        return $this->container['id_flusso'];
    }

    /**
     * Sets id_flusso
     *
     * @param string|null $id_flusso identificativo del flusso di rendicontazione
     *
     * @return self
     */
    public function setIdFlusso($id_flusso)
    {
        if (is_null($id_flusso)) {
            throw new \InvalidArgumentException('non-nullable id_flusso cannot be null');
        }
        $this->container['id_flusso'] = $id_flusso;

        return $this;
    }

    /**
     * Gets id_tracciato
     *
     * @return int|null
     */
    public function getIdTracciato()
    {
        return $this->container['id_tracciato'];
    }

    /**
     * Sets id_tracciato
     *
     * @param int|null $id_tracciato Identificativo numerico del tracciato
     *
     * @return self
     */
    public function setIdTracciato($id_tracciato)
    {
        if (is_null($id_tracciato)) {
            throw new \InvalidArgumentException('non-nullable id_tracciato cannot be null');
        }
        $this->container['id_tracciato'] = $id_tracciato;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



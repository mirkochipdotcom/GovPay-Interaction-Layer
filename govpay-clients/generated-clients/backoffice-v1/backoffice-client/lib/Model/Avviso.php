<?php
/**
 * Avviso
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * Avviso Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Avviso implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'avviso';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'stato' => 'string',
        'importo' => 'float',
        'id_dominio' => 'string',
        'numero_avviso' => 'string',
        'data_validita' => '\DateTime',
        'data_scadenza' => '\DateTime',
        'descrizione' => 'string',
        'tassonomia_avviso' => 'string',
        'qrcode' => 'string',
        'barcode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'stato' => null,
        'importo' => 'double',
        'id_dominio' => null,
        'numero_avviso' => null,
        'data_validita' => 'date',
        'data_scadenza' => 'date',
        'descrizione' => null,
        'tassonomia_avviso' => null,
        'qrcode' => null,
        'barcode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'stato' => false,
        'importo' => false,
        'id_dominio' => false,
        'numero_avviso' => false,
        'data_validita' => false,
        'data_scadenza' => false,
        'descrizione' => false,
        'tassonomia_avviso' => false,
        'qrcode' => false,
        'barcode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stato' => 'stato',
        'importo' => 'importo',
        'id_dominio' => 'idDominio',
        'numero_avviso' => 'numeroAvviso',
        'data_validita' => 'dataValidita',
        'data_scadenza' => 'dataScadenza',
        'descrizione' => 'descrizione',
        'tassonomia_avviso' => 'tassonomiaAvviso',
        'qrcode' => 'qrcode',
        'barcode' => 'barcode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stato' => 'setStato',
        'importo' => 'setImporto',
        'id_dominio' => 'setIdDominio',
        'numero_avviso' => 'setNumeroAvviso',
        'data_validita' => 'setDataValidita',
        'data_scadenza' => 'setDataScadenza',
        'descrizione' => 'setDescrizione',
        'tassonomia_avviso' => 'setTassonomiaAvviso',
        'qrcode' => 'setQrcode',
        'barcode' => 'setBarcode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stato' => 'getStato',
        'importo' => 'getImporto',
        'id_dominio' => 'getIdDominio',
        'numero_avviso' => 'getNumeroAvviso',
        'data_validita' => 'getDataValidita',
        'data_scadenza' => 'getDataScadenza',
        'descrizione' => 'getDescrizione',
        'tassonomia_avviso' => 'getTassonomiaAvviso',
        'qrcode' => 'getQrcode',
        'barcode' => 'getBarcode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATO_PAGATO = 'Pagato';
    public const STATO_NON_PAGATO = 'Non pagato';
    public const STATO_SCADUTO = 'Scaduto';
    public const STATO_ANNULLATO = 'Annullato';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatoAllowableValues()
    {
        return [
            self::STATO_PAGATO,
            self::STATO_NON_PAGATO,
            self::STATO_SCADUTO,
            self::STATO_ANNULLATO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('stato', $data ?? [], null);
        $this->setIfExists('importo', $data ?? [], null);
        $this->setIfExists('id_dominio', $data ?? [], null);
        $this->setIfExists('numero_avviso', $data ?? [], null);
        $this->setIfExists('data_validita', $data ?? [], null);
        $this->setIfExists('data_scadenza', $data ?? [], null);
        $this->setIfExists('descrizione', $data ?? [], null);
        $this->setIfExists('tassonomia_avviso', $data ?? [], null);
        $this->setIfExists('qrcode', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['stato'] === null) {
            $invalidProperties[] = "'stato' can't be null";
        }
        $allowedValues = $this->getStatoAllowableValues();
        if (!is_null($this->container['stato']) && !in_array($this->container['stato'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stato', must be one of '%s'",
                $this->container['stato'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stato
     *
     * @return string
     */
    public function getStato()
    {
        return $this->container['stato'];
    }

    /**
     * Sets stato
     *
     * @param string $stato Stato dell'avviso
     *
     * @return self
     */
    public function setStato($stato)
    {
        if (is_null($stato)) {
            throw new \InvalidArgumentException('non-nullable stato cannot be null');
        }
        $allowedValues = $this->getStatoAllowableValues();
        if (!in_array($stato, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stato', must be one of '%s'",
                    $stato,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stato'] = $stato;

        return $this;
    }

    /**
     * Gets importo
     *
     * @return float|null
     */
    public function getImporto()
    {
        return $this->container['importo'];
    }

    /**
     * Sets importo
     *
     * @param float|null $importo Importo della pendenza. Deve corrispondere alla somma delle singole voci.
     *
     * @return self
     */
    public function setImporto($importo)
    {
        if (is_null($importo)) {
            throw new \InvalidArgumentException('non-nullable importo cannot be null');
        }
        $this->container['importo'] = $importo;

        return $this;
    }

    /**
     * Gets id_dominio
     *
     * @return string|null
     */
    public function getIdDominio()
    {
        return $this->container['id_dominio'];
    }

    /**
     * Sets id_dominio
     *
     * @param string|null $id_dominio Identificativo del creditore dell'avviso
     *
     * @return self
     */
    public function setIdDominio($id_dominio)
    {
        if (is_null($id_dominio)) {
            throw new \InvalidArgumentException('non-nullable id_dominio cannot be null');
        }
        $this->container['id_dominio'] = $id_dominio;

        return $this;
    }

    /**
     * Gets numero_avviso
     *
     * @return string|null
     */
    public function getNumeroAvviso()
    {
        return $this->container['numero_avviso'];
    }

    /**
     * Sets numero_avviso
     *
     * @param string|null $numero_avviso Identificativo univoco versamento, assegnato se pagabile da psp
     *
     * @return self
     */
    public function setNumeroAvviso($numero_avviso)
    {
        if (is_null($numero_avviso)) {
            throw new \InvalidArgumentException('non-nullable numero_avviso cannot be null');
        }
        $this->container['numero_avviso'] = $numero_avviso;

        return $this;
    }

    /**
     * Gets data_validita
     *
     * @return \DateTime|null
     */
    public function getDataValidita()
    {
        return $this->container['data_validita'];
    }

    /**
     * Sets data_validita
     *
     * @param \DateTime|null $data_validita Data di validita dei dati della pendenza, decorsa la quale la pendenza può subire variazioni.
     *
     * @return self
     */
    public function setDataValidita($data_validita)
    {
        if (is_null($data_validita)) {
            throw new \InvalidArgumentException('non-nullable data_validita cannot be null');
        }
        $this->container['data_validita'] = $data_validita;

        return $this;
    }

    /**
     * Gets data_scadenza
     *
     * @return \DateTime|null
     */
    public function getDataScadenza()
    {
        return $this->container['data_scadenza'];
    }

    /**
     * Sets data_scadenza
     *
     * @param \DateTime|null $data_scadenza Data di scadenza della pendenza, decorsa la quale non è più pagabile.
     *
     * @return self
     */
    public function setDataScadenza($data_scadenza)
    {
        if (is_null($data_scadenza)) {
            throw new \InvalidArgumentException('non-nullable data_scadenza cannot be null');
        }
        $this->container['data_scadenza'] = $data_scadenza;

        return $this;
    }

    /**
     * Gets descrizione
     *
     * @return string|null
     */
    public function getDescrizione()
    {
        return $this->container['descrizione'];
    }

    /**
     * Sets descrizione
     *
     * @param string|null $descrizione Descrizione da inserire nell'avviso di pagamento
     *
     * @return self
     */
    public function setDescrizione($descrizione)
    {
        if (is_null($descrizione)) {
            throw new \InvalidArgumentException('non-nullable descrizione cannot be null');
        }
        $this->container['descrizione'] = $descrizione;

        return $this;
    }

    /**
     * Gets tassonomia_avviso
     *
     * @return string|null
     */
    public function getTassonomiaAvviso()
    {
        return $this->container['tassonomia_avviso'];
    }

    /**
     * Sets tassonomia_avviso
     *
     * @param string|null $tassonomia_avviso Macro categoria della pendenza secondo la classificazione AgID
     *
     * @return self
     */
    public function setTassonomiaAvviso($tassonomia_avviso)
    {
        if (is_null($tassonomia_avviso)) {
            throw new \InvalidArgumentException('non-nullable tassonomia_avviso cannot be null');
        }
        $this->container['tassonomia_avviso'] = $tassonomia_avviso;

        return $this;
    }

    /**
     * Gets qrcode
     *
     * @return string|null
     */
    public function getQrcode()
    {
        return $this->container['qrcode'];
    }

    /**
     * Sets qrcode
     *
     * @param string|null $qrcode Testo da codificare nel qr-code dell'avviso
     *
     * @return self
     */
    public function setQrcode($qrcode)
    {
        if (is_null($qrcode)) {
            throw new \InvalidArgumentException('non-nullable qrcode cannot be null');
        }
        $this->container['qrcode'] = $qrcode;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode Testo da codificare nel bar-code dell'avviso
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



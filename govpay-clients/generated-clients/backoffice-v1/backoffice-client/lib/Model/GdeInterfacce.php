<?php
/**
 * GdeInterfacce
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * GdeInterfacce Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GdeInterfacce implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'gdeInterfacce';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_ente' => '\GovPay\Backoffice\Model\GdeInterfaccia',
        'api_pagamento' => '\GovPay\Backoffice\Model\GdeInterfaccia',
        'api_ragioneria' => '\GovPay\Backoffice\Model\GdeInterfaccia',
        'api_backoffice' => '\GovPay\Backoffice\Model\GdeInterfaccia',
        'api_pago_pa' => '\GovPay\Backoffice\Model\GdeInterfaccia',
        'api_pendenze' => '\GovPay\Backoffice\Model\GdeInterfaccia',
        'api_backend_io' => '\GovPay\Backoffice\Model\GdeInterfaccia',
        'api_maggioli_jppa' => '\GovPay\Backoffice\Model\GdeInterfaccia'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_ente' => null,
        'api_pagamento' => null,
        'api_ragioneria' => null,
        'api_backoffice' => null,
        'api_pago_pa' => null,
        'api_pendenze' => null,
        'api_backend_io' => null,
        'api_maggioli_jppa' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_ente' => false,
        'api_pagamento' => false,
        'api_ragioneria' => false,
        'api_backoffice' => false,
        'api_pago_pa' => false,
        'api_pendenze' => false,
        'api_backend_io' => false,
        'api_maggioli_jppa' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_ente' => 'apiEnte',
        'api_pagamento' => 'apiPagamento',
        'api_ragioneria' => 'apiRagioneria',
        'api_backoffice' => 'apiBackoffice',
        'api_pago_pa' => 'apiPagoPA',
        'api_pendenze' => 'apiPendenze',
        'api_backend_io' => 'apiBackendIO',
        'api_maggioli_jppa' => 'apiMaggioliJPPA'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_ente' => 'setApiEnte',
        'api_pagamento' => 'setApiPagamento',
        'api_ragioneria' => 'setApiRagioneria',
        'api_backoffice' => 'setApiBackoffice',
        'api_pago_pa' => 'setApiPagoPa',
        'api_pendenze' => 'setApiPendenze',
        'api_backend_io' => 'setApiBackendIo',
        'api_maggioli_jppa' => 'setApiMaggioliJppa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_ente' => 'getApiEnte',
        'api_pagamento' => 'getApiPagamento',
        'api_ragioneria' => 'getApiRagioneria',
        'api_backoffice' => 'getApiBackoffice',
        'api_pago_pa' => 'getApiPagoPa',
        'api_pendenze' => 'getApiPendenze',
        'api_backend_io' => 'getApiBackendIo',
        'api_maggioli_jppa' => 'getApiMaggioliJppa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('api_ente', $data ?? [], null);
        $this->setIfExists('api_pagamento', $data ?? [], null);
        $this->setIfExists('api_ragioneria', $data ?? [], null);
        $this->setIfExists('api_backoffice', $data ?? [], null);
        $this->setIfExists('api_pago_pa', $data ?? [], null);
        $this->setIfExists('api_pendenze', $data ?? [], null);
        $this->setIfExists('api_backend_io', $data ?? [], null);
        $this->setIfExists('api_maggioli_jppa', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['api_ente'] === null) {
            $invalidProperties[] = "'api_ente' can't be null";
        }
        if ($this->container['api_pagamento'] === null) {
            $invalidProperties[] = "'api_pagamento' can't be null";
        }
        if ($this->container['api_ragioneria'] === null) {
            $invalidProperties[] = "'api_ragioneria' can't be null";
        }
        if ($this->container['api_backoffice'] === null) {
            $invalidProperties[] = "'api_backoffice' can't be null";
        }
        if ($this->container['api_pago_pa'] === null) {
            $invalidProperties[] = "'api_pago_pa' can't be null";
        }
        if ($this->container['api_pendenze'] === null) {
            $invalidProperties[] = "'api_pendenze' can't be null";
        }
        if ($this->container['api_backend_io'] === null) {
            $invalidProperties[] = "'api_backend_io' can't be null";
        }
        if ($this->container['api_maggioli_jppa'] === null) {
            $invalidProperties[] = "'api_maggioli_jppa' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_ente
     *
     * @return \GovPay\Backoffice\Model\GdeInterfaccia
     */
    public function getApiEnte()
    {
        return $this->container['api_ente'];
    }

    /**
     * Sets api_ente
     *
     * @param \GovPay\Backoffice\Model\GdeInterfaccia $api_ente api_ente
     *
     * @return self
     */
    public function setApiEnte($api_ente)
    {
        if (is_null($api_ente)) {
            throw new \InvalidArgumentException('non-nullable api_ente cannot be null');
        }
        $this->container['api_ente'] = $api_ente;

        return $this;
    }

    /**
     * Gets api_pagamento
     *
     * @return \GovPay\Backoffice\Model\GdeInterfaccia
     */
    public function getApiPagamento()
    {
        return $this->container['api_pagamento'];
    }

    /**
     * Sets api_pagamento
     *
     * @param \GovPay\Backoffice\Model\GdeInterfaccia $api_pagamento api_pagamento
     *
     * @return self
     */
    public function setApiPagamento($api_pagamento)
    {
        if (is_null($api_pagamento)) {
            throw new \InvalidArgumentException('non-nullable api_pagamento cannot be null');
        }
        $this->container['api_pagamento'] = $api_pagamento;

        return $this;
    }

    /**
     * Gets api_ragioneria
     *
     * @return \GovPay\Backoffice\Model\GdeInterfaccia
     */
    public function getApiRagioneria()
    {
        return $this->container['api_ragioneria'];
    }

    /**
     * Sets api_ragioneria
     *
     * @param \GovPay\Backoffice\Model\GdeInterfaccia $api_ragioneria api_ragioneria
     *
     * @return self
     */
    public function setApiRagioneria($api_ragioneria)
    {
        if (is_null($api_ragioneria)) {
            throw new \InvalidArgumentException('non-nullable api_ragioneria cannot be null');
        }
        $this->container['api_ragioneria'] = $api_ragioneria;

        return $this;
    }

    /**
     * Gets api_backoffice
     *
     * @return \GovPay\Backoffice\Model\GdeInterfaccia
     */
    public function getApiBackoffice()
    {
        return $this->container['api_backoffice'];
    }

    /**
     * Sets api_backoffice
     *
     * @param \GovPay\Backoffice\Model\GdeInterfaccia $api_backoffice api_backoffice
     *
     * @return self
     */
    public function setApiBackoffice($api_backoffice)
    {
        if (is_null($api_backoffice)) {
            throw new \InvalidArgumentException('non-nullable api_backoffice cannot be null');
        }
        $this->container['api_backoffice'] = $api_backoffice;

        return $this;
    }

    /**
     * Gets api_pago_pa
     *
     * @return \GovPay\Backoffice\Model\GdeInterfaccia
     */
    public function getApiPagoPa()
    {
        return $this->container['api_pago_pa'];
    }

    /**
     * Sets api_pago_pa
     *
     * @param \GovPay\Backoffice\Model\GdeInterfaccia $api_pago_pa api_pago_pa
     *
     * @return self
     */
    public function setApiPagoPa($api_pago_pa)
    {
        if (is_null($api_pago_pa)) {
            throw new \InvalidArgumentException('non-nullable api_pago_pa cannot be null');
        }
        $this->container['api_pago_pa'] = $api_pago_pa;

        return $this;
    }

    /**
     * Gets api_pendenze
     *
     * @return \GovPay\Backoffice\Model\GdeInterfaccia
     */
    public function getApiPendenze()
    {
        return $this->container['api_pendenze'];
    }

    /**
     * Sets api_pendenze
     *
     * @param \GovPay\Backoffice\Model\GdeInterfaccia $api_pendenze api_pendenze
     *
     * @return self
     */
    public function setApiPendenze($api_pendenze)
    {
        if (is_null($api_pendenze)) {
            throw new \InvalidArgumentException('non-nullable api_pendenze cannot be null');
        }
        $this->container['api_pendenze'] = $api_pendenze;

        return $this;
    }

    /**
     * Gets api_backend_io
     *
     * @return \GovPay\Backoffice\Model\GdeInterfaccia
     */
    public function getApiBackendIo()
    {
        return $this->container['api_backend_io'];
    }

    /**
     * Sets api_backend_io
     *
     * @param \GovPay\Backoffice\Model\GdeInterfaccia $api_backend_io api_backend_io
     *
     * @return self
     */
    public function setApiBackendIo($api_backend_io)
    {
        if (is_null($api_backend_io)) {
            throw new \InvalidArgumentException('non-nullable api_backend_io cannot be null');
        }
        $this->container['api_backend_io'] = $api_backend_io;

        return $this;
    }

    /**
     * Gets api_maggioli_jppa
     *
     * @return \GovPay\Backoffice\Model\GdeInterfaccia
     */
    public function getApiMaggioliJppa()
    {
        return $this->container['api_maggioli_jppa'];
    }

    /**
     * Sets api_maggioli_jppa
     *
     * @param \GovPay\Backoffice\Model\GdeInterfaccia $api_maggioli_jppa api_maggioli_jppa
     *
     * @return self
     */
    public function setApiMaggioliJppa($api_maggioli_jppa)
    {
        if (is_null($api_maggioli_jppa)) {
            throw new \InvalidArgumentException('non-nullable api_maggioli_jppa cannot be null');
        }
        $this->container['api_maggioli_jppa'] = $api_maggioli_jppa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



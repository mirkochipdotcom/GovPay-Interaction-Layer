<?php
/**
 * PagamentoIndex
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Model;

use \ArrayAccess;
use \GovPay\Backoffice\ObjectSerializer;

/**
 * PagamentoIndex Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PagamentoIndex implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'pagamentoIndex';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'nome' => 'string',
        'data_richiesta_pagamento' => '\DateTime',
        'id_sessione_portale' => 'string',
        'id_sessione_psp' => 'string',
        'importo' => 'float',
        'stato' => '\GovPay\Backoffice\Model\StatoPagamento',
        'descrizione_stato' => 'string',
        'modello' => '\GovPay\Backoffice\Model\ModelloPagamento',
        'psp_redirect_url' => 'string',
        'url_ritorno' => 'string',
        'conto_addebito' => '\GovPay\Backoffice\Model\ContoAddebito',
        'data_esecuzione_pagamento' => '\DateTime',
        'credenziali_pagatore' => 'string',
        'soggetto_versante' => '\GovPay\Backoffice\Model\Soggetto',
        'autenticazione_soggetto' => 'string',
        'lingua' => 'string',
        'rpp' => 'string',
        'verificato' => 'bool',
        'severita' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'nome' => null,
        'data_richiesta_pagamento' => 'date-time',
        'id_sessione_portale' => null,
        'id_sessione_psp' => null,
        'importo' => 'double',
        'stato' => null,
        'descrizione_stato' => null,
        'modello' => null,
        'psp_redirect_url' => null,
        'url_ritorno' => null,
        'conto_addebito' => null,
        'data_esecuzione_pagamento' => 'date',
        'credenziali_pagatore' => null,
        'soggetto_versante' => null,
        'autenticazione_soggetto' => null,
        'lingua' => null,
        'rpp' => null,
        'verificato' => null,
        'severita' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'nome' => false,
        'data_richiesta_pagamento' => false,
        'id_sessione_portale' => false,
        'id_sessione_psp' => false,
        'importo' => false,
        'stato' => false,
        'descrizione_stato' => false,
        'modello' => false,
        'psp_redirect_url' => false,
        'url_ritorno' => false,
        'conto_addebito' => false,
        'data_esecuzione_pagamento' => false,
        'credenziali_pagatore' => false,
        'soggetto_versante' => false,
        'autenticazione_soggetto' => false,
        'lingua' => false,
        'rpp' => false,
        'verificato' => false,
        'severita' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'nome' => 'nome',
        'data_richiesta_pagamento' => 'dataRichiestaPagamento',
        'id_sessione_portale' => 'idSessionePortale',
        'id_sessione_psp' => 'idSessionePsp',
        'importo' => 'importo',
        'stato' => 'stato',
        'descrizione_stato' => 'descrizioneStato',
        'modello' => 'modello',
        'psp_redirect_url' => 'pspRedirectUrl',
        'url_ritorno' => 'urlRitorno',
        'conto_addebito' => 'contoAddebito',
        'data_esecuzione_pagamento' => 'dataEsecuzionePagamento',
        'credenziali_pagatore' => 'credenzialiPagatore',
        'soggetto_versante' => 'soggettoVersante',
        'autenticazione_soggetto' => 'autenticazioneSoggetto',
        'lingua' => 'lingua',
        'rpp' => 'rpp',
        'verificato' => 'verificato',
        'severita' => 'severita'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'nome' => 'setNome',
        'data_richiesta_pagamento' => 'setDataRichiestaPagamento',
        'id_sessione_portale' => 'setIdSessionePortale',
        'id_sessione_psp' => 'setIdSessionePsp',
        'importo' => 'setImporto',
        'stato' => 'setStato',
        'descrizione_stato' => 'setDescrizioneStato',
        'modello' => 'setModello',
        'psp_redirect_url' => 'setPspRedirectUrl',
        'url_ritorno' => 'setUrlRitorno',
        'conto_addebito' => 'setContoAddebito',
        'data_esecuzione_pagamento' => 'setDataEsecuzionePagamento',
        'credenziali_pagatore' => 'setCredenzialiPagatore',
        'soggetto_versante' => 'setSoggettoVersante',
        'autenticazione_soggetto' => 'setAutenticazioneSoggetto',
        'lingua' => 'setLingua',
        'rpp' => 'setRpp',
        'verificato' => 'setVerificato',
        'severita' => 'setSeverita'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'nome' => 'getNome',
        'data_richiesta_pagamento' => 'getDataRichiestaPagamento',
        'id_sessione_portale' => 'getIdSessionePortale',
        'id_sessione_psp' => 'getIdSessionePsp',
        'importo' => 'getImporto',
        'stato' => 'getStato',
        'descrizione_stato' => 'getDescrizioneStato',
        'modello' => 'getModello',
        'psp_redirect_url' => 'getPspRedirectUrl',
        'url_ritorno' => 'getUrlRitorno',
        'conto_addebito' => 'getContoAddebito',
        'data_esecuzione_pagamento' => 'getDataEsecuzionePagamento',
        'credenziali_pagatore' => 'getCredenzialiPagatore',
        'soggetto_versante' => 'getSoggettoVersante',
        'autenticazione_soggetto' => 'getAutenticazioneSoggetto',
        'lingua' => 'getLingua',
        'rpp' => 'getRpp',
        'verificato' => 'getVerificato',
        'severita' => 'getSeverita'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AUTENTICAZIONE_SOGGETTO_CNS = 'CNS';
    public const AUTENTICAZIONE_SOGGETTO_USR = 'USR';
    public const AUTENTICAZIONE_SOGGETTO_OTH = 'OTH';
    public const AUTENTICAZIONE_SOGGETTO_N_A = 'N/A';
    public const LINGUA_IT = 'IT';
    public const LINGUA_EN = 'EN';
    public const LINGUA_FR = 'FR';
    public const LINGUA_DE = 'DE';
    public const LINGUA_SL = 'SL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutenticazioneSoggettoAllowableValues()
    {
        return [
            self::AUTENTICAZIONE_SOGGETTO_CNS,
            self::AUTENTICAZIONE_SOGGETTO_USR,
            self::AUTENTICAZIONE_SOGGETTO_OTH,
            self::AUTENTICAZIONE_SOGGETTO_N_A,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinguaAllowableValues()
    {
        return [
            self::LINGUA_IT,
            self::LINGUA_EN,
            self::LINGUA_FR,
            self::LINGUA_DE,
            self::LINGUA_SL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('nome', $data ?? [], null);
        $this->setIfExists('data_richiesta_pagamento', $data ?? [], null);
        $this->setIfExists('id_sessione_portale', $data ?? [], null);
        $this->setIfExists('id_sessione_psp', $data ?? [], null);
        $this->setIfExists('importo', $data ?? [], null);
        $this->setIfExists('stato', $data ?? [], null);
        $this->setIfExists('descrizione_stato', $data ?? [], null);
        $this->setIfExists('modello', $data ?? [], null);
        $this->setIfExists('psp_redirect_url', $data ?? [], null);
        $this->setIfExists('url_ritorno', $data ?? [], null);
        $this->setIfExists('conto_addebito', $data ?? [], null);
        $this->setIfExists('data_esecuzione_pagamento', $data ?? [], null);
        $this->setIfExists('credenziali_pagatore', $data ?? [], null);
        $this->setIfExists('soggetto_versante', $data ?? [], null);
        $this->setIfExists('autenticazione_soggetto', $data ?? [], null);
        $this->setIfExists('lingua', $data ?? [], 'IT');
        $this->setIfExists('rpp', $data ?? [], null);
        $this->setIfExists('verificato', $data ?? [], null);
        $this->setIfExists('severita', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['stato'] === null) {
            $invalidProperties[] = "'stato' can't be null";
        }
        $allowedValues = $this->getAutenticazioneSoggettoAllowableValues();
        if (!is_null($this->container['autenticazione_soggetto']) && !in_array($this->container['autenticazione_soggetto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'autenticazione_soggetto', must be one of '%s'",
                $this->container['autenticazione_soggetto'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLinguaAllowableValues();
        if (!is_null($this->container['lingua']) && !in_array($this->container['lingua'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lingua', must be one of '%s'",
                $this->container['lingua'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Identificativo del pagamento assegnato da GovPay
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets nome
     *
     * @return string|null
     */
    public function getNome()
    {
        return $this->container['nome'];
    }

    /**
     * Sets nome
     *
     * @param string|null $nome Identificativo del pagamento assegnato da GovPay
     *
     * @return self
     */
    public function setNome($nome)
    {
        if (is_null($nome)) {
            throw new \InvalidArgumentException('non-nullable nome cannot be null');
        }
        $this->container['nome'] = $nome;

        return $this;
    }

    /**
     * Gets data_richiesta_pagamento
     *
     * @return \DateTime|null
     */
    public function getDataRichiestaPagamento()
    {
        return $this->container['data_richiesta_pagamento'];
    }

    /**
     * Sets data_richiesta_pagamento
     *
     * @param \DateTime|null $data_richiesta_pagamento Data di richiesta del pagamento
     *
     * @return self
     */
    public function setDataRichiestaPagamento($data_richiesta_pagamento)
    {
        if (is_null($data_richiesta_pagamento)) {
            throw new \InvalidArgumentException('non-nullable data_richiesta_pagamento cannot be null');
        }
        $this->container['data_richiesta_pagamento'] = $data_richiesta_pagamento;

        return $this;
    }

    /**
     * Gets id_sessione_portale
     *
     * @return string|null
     */
    public function getIdSessionePortale()
    {
        return $this->container['id_sessione_portale'];
    }

    /**
     * Sets id_sessione_portale
     *
     * @param string|null $id_sessione_portale Identificativo del pagamento assegnato dal portale chiamante
     *
     * @return self
     */
    public function setIdSessionePortale($id_sessione_portale)
    {
        if (is_null($id_sessione_portale)) {
            throw new \InvalidArgumentException('non-nullable id_sessione_portale cannot be null');
        }
        $this->container['id_sessione_portale'] = $id_sessione_portale;

        return $this;
    }

    /**
     * Gets id_sessione_psp
     *
     * @return string|null
     */
    public function getIdSessionePsp()
    {
        return $this->container['id_sessione_psp'];
    }

    /**
     * Sets id_sessione_psp
     *
     * @param string|null $id_sessione_psp Identificativo del pagamento assegnato dal psp utilizzato
     *
     * @return self
     */
    public function setIdSessionePsp($id_sessione_psp)
    {
        if (is_null($id_sessione_psp)) {
            throw new \InvalidArgumentException('non-nullable id_sessione_psp cannot be null');
        }
        $this->container['id_sessione_psp'] = $id_sessione_psp;

        return $this;
    }

    /**
     * Gets importo
     *
     * @return float|null
     */
    public function getImporto()
    {
        return $this->container['importo'];
    }

    /**
     * Sets importo
     *
     * @param float|null $importo Importo del pagamento. Corrisponde alla somma degli importi delle pendenze al momento della richiesta
     *
     * @return self
     */
    public function setImporto($importo)
    {
        if (is_null($importo)) {
            throw new \InvalidArgumentException('non-nullable importo cannot be null');
        }
        $this->container['importo'] = $importo;

        return $this;
    }

    /**
     * Gets stato
     *
     * @return \GovPay\Backoffice\Model\StatoPagamento
     */
    public function getStato()
    {
        return $this->container['stato'];
    }

    /**
     * Sets stato
     *
     * @param \GovPay\Backoffice\Model\StatoPagamento $stato stato
     *
     * @return self
     */
    public function setStato($stato)
    {
        if (is_null($stato)) {
            throw new \InvalidArgumentException('non-nullable stato cannot be null');
        }
        $this->container['stato'] = $stato;

        return $this;
    }

    /**
     * Gets descrizione_stato
     *
     * @return string|null
     */
    public function getDescrizioneStato()
    {
        return $this->container['descrizione_stato'];
    }

    /**
     * Sets descrizione_stato
     *
     * @param string|null $descrizione_stato Descrizione estesa dello stato del pagamento
     *
     * @return self
     */
    public function setDescrizioneStato($descrizione_stato)
    {
        if (is_null($descrizione_stato)) {
            throw new \InvalidArgumentException('non-nullable descrizione_stato cannot be null');
        }
        $this->container['descrizione_stato'] = $descrizione_stato;

        return $this;
    }

    /**
     * Gets modello
     *
     * @return \GovPay\Backoffice\Model\ModelloPagamento|null
     */
    public function getModello()
    {
        return $this->container['modello'];
    }

    /**
     * Sets modello
     *
     * @param \GovPay\Backoffice\Model\ModelloPagamento|null $modello modello
     *
     * @return self
     */
    public function setModello($modello)
    {
        if (is_null($modello)) {
            throw new \InvalidArgumentException('non-nullable modello cannot be null');
        }
        $this->container['modello'] = $modello;

        return $this;
    }

    /**
     * Gets psp_redirect_url
     *
     * @return string|null
     */
    public function getPspRedirectUrl()
    {
        return $this->container['psp_redirect_url'];
    }

    /**
     * Sets psp_redirect_url
     *
     * @param string|null $psp_redirect_url Url di redirect al psp inviata al versante per perfezionare il pagamento, se previsto dal modello
     *
     * @return self
     */
    public function setPspRedirectUrl($psp_redirect_url)
    {
        if (is_null($psp_redirect_url)) {
            throw new \InvalidArgumentException('non-nullable psp_redirect_url cannot be null');
        }
        $this->container['psp_redirect_url'] = $psp_redirect_url;

        return $this;
    }

    /**
     * Gets url_ritorno
     *
     * @return string|null
     */
    public function getUrlRitorno()
    {
        return $this->container['url_ritorno'];
    }

    /**
     * Sets url_ritorno
     *
     * @param string|null $url_ritorno url di ritorno al portale al termine della sessione di pagamento
     *
     * @return self
     */
    public function setUrlRitorno($url_ritorno)
    {
        if (is_null($url_ritorno)) {
            throw new \InvalidArgumentException('non-nullable url_ritorno cannot be null');
        }
        $this->container['url_ritorno'] = $url_ritorno;

        return $this;
    }

    /**
     * Gets conto_addebito
     *
     * @return \GovPay\Backoffice\Model\ContoAddebito|null
     */
    public function getContoAddebito()
    {
        return $this->container['conto_addebito'];
    }

    /**
     * Sets conto_addebito
     *
     * @param \GovPay\Backoffice\Model\ContoAddebito|null $conto_addebito conto_addebito
     *
     * @return self
     */
    public function setContoAddebito($conto_addebito)
    {
        if (is_null($conto_addebito)) {
            throw new \InvalidArgumentException('non-nullable conto_addebito cannot be null');
        }
        $this->container['conto_addebito'] = $conto_addebito;

        return $this;
    }

    /**
     * Gets data_esecuzione_pagamento
     *
     * @return \DateTime|null
     */
    public function getDataEsecuzionePagamento()
    {
        return $this->container['data_esecuzione_pagamento'];
    }

    /**
     * Sets data_esecuzione_pagamento
     *
     * @param \DateTime|null $data_esecuzione_pagamento data in cui si richiede che venga effettuato il pagamento, se diversa dalla data corrente.
     *
     * @return self
     */
    public function setDataEsecuzionePagamento($data_esecuzione_pagamento)
    {
        if (is_null($data_esecuzione_pagamento)) {
            throw new \InvalidArgumentException('non-nullable data_esecuzione_pagamento cannot be null');
        }
        $this->container['data_esecuzione_pagamento'] = $data_esecuzione_pagamento;

        return $this;
    }

    /**
     * Gets credenziali_pagatore
     *
     * @return string|null
     */
    public function getCredenzialiPagatore()
    {
        return $this->container['credenziali_pagatore'];
    }

    /**
     * Sets credenziali_pagatore
     *
     * @param string|null $credenziali_pagatore Eventuali credenziali richieste dal PSP necessarie per completare l'operazione (ad esempio un codice bilaterale utilizzabile una sola volta).
     *
     * @return self
     */
    public function setCredenzialiPagatore($credenziali_pagatore)
    {
        if (is_null($credenziali_pagatore)) {
            throw new \InvalidArgumentException('non-nullable credenziali_pagatore cannot be null');
        }
        $this->container['credenziali_pagatore'] = $credenziali_pagatore;

        return $this;
    }

    /**
     * Gets soggetto_versante
     *
     * @return \GovPay\Backoffice\Model\Soggetto|null
     */
    public function getSoggettoVersante()
    {
        return $this->container['soggetto_versante'];
    }

    /**
     * Sets soggetto_versante
     *
     * @param \GovPay\Backoffice\Model\Soggetto|null $soggetto_versante soggetto_versante
     *
     * @return self
     */
    public function setSoggettoVersante($soggetto_versante)
    {
        if (is_null($soggetto_versante)) {
            throw new \InvalidArgumentException('non-nullable soggetto_versante cannot be null');
        }
        $this->container['soggetto_versante'] = $soggetto_versante;

        return $this;
    }

    /**
     * Gets autenticazione_soggetto
     *
     * @return string|null
     */
    public function getAutenticazioneSoggetto()
    {
        return $this->container['autenticazione_soggetto'];
    }

    /**
     * Sets autenticazione_soggetto
     *
     * @param string|null $autenticazione_soggetto modalita' di autenticazione del soggetto versante
     *
     * @return self
     */
    public function setAutenticazioneSoggetto($autenticazione_soggetto)
    {
        if (is_null($autenticazione_soggetto)) {
            throw new \InvalidArgumentException('non-nullable autenticazione_soggetto cannot be null');
        }
        $allowedValues = $this->getAutenticazioneSoggettoAllowableValues();
        if (!in_array($autenticazione_soggetto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'autenticazione_soggetto', must be one of '%s'",
                    $autenticazione_soggetto,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['autenticazione_soggetto'] = $autenticazione_soggetto;

        return $this;
    }

    /**
     * Gets lingua
     *
     * @return string|null
     */
    public function getLingua()
    {
        return $this->container['lingua'];
    }

    /**
     * Sets lingua
     *
     * @param string|null $lingua Indica il codice della lingua da utilizzare per l’esposizione delle pagine web.
     *
     * @return self
     */
    public function setLingua($lingua)
    {
        if (is_null($lingua)) {
            throw new \InvalidArgumentException('non-nullable lingua cannot be null');
        }
        $allowedValues = $this->getLinguaAllowableValues();
        if (!in_array($lingua, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lingua', must be one of '%s'",
                    $lingua,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lingua'] = $lingua;

        return $this;
    }

    /**
     * Gets rpp
     *
     * @return string|null
     */
    public function getRpp()
    {
        return $this->container['rpp'];
    }

    /**
     * Sets rpp
     *
     * @param string|null $rpp Url per le richieste di pagamento oggetto del Pagamento
     *
     * @return self
     */
    public function setRpp($rpp)
    {
        if (is_null($rpp)) {
            throw new \InvalidArgumentException('non-nullable rpp cannot be null');
        }
        $this->container['rpp'] = $rpp;

        return $this;
    }

    /**
     * Gets verificato
     *
     * @return bool|null
     */
    public function getVerificato()
    {
        return $this->container['verificato'];
    }

    /**
     * Sets verificato
     *
     * @param bool|null $verificato indicazione se eventuali anomalie sono state verificate da un operatore
     *
     * @return self
     */
    public function setVerificato($verificato)
    {
        if (is_null($verificato)) {
            throw new \InvalidArgumentException('non-nullable verificato cannot be null');
        }
        $this->container['verificato'] = $verificato;

        return $this;
    }

    /**
     * Gets severita
     *
     * @return int|null
     */
    public function getSeverita()
    {
        return $this->container['severita'];
    }

    /**
     * Sets severita
     *
     * @param int|null $severita indica il livello di severita dell'errore che ha portato il pagamento in stato FALLITO
     *
     * @return self
     */
    public function setSeverita($severita)
    {
        if (is_null($severita)) {
            throw new \InvalidArgumentException('non-nullable severita cannot be null');
        }
        $this->container['severita'] = $severita;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



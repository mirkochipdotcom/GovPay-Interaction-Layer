<?php
/**
 * EntiCreditoriApi
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use GovPay\Backoffice\ApiException;
use GovPay\Backoffice\Configuration;
use GovPay\Backoffice\FormDataProcessor;
use GovPay\Backoffice\HeaderSelector;
use GovPay\Backoffice\ObjectSerializer;

/**
 * EntiCreditoriApi Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EntiCreditoriApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addContiAccredito' => [
            'application/json',
        ],
        'addDominio' => [
            'application/json',
        ],
        'addEntrata' => [
            'application/json',
        ],
        'addEntrataDominio' => [
            'application/json',
        ],
        'addIntermediario' => [
            'application/json',
        ],
        'addStazione' => [
            'application/json',
        ],
        'addTipoPendenza' => [
            'application/json',
        ],
        'addTipoPendenzaDominio' => [
            'application/json',
        ],
        'addUnitaOperativa' => [
            'application/json',
        ],
        'findContiAccredito' => [
            'application/json',
        ],
        'findDomini' => [
            'application/json',
        ],
        'findEntrate' => [
            'application/json',
        ],
        'findEntrateDominio' => [
            'application/json',
        ],
        'findIntermediari' => [
            'application/json',
        ],
        'findStazioni' => [
            'application/json',
        ],
        'findTipiPendenza' => [
            'application/json',
        ],
        'findTipiPendenzaDominio' => [
            'application/json',
        ],
        'findUnitaOperative' => [
            'application/json',
        ],
        'getContiAccredito' => [
            'application/json',
        ],
        'getDominio' => [
            'application/json',
        ],
        'getEntrata' => [
            'application/json',
        ],
        'getEntrataDominio' => [
            'application/json',
        ],
        'getIntermediario' => [
            'application/json',
        ],
        'getStazione' => [
            'application/json',
        ],
        'getTipoPendenza' => [
            'application/json',
        ],
        'getTipoPendenzaDominio' => [
            'application/json',
        ],
        'getUnitaOperativa' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addContiAccredito
     *
     * Aggiunge o aggiorna un iban di accredito al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $iban_accredito Iban di accredito (required)
     * @param  \GovPay\Backoffice\Model\ContiAccreditoPost|null $conti_accredito_post conti_accredito_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addContiAccredito'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addContiAccredito($id_dominio, $iban_accredito, $conti_accredito_post = null, string $contentType = self::contentTypes['addContiAccredito'][0])
    {
        $this->addContiAccreditoWithHttpInfo($id_dominio, $iban_accredito, $conti_accredito_post, $contentType);
    }

    /**
     * Operation addContiAccreditoWithHttpInfo
     *
     * Aggiunge o aggiorna un iban di accredito al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $iban_accredito Iban di accredito (required)
     * @param  \GovPay\Backoffice\Model\ContiAccreditoPost|null $conti_accredito_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addContiAccredito'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addContiAccreditoWithHttpInfo($id_dominio, $iban_accredito, $conti_accredito_post = null, string $contentType = self::contentTypes['addContiAccredito'][0])
    {
        $request = $this->addContiAccreditoRequest($id_dominio, $iban_accredito, $conti_accredito_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addContiAccreditoAsync
     *
     * Aggiunge o aggiorna un iban di accredito al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $iban_accredito Iban di accredito (required)
     * @param  \GovPay\Backoffice\Model\ContiAccreditoPost|null $conti_accredito_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addContiAccredito'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addContiAccreditoAsync($id_dominio, $iban_accredito, $conti_accredito_post = null, string $contentType = self::contentTypes['addContiAccredito'][0])
    {
        return $this->addContiAccreditoAsyncWithHttpInfo($id_dominio, $iban_accredito, $conti_accredito_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addContiAccreditoAsyncWithHttpInfo
     *
     * Aggiunge o aggiorna un iban di accredito al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $iban_accredito Iban di accredito (required)
     * @param  \GovPay\Backoffice\Model\ContiAccreditoPost|null $conti_accredito_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addContiAccredito'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addContiAccreditoAsyncWithHttpInfo($id_dominio, $iban_accredito, $conti_accredito_post = null, string $contentType = self::contentTypes['addContiAccredito'][0])
    {
        $returnType = '';
        $request = $this->addContiAccreditoRequest($id_dominio, $iban_accredito, $conti_accredito_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addContiAccredito'
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $iban_accredito Iban di accredito (required)
     * @param  \GovPay\Backoffice\Model\ContiAccreditoPost|null $conti_accredito_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addContiAccredito'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addContiAccreditoRequest($id_dominio, $iban_accredito, $conti_accredito_post = null, string $contentType = self::contentTypes['addContiAccredito'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling addContiAccredito'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.addContiAccredito, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'iban_accredito' is set
        if ($iban_accredito === null || (is_array($iban_accredito) && count($iban_accredito) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iban_accredito when calling addContiAccredito'
            );
        }
        if (!preg_match("/[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/", $iban_accredito)) {
            throw new \InvalidArgumentException("invalid value for \"iban_accredito\" when calling EntiCreditoriApi.addContiAccredito, must conform to the pattern /[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/.");
        }
        


        $resourcePath = '/domini/{idDominio}/contiAccredito/{ibanAccredito}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($iban_accredito !== null) {
            $resourcePath = str_replace(
                '{' . 'ibanAccredito' . '}',
                ObjectSerializer::toPathValue($iban_accredito),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($conti_accredito_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($conti_accredito_post));
            } else {
                $httpBody = $conti_accredito_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addDominio
     *
     * Aggiunge o aggiorna un dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  \GovPay\Backoffice\Model\DominioPost|null $dominio_post dominio_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addDominio($id_dominio, $dominio_post = null, string $contentType = self::contentTypes['addDominio'][0])
    {
        $this->addDominioWithHttpInfo($id_dominio, $dominio_post, $contentType);
    }

    /**
     * Operation addDominioWithHttpInfo
     *
     * Aggiunge o aggiorna un dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  \GovPay\Backoffice\Model\DominioPost|null $dominio_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDominioWithHttpInfo($id_dominio, $dominio_post = null, string $contentType = self::contentTypes['addDominio'][0])
    {
        $request = $this->addDominioRequest($id_dominio, $dominio_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addDominioAsync
     *
     * Aggiunge o aggiorna un dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  \GovPay\Backoffice\Model\DominioPost|null $dominio_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDominioAsync($id_dominio, $dominio_post = null, string $contentType = self::contentTypes['addDominio'][0])
    {
        return $this->addDominioAsyncWithHttpInfo($id_dominio, $dominio_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addDominioAsyncWithHttpInfo
     *
     * Aggiunge o aggiorna un dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  \GovPay\Backoffice\Model\DominioPost|null $dominio_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDominioAsyncWithHttpInfo($id_dominio, $dominio_post = null, string $contentType = self::contentTypes['addDominio'][0])
    {
        $returnType = '';
        $request = $this->addDominioRequest($id_dominio, $dominio_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addDominio'
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  \GovPay\Backoffice\Model\DominioPost|null $dominio_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addDominioRequest($id_dominio, $dominio_post = null, string $contentType = self::contentTypes['addDominio'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling addDominio'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.addDominio, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        


        $resourcePath = '/domini/{idDominio}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dominio_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dominio_post));
            } else {
                $httpBody = $dominio_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addEntrata
     *
     * Aggiunge o aggiorna una entrata
     *
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\TipoEntrataPost|null $tipo_entrata_post tipo_entrata_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEntrata'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addEntrata($id_entrata, $tipo_entrata_post = null, string $contentType = self::contentTypes['addEntrata'][0])
    {
        $this->addEntrataWithHttpInfo($id_entrata, $tipo_entrata_post, $contentType);
    }

    /**
     * Operation addEntrataWithHttpInfo
     *
     * Aggiunge o aggiorna una entrata
     *
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\TipoEntrataPost|null $tipo_entrata_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEntrata'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEntrataWithHttpInfo($id_entrata, $tipo_entrata_post = null, string $contentType = self::contentTypes['addEntrata'][0])
    {
        $request = $this->addEntrataRequest($id_entrata, $tipo_entrata_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addEntrataAsync
     *
     * Aggiunge o aggiorna una entrata
     *
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\TipoEntrataPost|null $tipo_entrata_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEntrata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEntrataAsync($id_entrata, $tipo_entrata_post = null, string $contentType = self::contentTypes['addEntrata'][0])
    {
        return $this->addEntrataAsyncWithHttpInfo($id_entrata, $tipo_entrata_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEntrataAsyncWithHttpInfo
     *
     * Aggiunge o aggiorna una entrata
     *
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\TipoEntrataPost|null $tipo_entrata_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEntrata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEntrataAsyncWithHttpInfo($id_entrata, $tipo_entrata_post = null, string $contentType = self::contentTypes['addEntrata'][0])
    {
        $returnType = '';
        $request = $this->addEntrataRequest($id_entrata, $tipo_entrata_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEntrata'
     *
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\TipoEntrataPost|null $tipo_entrata_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEntrata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addEntrataRequest($id_entrata, $tipo_entrata_post = null, string $contentType = self::contentTypes['addEntrata'][0])
    {

        // verify the required parameter 'id_entrata' is set
        if ($id_entrata === null || (is_array($id_entrata) && count($id_entrata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_entrata when calling addEntrata'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", $id_entrata)) {
            throw new \InvalidArgumentException("invalid value for \"id_entrata\" when calling EntiCreditoriApi.addEntrata, must conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.");
        }
        


        $resourcePath = '/entrate/{idEntrata}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_entrata !== null) {
            $resourcePath = str_replace(
                '{' . 'idEntrata' . '}',
                ObjectSerializer::toPathValue($id_entrata),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tipo_entrata_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tipo_entrata_post));
            } else {
                $httpBody = $tipo_entrata_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addEntrataDominio
     *
     * Aggiunge o aggiorna una entrata al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\EntrataPost|null $entrata_post entrata_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEntrataDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addEntrataDominio($id_dominio, $id_entrata, $entrata_post = null, string $contentType = self::contentTypes['addEntrataDominio'][0])
    {
        $this->addEntrataDominioWithHttpInfo($id_dominio, $id_entrata, $entrata_post, $contentType);
    }

    /**
     * Operation addEntrataDominioWithHttpInfo
     *
     * Aggiunge o aggiorna una entrata al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\EntrataPost|null $entrata_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEntrataDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEntrataDominioWithHttpInfo($id_dominio, $id_entrata, $entrata_post = null, string $contentType = self::contentTypes['addEntrataDominio'][0])
    {
        $request = $this->addEntrataDominioRequest($id_dominio, $id_entrata, $entrata_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addEntrataDominioAsync
     *
     * Aggiunge o aggiorna una entrata al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\EntrataPost|null $entrata_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEntrataDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEntrataDominioAsync($id_dominio, $id_entrata, $entrata_post = null, string $contentType = self::contentTypes['addEntrataDominio'][0])
    {
        return $this->addEntrataDominioAsyncWithHttpInfo($id_dominio, $id_entrata, $entrata_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEntrataDominioAsyncWithHttpInfo
     *
     * Aggiunge o aggiorna una entrata al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\EntrataPost|null $entrata_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEntrataDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEntrataDominioAsyncWithHttpInfo($id_dominio, $id_entrata, $entrata_post = null, string $contentType = self::contentTypes['addEntrataDominio'][0])
    {
        $returnType = '';
        $request = $this->addEntrataDominioRequest($id_dominio, $id_entrata, $entrata_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEntrataDominio'
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\EntrataPost|null $entrata_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEntrataDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addEntrataDominioRequest($id_dominio, $id_entrata, $entrata_post = null, string $contentType = self::contentTypes['addEntrataDominio'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling addEntrataDominio'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.addEntrataDominio, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'id_entrata' is set
        if ($id_entrata === null || (is_array($id_entrata) && count($id_entrata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_entrata when calling addEntrataDominio'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", $id_entrata)) {
            throw new \InvalidArgumentException("invalid value for \"id_entrata\" when calling EntiCreditoriApi.addEntrataDominio, must conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.");
        }
        


        $resourcePath = '/domini/{idDominio}/entrate/{idEntrata}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($id_entrata !== null) {
            $resourcePath = str_replace(
                '{' . 'idEntrata' . '}',
                ObjectSerializer::toPathValue($id_entrata),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($entrata_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($entrata_post));
            } else {
                $httpBody = $entrata_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addIntermediario
     *
     * Aggiunge o aggiorna un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  \GovPay\Backoffice\Model\IntermediarioPost|null $intermediario_post intermediario_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addIntermediario'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addIntermediario($id_intermediario, $intermediario_post = null, string $contentType = self::contentTypes['addIntermediario'][0])
    {
        $this->addIntermediarioWithHttpInfo($id_intermediario, $intermediario_post, $contentType);
    }

    /**
     * Operation addIntermediarioWithHttpInfo
     *
     * Aggiunge o aggiorna un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  \GovPay\Backoffice\Model\IntermediarioPost|null $intermediario_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addIntermediario'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addIntermediarioWithHttpInfo($id_intermediario, $intermediario_post = null, string $contentType = self::contentTypes['addIntermediario'][0])
    {
        $request = $this->addIntermediarioRequest($id_intermediario, $intermediario_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addIntermediarioAsync
     *
     * Aggiunge o aggiorna un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  \GovPay\Backoffice\Model\IntermediarioPost|null $intermediario_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addIntermediario'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addIntermediarioAsync($id_intermediario, $intermediario_post = null, string $contentType = self::contentTypes['addIntermediario'][0])
    {
        return $this->addIntermediarioAsyncWithHttpInfo($id_intermediario, $intermediario_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addIntermediarioAsyncWithHttpInfo
     *
     * Aggiunge o aggiorna un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  \GovPay\Backoffice\Model\IntermediarioPost|null $intermediario_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addIntermediario'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addIntermediarioAsyncWithHttpInfo($id_intermediario, $intermediario_post = null, string $contentType = self::contentTypes['addIntermediario'][0])
    {
        $returnType = '';
        $request = $this->addIntermediarioRequest($id_intermediario, $intermediario_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addIntermediario'
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  \GovPay\Backoffice\Model\IntermediarioPost|null $intermediario_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addIntermediario'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addIntermediarioRequest($id_intermediario, $intermediario_post = null, string $contentType = self::contentTypes['addIntermediario'][0])
    {

        // verify the required parameter 'id_intermediario' is set
        if ($id_intermediario === null || (is_array($id_intermediario) && count($id_intermediario) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_intermediario when calling addIntermediario'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_intermediario)) {
            throw new \InvalidArgumentException("invalid value for \"id_intermediario\" when calling EntiCreditoriApi.addIntermediario, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        


        $resourcePath = '/intermediari/{idIntermediario}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_intermediario !== null) {
            $resourcePath = str_replace(
                '{' . 'idIntermediario' . '}',
                ObjectSerializer::toPathValue($id_intermediario),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($intermediario_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($intermediario_post));
            } else {
                $httpBody = $intermediario_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addStazione
     *
     * Aggiunge o aggiorna una stazione
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $id_stazione Identificativo della stazione (required)
     * @param  \GovPay\Backoffice\Model\StazionePost|null $stazione_post stazione_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addStazione'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addStazione($id_intermediario, $id_stazione, $stazione_post = null, string $contentType = self::contentTypes['addStazione'][0])
    {
        $this->addStazioneWithHttpInfo($id_intermediario, $id_stazione, $stazione_post, $contentType);
    }

    /**
     * Operation addStazioneWithHttpInfo
     *
     * Aggiunge o aggiorna una stazione
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $id_stazione Identificativo della stazione (required)
     * @param  \GovPay\Backoffice\Model\StazionePost|null $stazione_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addStazione'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addStazioneWithHttpInfo($id_intermediario, $id_stazione, $stazione_post = null, string $contentType = self::contentTypes['addStazione'][0])
    {
        $request = $this->addStazioneRequest($id_intermediario, $id_stazione, $stazione_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addStazioneAsync
     *
     * Aggiunge o aggiorna una stazione
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $id_stazione Identificativo della stazione (required)
     * @param  \GovPay\Backoffice\Model\StazionePost|null $stazione_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addStazione'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addStazioneAsync($id_intermediario, $id_stazione, $stazione_post = null, string $contentType = self::contentTypes['addStazione'][0])
    {
        return $this->addStazioneAsyncWithHttpInfo($id_intermediario, $id_stazione, $stazione_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addStazioneAsyncWithHttpInfo
     *
     * Aggiunge o aggiorna una stazione
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $id_stazione Identificativo della stazione (required)
     * @param  \GovPay\Backoffice\Model\StazionePost|null $stazione_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addStazione'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addStazioneAsyncWithHttpInfo($id_intermediario, $id_stazione, $stazione_post = null, string $contentType = self::contentTypes['addStazione'][0])
    {
        $returnType = '';
        $request = $this->addStazioneRequest($id_intermediario, $id_stazione, $stazione_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addStazione'
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $id_stazione Identificativo della stazione (required)
     * @param  \GovPay\Backoffice\Model\StazionePost|null $stazione_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addStazione'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addStazioneRequest($id_intermediario, $id_stazione, $stazione_post = null, string $contentType = self::contentTypes['addStazione'][0])
    {

        // verify the required parameter 'id_intermediario' is set
        if ($id_intermediario === null || (is_array($id_intermediario) && count($id_intermediario) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_intermediario when calling addStazione'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_intermediario)) {
            throw new \InvalidArgumentException("invalid value for \"id_intermediario\" when calling EntiCreditoriApi.addStazione, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'id_stazione' is set
        if ($id_stazione === null || (is_array($id_stazione) && count($id_stazione) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_stazione when calling addStazione'
            );
        }
        if (!preg_match("/(^([0-9]){11}_([0-9]){2}$)/", $id_stazione)) {
            throw new \InvalidArgumentException("invalid value for \"id_stazione\" when calling EntiCreditoriApi.addStazione, must conform to the pattern /(^([0-9]){11}_([0-9]){2}$)/.");
        }
        


        $resourcePath = '/intermediari/{idIntermediario}/stazioni/{idStazione}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_intermediario !== null) {
            $resourcePath = str_replace(
                '{' . 'idIntermediario' . '}',
                ObjectSerializer::toPathValue($id_intermediario),
                $resourcePath
            );
        }
        // path params
        if ($id_stazione !== null) {
            $resourcePath = str_replace(
                '{' . 'idStazione' . '}',
                ObjectSerializer::toPathValue($id_stazione),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($stazione_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($stazione_post));
            } else {
                $httpBody = $stazione_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addTipoPendenza
     *
     * Aggiunge o aggiorna una tipologia di pendenza
     *
     * @param  string $id_tipo_pendenza Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\TipoPendenzaPost|null $tipo_pendenza_post tipo_pendenza_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTipoPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addTipoPendenza($id_tipo_pendenza, $tipo_pendenza_post = null, string $contentType = self::contentTypes['addTipoPendenza'][0])
    {
        $this->addTipoPendenzaWithHttpInfo($id_tipo_pendenza, $tipo_pendenza_post, $contentType);
    }

    /**
     * Operation addTipoPendenzaWithHttpInfo
     *
     * Aggiunge o aggiorna una tipologia di pendenza
     *
     * @param  string $id_tipo_pendenza Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\TipoPendenzaPost|null $tipo_pendenza_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTipoPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTipoPendenzaWithHttpInfo($id_tipo_pendenza, $tipo_pendenza_post = null, string $contentType = self::contentTypes['addTipoPendenza'][0])
    {
        $request = $this->addTipoPendenzaRequest($id_tipo_pendenza, $tipo_pendenza_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addTipoPendenzaAsync
     *
     * Aggiunge o aggiorna una tipologia di pendenza
     *
     * @param  string $id_tipo_pendenza Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\TipoPendenzaPost|null $tipo_pendenza_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTipoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTipoPendenzaAsync($id_tipo_pendenza, $tipo_pendenza_post = null, string $contentType = self::contentTypes['addTipoPendenza'][0])
    {
        return $this->addTipoPendenzaAsyncWithHttpInfo($id_tipo_pendenza, $tipo_pendenza_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTipoPendenzaAsyncWithHttpInfo
     *
     * Aggiunge o aggiorna una tipologia di pendenza
     *
     * @param  string $id_tipo_pendenza Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\TipoPendenzaPost|null $tipo_pendenza_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTipoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTipoPendenzaAsyncWithHttpInfo($id_tipo_pendenza, $tipo_pendenza_post = null, string $contentType = self::contentTypes['addTipoPendenza'][0])
    {
        $returnType = '';
        $request = $this->addTipoPendenzaRequest($id_tipo_pendenza, $tipo_pendenza_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTipoPendenza'
     *
     * @param  string $id_tipo_pendenza Identificativo della tipologia di entrata (required)
     * @param  \GovPay\Backoffice\Model\TipoPendenzaPost|null $tipo_pendenza_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTipoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addTipoPendenzaRequest($id_tipo_pendenza, $tipo_pendenza_post = null, string $contentType = self::contentTypes['addTipoPendenza'][0])
    {

        // verify the required parameter 'id_tipo_pendenza' is set
        if ($id_tipo_pendenza === null || (is_array($id_tipo_pendenza) && count($id_tipo_pendenza) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_tipo_pendenza when calling addTipoPendenza'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", $id_tipo_pendenza)) {
            throw new \InvalidArgumentException("invalid value for \"id_tipo_pendenza\" when calling EntiCreditoriApi.addTipoPendenza, must conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.");
        }
        


        $resourcePath = '/tipiPendenza/{idTipoPendenza}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_tipo_pendenza !== null) {
            $resourcePath = str_replace(
                '{' . 'idTipoPendenza' . '}',
                ObjectSerializer::toPathValue($id_tipo_pendenza),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tipo_pendenza_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tipo_pendenza_post));
            } else {
                $httpBody = $tipo_pendenza_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addTipoPendenzaDominio
     *
     * Aggiunge o aggiorna una tipologia di pendenza al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia di pendenza (required)
     * @param  \GovPay\Backoffice\Model\TipoPendenzaDominioPost|null $tipo_pendenza_dominio_post tipo_pendenza_dominio_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTipoPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addTipoPendenzaDominio($id_dominio, $id_tipo_pendenza, $tipo_pendenza_dominio_post = null, string $contentType = self::contentTypes['addTipoPendenzaDominio'][0])
    {
        $this->addTipoPendenzaDominioWithHttpInfo($id_dominio, $id_tipo_pendenza, $tipo_pendenza_dominio_post, $contentType);
    }

    /**
     * Operation addTipoPendenzaDominioWithHttpInfo
     *
     * Aggiunge o aggiorna una tipologia di pendenza al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia di pendenza (required)
     * @param  \GovPay\Backoffice\Model\TipoPendenzaDominioPost|null $tipo_pendenza_dominio_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTipoPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTipoPendenzaDominioWithHttpInfo($id_dominio, $id_tipo_pendenza, $tipo_pendenza_dominio_post = null, string $contentType = self::contentTypes['addTipoPendenzaDominio'][0])
    {
        $request = $this->addTipoPendenzaDominioRequest($id_dominio, $id_tipo_pendenza, $tipo_pendenza_dominio_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addTipoPendenzaDominioAsync
     *
     * Aggiunge o aggiorna una tipologia di pendenza al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia di pendenza (required)
     * @param  \GovPay\Backoffice\Model\TipoPendenzaDominioPost|null $tipo_pendenza_dominio_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTipoPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTipoPendenzaDominioAsync($id_dominio, $id_tipo_pendenza, $tipo_pendenza_dominio_post = null, string $contentType = self::contentTypes['addTipoPendenzaDominio'][0])
    {
        return $this->addTipoPendenzaDominioAsyncWithHttpInfo($id_dominio, $id_tipo_pendenza, $tipo_pendenza_dominio_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTipoPendenzaDominioAsyncWithHttpInfo
     *
     * Aggiunge o aggiorna una tipologia di pendenza al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia di pendenza (required)
     * @param  \GovPay\Backoffice\Model\TipoPendenzaDominioPost|null $tipo_pendenza_dominio_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTipoPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTipoPendenzaDominioAsyncWithHttpInfo($id_dominio, $id_tipo_pendenza, $tipo_pendenza_dominio_post = null, string $contentType = self::contentTypes['addTipoPendenzaDominio'][0])
    {
        $returnType = '';
        $request = $this->addTipoPendenzaDominioRequest($id_dominio, $id_tipo_pendenza, $tipo_pendenza_dominio_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTipoPendenzaDominio'
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia di pendenza (required)
     * @param  \GovPay\Backoffice\Model\TipoPendenzaDominioPost|null $tipo_pendenza_dominio_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTipoPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addTipoPendenzaDominioRequest($id_dominio, $id_tipo_pendenza, $tipo_pendenza_dominio_post = null, string $contentType = self::contentTypes['addTipoPendenzaDominio'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling addTipoPendenzaDominio'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.addTipoPendenzaDominio, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'id_tipo_pendenza' is set
        if ($id_tipo_pendenza === null || (is_array($id_tipo_pendenza) && count($id_tipo_pendenza) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_tipo_pendenza when calling addTipoPendenzaDominio'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", $id_tipo_pendenza)) {
            throw new \InvalidArgumentException("invalid value for \"id_tipo_pendenza\" when calling EntiCreditoriApi.addTipoPendenzaDominio, must conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.");
        }
        


        $resourcePath = '/domini/{idDominio}/tipiPendenza/{idTipoPendenza}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($id_tipo_pendenza !== null) {
            $resourcePath = str_replace(
                '{' . 'idTipoPendenza' . '}',
                ObjectSerializer::toPathValue($id_tipo_pendenza),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tipo_pendenza_dominio_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tipo_pendenza_dominio_post));
            } else {
                $httpBody = $tipo_pendenza_dominio_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addUnitaOperativa
     *
     * Aggiunge o aggiorna un&#39;unità operativa al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_unita_operativa Identificativo dell&#39;unita&#39; operativa del dominio beneficiario (required)
     * @param  \GovPay\Backoffice\Model\UnitaOperativaPost|null $unita_operativa_post unita_operativa_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUnitaOperativa'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addUnitaOperativa($id_dominio, $id_unita_operativa, $unita_operativa_post = null, string $contentType = self::contentTypes['addUnitaOperativa'][0])
    {
        $this->addUnitaOperativaWithHttpInfo($id_dominio, $id_unita_operativa, $unita_operativa_post, $contentType);
    }

    /**
     * Operation addUnitaOperativaWithHttpInfo
     *
     * Aggiunge o aggiorna un&#39;unità operativa al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_unita_operativa Identificativo dell&#39;unita&#39; operativa del dominio beneficiario (required)
     * @param  \GovPay\Backoffice\Model\UnitaOperativaPost|null $unita_operativa_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUnitaOperativa'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUnitaOperativaWithHttpInfo($id_dominio, $id_unita_operativa, $unita_operativa_post = null, string $contentType = self::contentTypes['addUnitaOperativa'][0])
    {
        $request = $this->addUnitaOperativaRequest($id_dominio, $id_unita_operativa, $unita_operativa_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addUnitaOperativaAsync
     *
     * Aggiunge o aggiorna un&#39;unità operativa al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_unita_operativa Identificativo dell&#39;unita&#39; operativa del dominio beneficiario (required)
     * @param  \GovPay\Backoffice\Model\UnitaOperativaPost|null $unita_operativa_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUnitaOperativa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUnitaOperativaAsync($id_dominio, $id_unita_operativa, $unita_operativa_post = null, string $contentType = self::contentTypes['addUnitaOperativa'][0])
    {
        return $this->addUnitaOperativaAsyncWithHttpInfo($id_dominio, $id_unita_operativa, $unita_operativa_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addUnitaOperativaAsyncWithHttpInfo
     *
     * Aggiunge o aggiorna un&#39;unità operativa al dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_unita_operativa Identificativo dell&#39;unita&#39; operativa del dominio beneficiario (required)
     * @param  \GovPay\Backoffice\Model\UnitaOperativaPost|null $unita_operativa_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUnitaOperativa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUnitaOperativaAsyncWithHttpInfo($id_dominio, $id_unita_operativa, $unita_operativa_post = null, string $contentType = self::contentTypes['addUnitaOperativa'][0])
    {
        $returnType = '';
        $request = $this->addUnitaOperativaRequest($id_dominio, $id_unita_operativa, $unita_operativa_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addUnitaOperativa'
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_unita_operativa Identificativo dell&#39;unita&#39; operativa del dominio beneficiario (required)
     * @param  \GovPay\Backoffice\Model\UnitaOperativaPost|null $unita_operativa_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUnitaOperativa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addUnitaOperativaRequest($id_dominio, $id_unita_operativa, $unita_operativa_post = null, string $contentType = self::contentTypes['addUnitaOperativa'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling addUnitaOperativa'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.addUnitaOperativa, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'id_unita_operativa' is set
        if ($id_unita_operativa === null || (is_array($id_unita_operativa) && count($id_unita_operativa) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_unita_operativa when calling addUnitaOperativa'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_]{1,35}$)/", $id_unita_operativa)) {
            throw new \InvalidArgumentException("invalid value for \"id_unita_operativa\" when calling EntiCreditoriApi.addUnitaOperativa, must conform to the pattern /(^[a-zA-Z0-9\\-_]{1,35}$)/.");
        }
        


        $resourcePath = '/domini/{idDominio}/unitaOperative/{idUnitaOperativa}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($id_unita_operativa !== null) {
            $resourcePath = str_replace(
                '{' . 'idUnitaOperativa' . '}',
                ObjectSerializer::toPathValue($id_unita_operativa),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unita_operativa_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($unita_operativa_post));
            } else {
                $httpBody = $unita_operativa_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findContiAccredito
     *
     * Elenco degli iban di accredito del beneficiario
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ibanAccredito')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $iban filtro per Iban (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findContiAccredito'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindContiAccredito200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findContiAccredito($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+ibanAccredito', $campi = null, $abilitato = null, $iban = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findContiAccredito'][0])
    {
        list($response) = $this->findContiAccreditoWithHttpInfo($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $iban, $metadati_paginazione, $max_risultati, $contentType);
        return $response;
    }

    /**
     * Operation findContiAccreditoWithHttpInfo
     *
     * Elenco degli iban di accredito del beneficiario
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ibanAccredito')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $iban filtro per Iban (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findContiAccredito'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindContiAccredito200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findContiAccreditoWithHttpInfo($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+ibanAccredito', $campi = null, $abilitato = null, $iban = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findContiAccredito'][0])
    {
        $request = $this->findContiAccreditoRequest($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $iban, $metadati_paginazione, $max_risultati, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindContiAccredito200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindContiAccredito200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindContiAccredito200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findContiAccreditoAsync
     *
     * Elenco degli iban di accredito del beneficiario
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ibanAccredito')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $iban filtro per Iban (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findContiAccredito'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findContiAccreditoAsync($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+ibanAccredito', $campi = null, $abilitato = null, $iban = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findContiAccredito'][0])
    {
        return $this->findContiAccreditoAsyncWithHttpInfo($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $iban, $metadati_paginazione, $max_risultati, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findContiAccreditoAsyncWithHttpInfo
     *
     * Elenco degli iban di accredito del beneficiario
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ibanAccredito')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $iban filtro per Iban (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findContiAccredito'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findContiAccreditoAsyncWithHttpInfo($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+ibanAccredito', $campi = null, $abilitato = null, $iban = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findContiAccredito'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindContiAccredito200Response';
        $request = $this->findContiAccreditoRequest($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $iban, $metadati_paginazione, $max_risultati, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findContiAccredito'
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ibanAccredito')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $iban filtro per Iban (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findContiAccredito'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findContiAccreditoRequest($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+ibanAccredito', $campi = null, $abilitato = null, $iban = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findContiAccredito'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling findContiAccredito'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.findContiAccredito, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling EntiCreditoriApi.findContiAccredito, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findContiAccredito, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findContiAccredito, must be bigger than or equal to 0.');
        }
        







        $resourcePath = '/domini/{idDominio}/contiAccredito';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $abilitato,
            'abilitato', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iban,
            'iban', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findDomini
     *
     * Elenco dei domini beneficiari censiti
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ragioneSociale')
     * @param  string|null $id_stazione Restrizione ai soli domini associati alla stazione indicata (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $ragione_sociale filtro per Ragione Sociale (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  bool|null $intermediato filtro sui domini intermediati (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findDomini'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindDomini200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findDomini($pagina = 1, $risultati_per_pagina = 25, $campi = null, $abilitato = null, $ordinamento = '+ragioneSociale', $id_stazione = null, $associati = null, $form = null, $id_dominio = null, $ragione_sociale = null, $metadati_paginazione = true, $max_risultati = true, $intermediato = null, string $contentType = self::contentTypes['findDomini'][0])
    {
        list($response) = $this->findDominiWithHttpInfo($pagina, $risultati_per_pagina, $campi, $abilitato, $ordinamento, $id_stazione, $associati, $form, $id_dominio, $ragione_sociale, $metadati_paginazione, $max_risultati, $intermediato, $contentType);
        return $response;
    }

    /**
     * Operation findDominiWithHttpInfo
     *
     * Elenco dei domini beneficiari censiti
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ragioneSociale')
     * @param  string|null $id_stazione Restrizione ai soli domini associati alla stazione indicata (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $ragione_sociale filtro per Ragione Sociale (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  bool|null $intermediato filtro sui domini intermediati (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findDomini'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindDomini200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findDominiWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $campi = null, $abilitato = null, $ordinamento = '+ragioneSociale', $id_stazione = null, $associati = null, $form = null, $id_dominio = null, $ragione_sociale = null, $metadati_paginazione = true, $max_risultati = true, $intermediato = null, string $contentType = self::contentTypes['findDomini'][0])
    {
        $request = $this->findDominiRequest($pagina, $risultati_per_pagina, $campi, $abilitato, $ordinamento, $id_stazione, $associati, $form, $id_dominio, $ragione_sociale, $metadati_paginazione, $max_risultati, $intermediato, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindDomini200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindDomini200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindDomini200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findDominiAsync
     *
     * Elenco dei domini beneficiari censiti
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ragioneSociale')
     * @param  string|null $id_stazione Restrizione ai soli domini associati alla stazione indicata (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $ragione_sociale filtro per Ragione Sociale (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  bool|null $intermediato filtro sui domini intermediati (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findDomini'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findDominiAsync($pagina = 1, $risultati_per_pagina = 25, $campi = null, $abilitato = null, $ordinamento = '+ragioneSociale', $id_stazione = null, $associati = null, $form = null, $id_dominio = null, $ragione_sociale = null, $metadati_paginazione = true, $max_risultati = true, $intermediato = null, string $contentType = self::contentTypes['findDomini'][0])
    {
        return $this->findDominiAsyncWithHttpInfo($pagina, $risultati_per_pagina, $campi, $abilitato, $ordinamento, $id_stazione, $associati, $form, $id_dominio, $ragione_sociale, $metadati_paginazione, $max_risultati, $intermediato, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findDominiAsyncWithHttpInfo
     *
     * Elenco dei domini beneficiari censiti
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ragioneSociale')
     * @param  string|null $id_stazione Restrizione ai soli domini associati alla stazione indicata (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $ragione_sociale filtro per Ragione Sociale (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  bool|null $intermediato filtro sui domini intermediati (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findDomini'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findDominiAsyncWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $campi = null, $abilitato = null, $ordinamento = '+ragioneSociale', $id_stazione = null, $associati = null, $form = null, $id_dominio = null, $ragione_sociale = null, $metadati_paginazione = true, $max_risultati = true, $intermediato = null, string $contentType = self::contentTypes['findDomini'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindDomini200Response';
        $request = $this->findDominiRequest($pagina, $risultati_per_pagina, $campi, $abilitato, $ordinamento, $id_stazione, $associati, $form, $id_dominio, $ragione_sociale, $metadati_paginazione, $max_risultati, $intermediato, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findDomini'
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ragioneSociale')
     * @param  string|null $id_stazione Restrizione ai soli domini associati alla stazione indicata (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $ragione_sociale filtro per Ragione Sociale (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  bool|null $intermediato filtro sui domini intermediati (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findDomini'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findDominiRequest($pagina = 1, $risultati_per_pagina = 25, $campi = null, $abilitato = null, $ordinamento = '+ragioneSociale', $id_stazione = null, $associati = null, $form = null, $id_dominio = null, $ragione_sociale = null, $metadati_paginazione = true, $max_risultati = true, $intermediato = null, string $contentType = self::contentTypes['findDomini'][0])
    {

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling EntiCreditoriApi.findDomini, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findDomini, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findDomini, must be bigger than or equal to 0.');
        }
        






        if ($id_dominio !== null && !preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.findDomini, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        





        $resourcePath = '/domini';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $abilitato,
            'abilitato', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_stazione,
            'idStazione', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $associati,
            'associati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $form,
            'form', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_dominio,
            'idDominio', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ragione_sociale,
            'ragioneSociale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $intermediato,
            'intermediato', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findEntrate
     *
     * Elenco delle tipologie di entrata
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findEntrate'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindEntrate200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findEntrate($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findEntrate'][0])
    {
        list($response) = $this->findEntrateWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $metadati_paginazione, $max_risultati, $contentType);
        return $response;
    }

    /**
     * Operation findEntrateWithHttpInfo
     *
     * Elenco delle tipologie di entrata
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findEntrate'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindEntrate200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findEntrateWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findEntrate'][0])
    {
        $request = $this->findEntrateRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $metadati_paginazione, $max_risultati, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindEntrate200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindEntrate200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindEntrate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findEntrateAsync
     *
     * Elenco delle tipologie di entrata
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findEntrate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findEntrateAsync($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findEntrate'][0])
    {
        return $this->findEntrateAsyncWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $metadati_paginazione, $max_risultati, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findEntrateAsyncWithHttpInfo
     *
     * Elenco delle tipologie di entrata
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findEntrate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findEntrateAsyncWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findEntrate'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindEntrate200Response';
        $request = $this->findEntrateRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $metadati_paginazione, $max_risultati, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findEntrate'
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findEntrate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findEntrateRequest($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findEntrate'][0])
    {

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling EntiCreditoriApi.findEntrate, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findEntrate, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findEntrate, must be bigger than or equal to 0.');
        }
        





        $resourcePath = '/entrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findEntrateDominio
     *
     * Elenco delle tipologie di entrata del dominio
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findEntrateDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindEntrateDominio200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findEntrateDominio($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $abilitato = null, $descrizione = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findEntrateDominio'][0])
    {
        list($response) = $this->findEntrateDominioWithHttpInfo($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $descrizione, $metadati_paginazione, $max_risultati, $contentType);
        return $response;
    }

    /**
     * Operation findEntrateDominioWithHttpInfo
     *
     * Elenco delle tipologie di entrata del dominio
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findEntrateDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindEntrateDominio200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findEntrateDominioWithHttpInfo($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $abilitato = null, $descrizione = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findEntrateDominio'][0])
    {
        $request = $this->findEntrateDominioRequest($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $descrizione, $metadati_paginazione, $max_risultati, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindEntrateDominio200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindEntrateDominio200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindEntrateDominio200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findEntrateDominioAsync
     *
     * Elenco delle tipologie di entrata del dominio
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findEntrateDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findEntrateDominioAsync($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $abilitato = null, $descrizione = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findEntrateDominio'][0])
    {
        return $this->findEntrateDominioAsyncWithHttpInfo($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $descrizione, $metadati_paginazione, $max_risultati, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findEntrateDominioAsyncWithHttpInfo
     *
     * Elenco delle tipologie di entrata del dominio
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findEntrateDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findEntrateDominioAsyncWithHttpInfo($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $abilitato = null, $descrizione = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findEntrateDominio'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindEntrateDominio200Response';
        $request = $this->findEntrateDominioRequest($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $descrizione, $metadati_paginazione, $max_risultati, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findEntrateDominio'
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findEntrateDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findEntrateDominioRequest($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $abilitato = null, $descrizione = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findEntrateDominio'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling findEntrateDominio'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.findEntrateDominio, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling EntiCreditoriApi.findEntrateDominio, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findEntrateDominio, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findEntrateDominio, must be bigger than or equal to 0.');
        }
        







        $resourcePath = '/domini/{idDominio}/entrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $abilitato,
            'abilitato', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $descrizione,
            'descrizione', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findIntermediari
     *
     * Elenco degli intermediari
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * denominazione (optional, default to '+denominazione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findIntermediari'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindIntermediari200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findIntermediari($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+denominazione', $campi = null, $abilitato = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findIntermediari'][0])
    {
        list($response) = $this->findIntermediariWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $metadati_paginazione, $max_risultati, $contentType);
        return $response;
    }

    /**
     * Operation findIntermediariWithHttpInfo
     *
     * Elenco degli intermediari
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * denominazione (optional, default to '+denominazione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findIntermediari'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindIntermediari200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findIntermediariWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+denominazione', $campi = null, $abilitato = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findIntermediari'][0])
    {
        $request = $this->findIntermediariRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $metadati_paginazione, $max_risultati, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindIntermediari200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindIntermediari200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindIntermediari200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findIntermediariAsync
     *
     * Elenco degli intermediari
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * denominazione (optional, default to '+denominazione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findIntermediari'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findIntermediariAsync($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+denominazione', $campi = null, $abilitato = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findIntermediari'][0])
    {
        return $this->findIntermediariAsyncWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $metadati_paginazione, $max_risultati, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findIntermediariAsyncWithHttpInfo
     *
     * Elenco degli intermediari
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * denominazione (optional, default to '+denominazione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findIntermediari'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findIntermediariAsyncWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+denominazione', $campi = null, $abilitato = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findIntermediari'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindIntermediari200Response';
        $request = $this->findIntermediariRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $metadati_paginazione, $max_risultati, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findIntermediari'
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * denominazione (optional, default to '+denominazione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findIntermediari'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findIntermediariRequest($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+denominazione', $campi = null, $abilitato = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findIntermediari'][0])
    {

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling EntiCreditoriApi.findIntermediari, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findIntermediari, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findIntermediari, must be bigger than or equal to 0.');
        }
        






        $resourcePath = '/intermediari';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $abilitato,
            'abilitato', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findStazioni
     *
     * Elenco delle stazioni di un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idStazione (optional, default to '+idStazione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findStazioni'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindStazioni200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findStazioni($id_intermediario, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idStazione', $campi = null, $abilitato = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findStazioni'][0])
    {
        list($response) = $this->findStazioniWithHttpInfo($id_intermediario, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $metadati_paginazione, $max_risultati, $contentType);
        return $response;
    }

    /**
     * Operation findStazioniWithHttpInfo
     *
     * Elenco delle stazioni di un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idStazione (optional, default to '+idStazione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findStazioni'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindStazioni200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findStazioniWithHttpInfo($id_intermediario, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idStazione', $campi = null, $abilitato = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findStazioni'][0])
    {
        $request = $this->findStazioniRequest($id_intermediario, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $metadati_paginazione, $max_risultati, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindStazioni200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindStazioni200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindStazioni200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findStazioniAsync
     *
     * Elenco delle stazioni di un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idStazione (optional, default to '+idStazione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findStazioni'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findStazioniAsync($id_intermediario, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idStazione', $campi = null, $abilitato = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findStazioni'][0])
    {
        return $this->findStazioniAsyncWithHttpInfo($id_intermediario, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $metadati_paginazione, $max_risultati, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findStazioniAsyncWithHttpInfo
     *
     * Elenco delle stazioni di un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idStazione (optional, default to '+idStazione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findStazioni'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findStazioniAsyncWithHttpInfo($id_intermediario, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idStazione', $campi = null, $abilitato = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findStazioni'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindStazioni200Response';
        $request = $this->findStazioniRequest($id_intermediario, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $metadati_paginazione, $max_risultati, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findStazioni'
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idStazione (optional, default to '+idStazione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findStazioni'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findStazioniRequest($id_intermediario, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idStazione', $campi = null, $abilitato = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findStazioni'][0])
    {

        // verify the required parameter 'id_intermediario' is set
        if ($id_intermediario === null || (is_array($id_intermediario) && count($id_intermediario) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_intermediario when calling findStazioni'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_intermediario)) {
            throw new \InvalidArgumentException("invalid value for \"id_intermediario\" when calling EntiCreditoriApi.findStazioni, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling EntiCreditoriApi.findStazioni, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findStazioni, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findStazioni, must be bigger than or equal to 0.');
        }
        






        $resourcePath = '/intermediari/{idIntermediario}/stazioni';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $abilitato,
            'abilitato', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_intermediario !== null) {
            $resourcePath = str_replace(
                '{' . 'idIntermediario' . '}',
                ObjectSerializer::toPathValue($id_intermediario),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findTipiPendenza
     *
     * Elenco delle tipologie di pendenza
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  string|null $id_tipo_pendenza Identificativo della tipologia di pendenza (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $trasformazione Restrizione ai soli elementi che mettono a disposizione i template di trasformazione per i tracciati CSV. (optional)
     * @param  string|null $non_associati Restrizione ai soli elementi non sono associati al dominio indicato come parametro.   Se il dominio e&#39; inesistente vengono restituiti tutti i risultati. (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTipiPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindTipiPendenza200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findTipiPendenza($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $abilitato = null, $associati = null, $form = null, $id_tipo_pendenza = null, $descrizione = null, $trasformazione = null, $non_associati = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTipiPendenza'][0])
    {
        list($response) = $this->findTipiPendenzaWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $form, $id_tipo_pendenza, $descrizione, $trasformazione, $non_associati, $metadati_paginazione, $max_risultati, $contentType);
        return $response;
    }

    /**
     * Operation findTipiPendenzaWithHttpInfo
     *
     * Elenco delle tipologie di pendenza
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  string|null $id_tipo_pendenza Identificativo della tipologia di pendenza (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $trasformazione Restrizione ai soli elementi che mettono a disposizione i template di trasformazione per i tracciati CSV. (optional)
     * @param  string|null $non_associati Restrizione ai soli elementi non sono associati al dominio indicato come parametro.   Se il dominio e&#39; inesistente vengono restituiti tutti i risultati. (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTipiPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindTipiPendenza200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findTipiPendenzaWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $abilitato = null, $associati = null, $form = null, $id_tipo_pendenza = null, $descrizione = null, $trasformazione = null, $non_associati = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTipiPendenza'][0])
    {
        $request = $this->findTipiPendenzaRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $form, $id_tipo_pendenza, $descrizione, $trasformazione, $non_associati, $metadati_paginazione, $max_risultati, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindTipiPendenza200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindTipiPendenza200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindTipiPendenza200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findTipiPendenzaAsync
     *
     * Elenco delle tipologie di pendenza
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  string|null $id_tipo_pendenza Identificativo della tipologia di pendenza (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $trasformazione Restrizione ai soli elementi che mettono a disposizione i template di trasformazione per i tracciati CSV. (optional)
     * @param  string|null $non_associati Restrizione ai soli elementi non sono associati al dominio indicato come parametro.   Se il dominio e&#39; inesistente vengono restituiti tutti i risultati. (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTipiPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTipiPendenzaAsync($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $abilitato = null, $associati = null, $form = null, $id_tipo_pendenza = null, $descrizione = null, $trasformazione = null, $non_associati = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTipiPendenza'][0])
    {
        return $this->findTipiPendenzaAsyncWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $form, $id_tipo_pendenza, $descrizione, $trasformazione, $non_associati, $metadati_paginazione, $max_risultati, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findTipiPendenzaAsyncWithHttpInfo
     *
     * Elenco delle tipologie di pendenza
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  string|null $id_tipo_pendenza Identificativo della tipologia di pendenza (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $trasformazione Restrizione ai soli elementi che mettono a disposizione i template di trasformazione per i tracciati CSV. (optional)
     * @param  string|null $non_associati Restrizione ai soli elementi non sono associati al dominio indicato come parametro.   Se il dominio e&#39; inesistente vengono restituiti tutti i risultati. (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTipiPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTipiPendenzaAsyncWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $abilitato = null, $associati = null, $form = null, $id_tipo_pendenza = null, $descrizione = null, $trasformazione = null, $non_associati = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTipiPendenza'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindTipiPendenza200Response';
        $request = $this->findTipiPendenzaRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $form, $id_tipo_pendenza, $descrizione, $trasformazione, $non_associati, $metadati_paginazione, $max_risultati, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findTipiPendenza'
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+idEntrata')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  string|null $id_tipo_pendenza Identificativo della tipologia di pendenza (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $trasformazione Restrizione ai soli elementi che mettono a disposizione i template di trasformazione per i tracciati CSV. (optional)
     * @param  string|null $non_associati Restrizione ai soli elementi non sono associati al dominio indicato come parametro.   Se il dominio e&#39; inesistente vengono restituiti tutti i risultati. (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTipiPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findTipiPendenzaRequest($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+idEntrata', $campi = null, $abilitato = null, $associati = null, $form = null, $id_tipo_pendenza = null, $descrizione = null, $trasformazione = null, $non_associati = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTipiPendenza'][0])
    {

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling EntiCreditoriApi.findTipiPendenza, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findTipiPendenza, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findTipiPendenza, must be bigger than or equal to 0.');
        }
        












        $resourcePath = '/tipiPendenza';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $abilitato,
            'abilitato', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $associati,
            'associati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $form,
            'form', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_tipo_pendenza,
            'idTipoPendenza', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $descrizione,
            'descrizione', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $trasformazione,
            'trasformazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $non_associati,
            'nonAssociati', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findTipiPendenzaDominio
     *
     * Elenco delle tipologie di pendenza del dominio
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+descrizione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  bool|null $trasformazione Restrizione ai soli elementi che mettono a disposizione i template di trasformazione per i tracciati CSV. (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTipiPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindTipiPendenzaDominio200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findTipiPendenzaDominio($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+descrizione', $campi = null, $abilitato = null, $associati = null, $form = null, $trasformazione = null, $descrizione = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTipiPendenzaDominio'][0])
    {
        list($response) = $this->findTipiPendenzaDominioWithHttpInfo($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $form, $trasformazione, $descrizione, $metadati_paginazione, $max_risultati, $contentType);
        return $response;
    }

    /**
     * Operation findTipiPendenzaDominioWithHttpInfo
     *
     * Elenco delle tipologie di pendenza del dominio
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+descrizione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  bool|null $trasformazione Restrizione ai soli elementi che mettono a disposizione i template di trasformazione per i tracciati CSV. (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTipiPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindTipiPendenzaDominio200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findTipiPendenzaDominioWithHttpInfo($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+descrizione', $campi = null, $abilitato = null, $associati = null, $form = null, $trasformazione = null, $descrizione = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTipiPendenzaDominio'][0])
    {
        $request = $this->findTipiPendenzaDominioRequest($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $form, $trasformazione, $descrizione, $metadati_paginazione, $max_risultati, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindTipiPendenzaDominio200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindTipiPendenzaDominio200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindTipiPendenzaDominio200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findTipiPendenzaDominioAsync
     *
     * Elenco delle tipologie di pendenza del dominio
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+descrizione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  bool|null $trasformazione Restrizione ai soli elementi che mettono a disposizione i template di trasformazione per i tracciati CSV. (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTipiPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTipiPendenzaDominioAsync($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+descrizione', $campi = null, $abilitato = null, $associati = null, $form = null, $trasformazione = null, $descrizione = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTipiPendenzaDominio'][0])
    {
        return $this->findTipiPendenzaDominioAsyncWithHttpInfo($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $form, $trasformazione, $descrizione, $metadati_paginazione, $max_risultati, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findTipiPendenzaDominioAsyncWithHttpInfo
     *
     * Elenco delle tipologie di pendenza del dominio
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+descrizione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  bool|null $trasformazione Restrizione ai soli elementi che mettono a disposizione i template di trasformazione per i tracciati CSV. (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTipiPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTipiPendenzaDominioAsyncWithHttpInfo($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+descrizione', $campi = null, $abilitato = null, $associati = null, $form = null, $trasformazione = null, $descrizione = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTipiPendenzaDominio'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindTipiPendenzaDominio200Response';
        $request = $this->findTipiPendenzaDominioRequest($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $form, $trasformazione, $descrizione, $metadati_paginazione, $max_risultati, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findTipiPendenzaDominio'
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * idEntrata (optional, default to '+descrizione')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  bool|null $form Restrizione ai soli elementi che mettono a disposizione la form di inserimento custom (optional)
     * @param  bool|null $trasformazione Restrizione ai soli elementi che mettono a disposizione i template di trasformazione per i tracciati CSV. (optional)
     * @param  string|null $descrizione Filtro sulla descrizione dell&#39;elemento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTipiPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findTipiPendenzaDominioRequest($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+descrizione', $campi = null, $abilitato = null, $associati = null, $form = null, $trasformazione = null, $descrizione = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTipiPendenzaDominio'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling findTipiPendenzaDominio'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.findTipiPendenzaDominio, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling EntiCreditoriApi.findTipiPendenzaDominio, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findTipiPendenzaDominio, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findTipiPendenzaDominio, must be bigger than or equal to 0.');
        }
        










        $resourcePath = '/domini/{idDominio}/tipiPendenza';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $abilitato,
            'abilitato', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $associati,
            'associati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $form,
            'form', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $trasformazione,
            'trasformazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $descrizione,
            'descrizione', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findUnitaOperative
     *
     * Elenco delle unità operative del beneficiario
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ragioneSociale')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  string|null $ragione_sociale filtro per Ragione Sociale (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findUnitaOperative'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindUnitaOperative200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findUnitaOperative($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+ragioneSociale', $campi = null, $abilitato = null, $associati = null, $ragione_sociale = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findUnitaOperative'][0])
    {
        list($response) = $this->findUnitaOperativeWithHttpInfo($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $ragione_sociale, $metadati_paginazione, $max_risultati, $contentType);
        return $response;
    }

    /**
     * Operation findUnitaOperativeWithHttpInfo
     *
     * Elenco delle unità operative del beneficiario
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ragioneSociale')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  string|null $ragione_sociale filtro per Ragione Sociale (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findUnitaOperative'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindUnitaOperative200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findUnitaOperativeWithHttpInfo($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+ragioneSociale', $campi = null, $abilitato = null, $associati = null, $ragione_sociale = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findUnitaOperative'][0])
    {
        $request = $this->findUnitaOperativeRequest($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $ragione_sociale, $metadati_paginazione, $max_risultati, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindUnitaOperative200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindUnitaOperative200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindUnitaOperative200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findUnitaOperativeAsync
     *
     * Elenco delle unità operative del beneficiario
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ragioneSociale')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  string|null $ragione_sociale filtro per Ragione Sociale (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findUnitaOperative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findUnitaOperativeAsync($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+ragioneSociale', $campi = null, $abilitato = null, $associati = null, $ragione_sociale = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findUnitaOperative'][0])
    {
        return $this->findUnitaOperativeAsyncWithHttpInfo($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $ragione_sociale, $metadati_paginazione, $max_risultati, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findUnitaOperativeAsyncWithHttpInfo
     *
     * Elenco delle unità operative del beneficiario
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ragioneSociale')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  string|null $ragione_sociale filtro per Ragione Sociale (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findUnitaOperative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findUnitaOperativeAsyncWithHttpInfo($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+ragioneSociale', $campi = null, $abilitato = null, $associati = null, $ragione_sociale = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findUnitaOperative'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindUnitaOperative200Response';
        $request = $this->findUnitaOperativeRequest($id_dominio, $pagina, $risultati_per_pagina, $ordinamento, $campi, $abilitato, $associati, $ragione_sociale, $metadati_paginazione, $max_risultati, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findUnitaOperative'
     *
     * @param  string $id_dominio Identificativo del dominio (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * ragioneSociale (optional, default to '+ragioneSociale')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  bool|null $abilitato Restrizione ai soli elementi abilitati o disabilitati (optional)
     * @param  bool|null $associati Restrizione ai soli elementi associati all&#39;utenza chiamante (optional)
     * @param  string|null $ragione_sociale filtro per Ragione Sociale (anche parziale) (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findUnitaOperative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findUnitaOperativeRequest($id_dominio, $pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+ragioneSociale', $campi = null, $abilitato = null, $associati = null, $ragione_sociale = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findUnitaOperative'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling findUnitaOperative'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.findUnitaOperative, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling EntiCreditoriApi.findUnitaOperative, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findUnitaOperative, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling EntiCreditoriApi.findUnitaOperative, must be bigger than or equal to 0.');
        }
        








        $resourcePath = '/domini/{idDominio}/unitaOperative';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $abilitato,
            'abilitato', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $associati,
            'associati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ragione_sociale,
            'ragioneSociale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContiAccredito
     *
     * Lettura dei dati di un iban di accredito
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $iban_accredito Iban di accredito (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContiAccredito'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\ContiAccredito|\GovPay\Backoffice\Model\FaultBean
     */
    public function getContiAccredito($id_dominio, $iban_accredito, string $contentType = self::contentTypes['getContiAccredito'][0])
    {
        list($response) = $this->getContiAccreditoWithHttpInfo($id_dominio, $iban_accredito, $contentType);
        return $response;
    }

    /**
     * Operation getContiAccreditoWithHttpInfo
     *
     * Lettura dei dati di un iban di accredito
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $iban_accredito Iban di accredito (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContiAccredito'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\ContiAccredito|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContiAccreditoWithHttpInfo($id_dominio, $iban_accredito, string $contentType = self::contentTypes['getContiAccredito'][0])
    {
        $request = $this->getContiAccreditoRequest($id_dominio, $iban_accredito, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\ContiAccredito',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\ContiAccredito',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\ContiAccredito',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getContiAccreditoAsync
     *
     * Lettura dei dati di un iban di accredito
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $iban_accredito Iban di accredito (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContiAccredito'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContiAccreditoAsync($id_dominio, $iban_accredito, string $contentType = self::contentTypes['getContiAccredito'][0])
    {
        return $this->getContiAccreditoAsyncWithHttpInfo($id_dominio, $iban_accredito, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContiAccreditoAsyncWithHttpInfo
     *
     * Lettura dei dati di un iban di accredito
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $iban_accredito Iban di accredito (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContiAccredito'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContiAccreditoAsyncWithHttpInfo($id_dominio, $iban_accredito, string $contentType = self::contentTypes['getContiAccredito'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\ContiAccredito';
        $request = $this->getContiAccreditoRequest($id_dominio, $iban_accredito, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContiAccredito'
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $iban_accredito Iban di accredito (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContiAccredito'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContiAccreditoRequest($id_dominio, $iban_accredito, string $contentType = self::contentTypes['getContiAccredito'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getContiAccredito'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.getContiAccredito, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'iban_accredito' is set
        if ($iban_accredito === null || (is_array($iban_accredito) && count($iban_accredito) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iban_accredito when calling getContiAccredito'
            );
        }
        if (!preg_match("/[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/", $iban_accredito)) {
            throw new \InvalidArgumentException("invalid value for \"iban_accredito\" when calling EntiCreditoriApi.getContiAccredito, must conform to the pattern /[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/.");
        }
        

        $resourcePath = '/domini/{idDominio}/contiAccredito/{ibanAccredito}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($iban_accredito !== null) {
            $resourcePath = str_replace(
                '{' . 'ibanAccredito' . '}',
                ObjectSerializer::toPathValue($iban_accredito),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDominio
     *
     * Lettura dei dati di un dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\Dominio|\GovPay\Backoffice\Model\FaultBean
     */
    public function getDominio($id_dominio, string $contentType = self::contentTypes['getDominio'][0])
    {
        list($response) = $this->getDominioWithHttpInfo($id_dominio, $contentType);
        return $response;
    }

    /**
     * Operation getDominioWithHttpInfo
     *
     * Lettura dei dati di un dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\Dominio|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDominioWithHttpInfo($id_dominio, string $contentType = self::contentTypes['getDominio'][0])
    {
        $request = $this->getDominioRequest($id_dominio, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\Dominio',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\Dominio',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\Dominio',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getDominioAsync
     *
     * Lettura dei dati di un dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDominioAsync($id_dominio, string $contentType = self::contentTypes['getDominio'][0])
    {
        return $this->getDominioAsyncWithHttpInfo($id_dominio, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDominioAsyncWithHttpInfo
     *
     * Lettura dei dati di un dominio beneficiario
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDominioAsyncWithHttpInfo($id_dominio, string $contentType = self::contentTypes['getDominio'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\Dominio';
        $request = $this->getDominioRequest($id_dominio, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDominio'
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDominioRequest($id_dominio, string $contentType = self::contentTypes['getDominio'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getDominio'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.getDominio, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        

        $resourcePath = '/domini/{idDominio}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEntrata
     *
     * Lettura dei dati di una tipologia di entrata
     *
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntrata'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\TipoEntrata|\GovPay\Backoffice\Model\FaultBean
     */
    public function getEntrata($id_entrata, string $contentType = self::contentTypes['getEntrata'][0])
    {
        list($response) = $this->getEntrataWithHttpInfo($id_entrata, $contentType);
        return $response;
    }

    /**
     * Operation getEntrataWithHttpInfo
     *
     * Lettura dei dati di una tipologia di entrata
     *
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntrata'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\TipoEntrata|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEntrataWithHttpInfo($id_entrata, string $contentType = self::contentTypes['getEntrata'][0])
    {
        $request = $this->getEntrataRequest($id_entrata, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\TipoEntrata',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\TipoEntrata',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\TipoEntrata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getEntrataAsync
     *
     * Lettura dei dati di una tipologia di entrata
     *
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntrata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntrataAsync($id_entrata, string $contentType = self::contentTypes['getEntrata'][0])
    {
        return $this->getEntrataAsyncWithHttpInfo($id_entrata, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEntrataAsyncWithHttpInfo
     *
     * Lettura dei dati di una tipologia di entrata
     *
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntrata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntrataAsyncWithHttpInfo($id_entrata, string $contentType = self::contentTypes['getEntrata'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\TipoEntrata';
        $request = $this->getEntrataRequest($id_entrata, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEntrata'
     *
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntrata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEntrataRequest($id_entrata, string $contentType = self::contentTypes['getEntrata'][0])
    {

        // verify the required parameter 'id_entrata' is set
        if ($id_entrata === null || (is_array($id_entrata) && count($id_entrata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_entrata when calling getEntrata'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", $id_entrata)) {
            throw new \InvalidArgumentException("invalid value for \"id_entrata\" when calling EntiCreditoriApi.getEntrata, must conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.");
        }
        

        $resourcePath = '/entrate/{idEntrata}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_entrata !== null) {
            $resourcePath = str_replace(
                '{' . 'idEntrata' . '}',
                ObjectSerializer::toPathValue($id_entrata),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEntrataDominio
     *
     * Lettura dei dati di una entrata
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntrataDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\Entrata|\GovPay\Backoffice\Model\FaultBean
     */
    public function getEntrataDominio($id_dominio, $id_entrata, string $contentType = self::contentTypes['getEntrataDominio'][0])
    {
        list($response) = $this->getEntrataDominioWithHttpInfo($id_dominio, $id_entrata, $contentType);
        return $response;
    }

    /**
     * Operation getEntrataDominioWithHttpInfo
     *
     * Lettura dei dati di una entrata
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntrataDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\Entrata|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEntrataDominioWithHttpInfo($id_dominio, $id_entrata, string $contentType = self::contentTypes['getEntrataDominio'][0])
    {
        $request = $this->getEntrataDominioRequest($id_dominio, $id_entrata, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\Entrata',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\Entrata',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\Entrata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getEntrataDominioAsync
     *
     * Lettura dei dati di una entrata
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntrataDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntrataDominioAsync($id_dominio, $id_entrata, string $contentType = self::contentTypes['getEntrataDominio'][0])
    {
        return $this->getEntrataDominioAsyncWithHttpInfo($id_dominio, $id_entrata, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEntrataDominioAsyncWithHttpInfo
     *
     * Lettura dei dati di una entrata
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntrataDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntrataDominioAsyncWithHttpInfo($id_dominio, $id_entrata, string $contentType = self::contentTypes['getEntrataDominio'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\Entrata';
        $request = $this->getEntrataDominioRequest($id_dominio, $id_entrata, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEntrataDominio'
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_entrata Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntrataDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEntrataDominioRequest($id_dominio, $id_entrata, string $contentType = self::contentTypes['getEntrataDominio'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getEntrataDominio'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.getEntrataDominio, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'id_entrata' is set
        if ($id_entrata === null || (is_array($id_entrata) && count($id_entrata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_entrata when calling getEntrataDominio'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", $id_entrata)) {
            throw new \InvalidArgumentException("invalid value for \"id_entrata\" when calling EntiCreditoriApi.getEntrataDominio, must conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.");
        }
        

        $resourcePath = '/domini/{idDominio}/entrate/{idEntrata}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($id_entrata !== null) {
            $resourcePath = str_replace(
                '{' . 'idEntrata' . '}',
                ObjectSerializer::toPathValue($id_entrata),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIntermediario
     *
     * Informazioni di un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIntermediario'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\Intermediario|\GovPay\Backoffice\Model\FaultBean
     */
    public function getIntermediario($id_intermediario, string $contentType = self::contentTypes['getIntermediario'][0])
    {
        list($response) = $this->getIntermediarioWithHttpInfo($id_intermediario, $contentType);
        return $response;
    }

    /**
     * Operation getIntermediarioWithHttpInfo
     *
     * Informazioni di un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIntermediario'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\Intermediario|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIntermediarioWithHttpInfo($id_intermediario, string $contentType = self::contentTypes['getIntermediario'][0])
    {
        $request = $this->getIntermediarioRequest($id_intermediario, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\Intermediario',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\Intermediario',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\Intermediario',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getIntermediarioAsync
     *
     * Informazioni di un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIntermediario'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIntermediarioAsync($id_intermediario, string $contentType = self::contentTypes['getIntermediario'][0])
    {
        return $this->getIntermediarioAsyncWithHttpInfo($id_intermediario, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIntermediarioAsyncWithHttpInfo
     *
     * Informazioni di un intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIntermediario'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIntermediarioAsyncWithHttpInfo($id_intermediario, string $contentType = self::contentTypes['getIntermediario'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\Intermediario';
        $request = $this->getIntermediarioRequest($id_intermediario, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIntermediario'
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIntermediario'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIntermediarioRequest($id_intermediario, string $contentType = self::contentTypes['getIntermediario'][0])
    {

        // verify the required parameter 'id_intermediario' is set
        if ($id_intermediario === null || (is_array($id_intermediario) && count($id_intermediario) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_intermediario when calling getIntermediario'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_intermediario)) {
            throw new \InvalidArgumentException("invalid value for \"id_intermediario\" when calling EntiCreditoriApi.getIntermediario, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        

        $resourcePath = '/intermediari/{idIntermediario}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_intermediario !== null) {
            $resourcePath = str_replace(
                '{' . 'idIntermediario' . '}',
                ObjectSerializer::toPathValue($id_intermediario),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStazione
     *
     * Informazioni di una stazione intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $id_stazione Identificativo della stazione (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStazione'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\Stazione|\GovPay\Backoffice\Model\FaultBean
     */
    public function getStazione($id_intermediario, $id_stazione, string $contentType = self::contentTypes['getStazione'][0])
    {
        list($response) = $this->getStazioneWithHttpInfo($id_intermediario, $id_stazione, $contentType);
        return $response;
    }

    /**
     * Operation getStazioneWithHttpInfo
     *
     * Informazioni di una stazione intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $id_stazione Identificativo della stazione (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStazione'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\Stazione|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStazioneWithHttpInfo($id_intermediario, $id_stazione, string $contentType = self::contentTypes['getStazione'][0])
    {
        $request = $this->getStazioneRequest($id_intermediario, $id_stazione, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\Stazione',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\Stazione',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\Stazione',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getStazioneAsync
     *
     * Informazioni di una stazione intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $id_stazione Identificativo della stazione (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStazione'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStazioneAsync($id_intermediario, $id_stazione, string $contentType = self::contentTypes['getStazione'][0])
    {
        return $this->getStazioneAsyncWithHttpInfo($id_intermediario, $id_stazione, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStazioneAsyncWithHttpInfo
     *
     * Informazioni di una stazione intermediario
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $id_stazione Identificativo della stazione (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStazione'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStazioneAsyncWithHttpInfo($id_intermediario, $id_stazione, string $contentType = self::contentTypes['getStazione'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\Stazione';
        $request = $this->getStazioneRequest($id_intermediario, $id_stazione, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStazione'
     *
     * @param  string $id_intermediario Identificativo dell&#39;intermediario (required)
     * @param  string $id_stazione Identificativo della stazione (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStazione'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStazioneRequest($id_intermediario, $id_stazione, string $contentType = self::contentTypes['getStazione'][0])
    {

        // verify the required parameter 'id_intermediario' is set
        if ($id_intermediario === null || (is_array($id_intermediario) && count($id_intermediario) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_intermediario when calling getStazione'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_intermediario)) {
            throw new \InvalidArgumentException("invalid value for \"id_intermediario\" when calling EntiCreditoriApi.getStazione, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'id_stazione' is set
        if ($id_stazione === null || (is_array($id_stazione) && count($id_stazione) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_stazione when calling getStazione'
            );
        }
        if (!preg_match("/(^([0-9]){11}_([0-9]){2}$)/", $id_stazione)) {
            throw new \InvalidArgumentException("invalid value for \"id_stazione\" when calling EntiCreditoriApi.getStazione, must conform to the pattern /(^([0-9]){11}_([0-9]){2}$)/.");
        }
        

        $resourcePath = '/intermediari/{idIntermediario}/stazioni/{idStazione}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_intermediario !== null) {
            $resourcePath = str_replace(
                '{' . 'idIntermediario' . '}',
                ObjectSerializer::toPathValue($id_intermediario),
                $resourcePath
            );
        }
        // path params
        if ($id_stazione !== null) {
            $resourcePath = str_replace(
                '{' . 'idStazione' . '}',
                ObjectSerializer::toPathValue($id_stazione),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTipoPendenza
     *
     * Lettura dei dati di una tipologia di pendenza
     *
     * @param  string $id_tipo_pendenza Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTipoPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\TipoPendenza|\GovPay\Backoffice\Model\FaultBean
     */
    public function getTipoPendenza($id_tipo_pendenza, string $contentType = self::contentTypes['getTipoPendenza'][0])
    {
        list($response) = $this->getTipoPendenzaWithHttpInfo($id_tipo_pendenza, $contentType);
        return $response;
    }

    /**
     * Operation getTipoPendenzaWithHttpInfo
     *
     * Lettura dei dati di una tipologia di pendenza
     *
     * @param  string $id_tipo_pendenza Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTipoPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\TipoPendenza|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTipoPendenzaWithHttpInfo($id_tipo_pendenza, string $contentType = self::contentTypes['getTipoPendenza'][0])
    {
        $request = $this->getTipoPendenzaRequest($id_tipo_pendenza, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\TipoPendenza',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\TipoPendenza',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\TipoPendenza',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTipoPendenzaAsync
     *
     * Lettura dei dati di una tipologia di pendenza
     *
     * @param  string $id_tipo_pendenza Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTipoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTipoPendenzaAsync($id_tipo_pendenza, string $contentType = self::contentTypes['getTipoPendenza'][0])
    {
        return $this->getTipoPendenzaAsyncWithHttpInfo($id_tipo_pendenza, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTipoPendenzaAsyncWithHttpInfo
     *
     * Lettura dei dati di una tipologia di pendenza
     *
     * @param  string $id_tipo_pendenza Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTipoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTipoPendenzaAsyncWithHttpInfo($id_tipo_pendenza, string $contentType = self::contentTypes['getTipoPendenza'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\TipoPendenza';
        $request = $this->getTipoPendenzaRequest($id_tipo_pendenza, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTipoPendenza'
     *
     * @param  string $id_tipo_pendenza Identificativo della tipologia di entrata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTipoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTipoPendenzaRequest($id_tipo_pendenza, string $contentType = self::contentTypes['getTipoPendenza'][0])
    {

        // verify the required parameter 'id_tipo_pendenza' is set
        if ($id_tipo_pendenza === null || (is_array($id_tipo_pendenza) && count($id_tipo_pendenza) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_tipo_pendenza when calling getTipoPendenza'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", $id_tipo_pendenza)) {
            throw new \InvalidArgumentException("invalid value for \"id_tipo_pendenza\" when calling EntiCreditoriApi.getTipoPendenza, must conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.");
        }
        

        $resourcePath = '/tipiPendenza/{idTipoPendenza}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_tipo_pendenza !== null) {
            $resourcePath = str_replace(
                '{' . 'idTipoPendenza' . '}',
                ObjectSerializer::toPathValue($id_tipo_pendenza),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTipoPendenzaDominio
     *
     * Lettura dei dati di una tipologia di pendenza del dominio
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia di pendenza (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTipoPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\TipoPendenzaDominio|\GovPay\Backoffice\Model\FaultBean
     */
    public function getTipoPendenzaDominio($id_dominio, $id_tipo_pendenza, string $contentType = self::contentTypes['getTipoPendenzaDominio'][0])
    {
        list($response) = $this->getTipoPendenzaDominioWithHttpInfo($id_dominio, $id_tipo_pendenza, $contentType);
        return $response;
    }

    /**
     * Operation getTipoPendenzaDominioWithHttpInfo
     *
     * Lettura dei dati di una tipologia di pendenza del dominio
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia di pendenza (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTipoPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\TipoPendenzaDominio|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTipoPendenzaDominioWithHttpInfo($id_dominio, $id_tipo_pendenza, string $contentType = self::contentTypes['getTipoPendenzaDominio'][0])
    {
        $request = $this->getTipoPendenzaDominioRequest($id_dominio, $id_tipo_pendenza, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\TipoPendenzaDominio',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\TipoPendenzaDominio',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\TipoPendenzaDominio',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTipoPendenzaDominioAsync
     *
     * Lettura dei dati di una tipologia di pendenza del dominio
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia di pendenza (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTipoPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTipoPendenzaDominioAsync($id_dominio, $id_tipo_pendenza, string $contentType = self::contentTypes['getTipoPendenzaDominio'][0])
    {
        return $this->getTipoPendenzaDominioAsyncWithHttpInfo($id_dominio, $id_tipo_pendenza, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTipoPendenzaDominioAsyncWithHttpInfo
     *
     * Lettura dei dati di una tipologia di pendenza del dominio
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia di pendenza (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTipoPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTipoPendenzaDominioAsyncWithHttpInfo($id_dominio, $id_tipo_pendenza, string $contentType = self::contentTypes['getTipoPendenzaDominio'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\TipoPendenzaDominio';
        $request = $this->getTipoPendenzaDominioRequest($id_dominio, $id_tipo_pendenza, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTipoPendenzaDominio'
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia di pendenza (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTipoPendenzaDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTipoPendenzaDominioRequest($id_dominio, $id_tipo_pendenza, string $contentType = self::contentTypes['getTipoPendenzaDominio'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getTipoPendenzaDominio'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.getTipoPendenzaDominio, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'id_tipo_pendenza' is set
        if ($id_tipo_pendenza === null || (is_array($id_tipo_pendenza) && count($id_tipo_pendenza) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_tipo_pendenza when calling getTipoPendenzaDominio'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", $id_tipo_pendenza)) {
            throw new \InvalidArgumentException("invalid value for \"id_tipo_pendenza\" when calling EntiCreditoriApi.getTipoPendenzaDominio, must conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.");
        }
        

        $resourcePath = '/domini/{idDominio}/tipiPendenza/{idTipoPendenza}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($id_tipo_pendenza !== null) {
            $resourcePath = str_replace(
                '{' . 'idTipoPendenza' . '}',
                ObjectSerializer::toPathValue($id_tipo_pendenza),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUnitaOperativa
     *
     * Lettura dei dati di una unità operativa
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_unita_operativa Identificativo dell&#39;unità operativa (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnitaOperativa'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\UnitaOperativa|\GovPay\Backoffice\Model\FaultBean
     */
    public function getUnitaOperativa($id_dominio, $id_unita_operativa, string $contentType = self::contentTypes['getUnitaOperativa'][0])
    {
        list($response) = $this->getUnitaOperativaWithHttpInfo($id_dominio, $id_unita_operativa, $contentType);
        return $response;
    }

    /**
     * Operation getUnitaOperativaWithHttpInfo
     *
     * Lettura dei dati di una unità operativa
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_unita_operativa Identificativo dell&#39;unità operativa (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnitaOperativa'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\UnitaOperativa|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUnitaOperativaWithHttpInfo($id_dominio, $id_unita_operativa, string $contentType = self::contentTypes['getUnitaOperativa'][0])
    {
        $request = $this->getUnitaOperativaRequest($id_dominio, $id_unita_operativa, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\UnitaOperativa',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\UnitaOperativa',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\UnitaOperativa',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUnitaOperativaAsync
     *
     * Lettura dei dati di una unità operativa
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_unita_operativa Identificativo dell&#39;unità operativa (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnitaOperativa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnitaOperativaAsync($id_dominio, $id_unita_operativa, string $contentType = self::contentTypes['getUnitaOperativa'][0])
    {
        return $this->getUnitaOperativaAsyncWithHttpInfo($id_dominio, $id_unita_operativa, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUnitaOperativaAsyncWithHttpInfo
     *
     * Lettura dei dati di una unità operativa
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_unita_operativa Identificativo dell&#39;unità operativa (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnitaOperativa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnitaOperativaAsyncWithHttpInfo($id_dominio, $id_unita_operativa, string $contentType = self::contentTypes['getUnitaOperativa'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\UnitaOperativa';
        $request = $this->getUnitaOperativaRequest($id_dominio, $id_unita_operativa, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUnitaOperativa'
     *
     * @param  string $id_dominio Codice fiscale del beneficiario (required)
     * @param  string $id_unita_operativa Identificativo dell&#39;unità operativa (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUnitaOperativa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUnitaOperativaRequest($id_dominio, $id_unita_operativa, string $contentType = self::contentTypes['getUnitaOperativa'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getUnitaOperativa'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling EntiCreditoriApi.getUnitaOperativa, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'id_unita_operativa' is set
        if ($id_unita_operativa === null || (is_array($id_unita_operativa) && count($id_unita_operativa) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_unita_operativa when calling getUnitaOperativa'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_]{1,35}$)/", $id_unita_operativa)) {
            throw new \InvalidArgumentException("invalid value for \"id_unita_operativa\" when calling EntiCreditoriApi.getUnitaOperativa, must conform to the pattern /(^[a-zA-Z0-9\\-_]{1,35}$)/.");
        }
        

        $resourcePath = '/domini/{idDominio}/unitaOperative/{idUnitaOperativa}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($id_unita_operativa !== null) {
            $resourcePath = str_replace(
                '{' . 'idUnitaOperativa' . '}',
                ObjectSerializer::toPathValue($id_unita_operativa),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}

<?php
/**
 * PendenzeApi
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use GovPay\Backoffice\ApiException;
use GovPay\Backoffice\Configuration;
use GovPay\Backoffice\FormDataProcessor;
use GovPay\Backoffice\HeaderSelector;
use GovPay\Backoffice\ObjectSerializer;

/**
 * PendenzeApi Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PendenzeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addPendenza' => [
            'application/json',
        ],
        'addPendenzaCustom' => [
            'application/json',
        ],
        'addPendenzaPOST' => [
            'application/json',
        ],
        'addTracciatoPendenze' => [
            'application/json',
            'multipart/form-data',
        ],
        'addTracciatoPendenzeDominio' => [
            'text/csv',
            'multipart/form-data',
        ],
        'addTracciatoPendenzeDominioTipoPendenza' => [
            'text/csv',
            'multipart/form-data',
        ],
        'findOperazioniTracciatoPendenze' => [
            'application/json',
        ],
        'findPendenze' => [
            'application/json',
        ],
        'findTracciatiPendenze' => [
            'application/json',
        ],
        'getAllegatoPendenza' => [
            'application/json',
        ],
        'getAvvisiDocumento' => [
            'application/json',
        ],
        'getAvviso' => [
            'application/json',
        ],
        'getEsitoTracciatoPendenze' => [
            'application/json',
        ],
        'getPendenza' => [
            'application/json',
        ],
        'getPendenzaByAvviso' => [
            'application/json',
        ],
        'getRichiestaTracciatoPendenze' => [
            'application/json',
        ],
        'getStampeTracciatoPendenze' => [
            'application/json',
        ],
        'getTracciatoPendenze' => [
            'application/json',
        ],
        'updatePendenza' => [
            'application/json-patch+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addPendenza
     *
     * Aggiunge una nuova Pendenza
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  \GovPay\Backoffice\Model\PendenzaPut|null $pendenza_put pendenza_put (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean
     */
    public function addPendenza($id_a2_a, $id_pendenza, $stampa_avviso = false, $pendenza_put = null, string $contentType = self::contentTypes['addPendenza'][0])
    {
        list($response) = $this->addPendenzaWithHttpInfo($id_a2_a, $id_pendenza, $stampa_avviso, $pendenza_put, $contentType);
        return $response;
    }

    /**
     * Operation addPendenzaWithHttpInfo
     *
     * Aggiunge una nuova Pendenza
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  \GovPay\Backoffice\Model\PendenzaPut|null $pendenza_put (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPendenzaWithHttpInfo($id_a2_a, $id_pendenza, $stampa_avviso = false, $pendenza_put = null, string $contentType = self::contentTypes['addPendenza'][0])
    {
        $request = $this->addPendenzaRequest($id_a2_a, $id_pendenza, $stampa_avviso, $pendenza_put, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\PendenzaCreata',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addPendenzaAsync
     *
     * Aggiunge una nuova Pendenza
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  \GovPay\Backoffice\Model\PendenzaPut|null $pendenza_put (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPendenzaAsync($id_a2_a, $id_pendenza, $stampa_avviso = false, $pendenza_put = null, string $contentType = self::contentTypes['addPendenza'][0])
    {
        return $this->addPendenzaAsyncWithHttpInfo($id_a2_a, $id_pendenza, $stampa_avviso, $pendenza_put, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPendenzaAsyncWithHttpInfo
     *
     * Aggiunge una nuova Pendenza
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  \GovPay\Backoffice\Model\PendenzaPut|null $pendenza_put (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPendenzaAsyncWithHttpInfo($id_a2_a, $id_pendenza, $stampa_avviso = false, $pendenza_put = null, string $contentType = self::contentTypes['addPendenza'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\PendenzaCreata';
        $request = $this->addPendenzaRequest($id_a2_a, $id_pendenza, $stampa_avviso, $pendenza_put, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPendenza'
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  \GovPay\Backoffice\Model\PendenzaPut|null $pendenza_put (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addPendenzaRequest($id_a2_a, $id_pendenza, $stampa_avviso = false, $pendenza_put = null, string $contentType = self::contentTypes['addPendenza'][0])
    {

        // verify the required parameter 'id_a2_a' is set
        if ($id_a2_a === null || (is_array($id_a2_a) && count($id_a2_a) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_a2_a when calling addPendenza'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_]{1,35}$)/", $id_a2_a)) {
            throw new \InvalidArgumentException("invalid value for \"id_a2_a\" when calling PendenzeApi.addPendenza, must conform to the pattern /(^[a-zA-Z0-9\\-_]{1,35}$)/.");
        }
        
        // verify the required parameter 'id_pendenza' is set
        if ($id_pendenza === null || (is_array($id_pendenza) && count($id_pendenza) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_pendenza when calling addPendenza'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_]{1,35}$)/", $id_pendenza)) {
            throw new \InvalidArgumentException("invalid value for \"id_pendenza\" when calling PendenzeApi.addPendenza, must conform to the pattern /(^[a-zA-Z0-9\\-_]{1,35}$)/.");
        }
        



        $resourcePath = '/pendenze/{idA2A}/{idPendenza}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stampa_avviso,
            'stampaAvviso', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_a2_a !== null) {
            $resourcePath = str_replace(
                '{' . 'idA2A' . '}',
                ObjectSerializer::toPathValue($id_a2_a),
                $resourcePath
            );
        }
        // path params
        if ($id_pendenza !== null) {
            $resourcePath = str_replace(
                '{' . 'idPendenza' . '}',
                ObjectSerializer::toPathValue($id_pendenza),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pendenza_put)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pendenza_put));
            } else {
                $httpBody = $pendenza_put;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addPendenzaCustom
     *
     * Aggiunge una nuova Pendenza in formato custom
     *
     * @param  string $id_dominio Identificativo dell&#39;ente creditore (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia pendenza (required)
     * @param  string|null $id_unita_operativa Identificativo dell&#39;unita&#39; operativa (optional)
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  object|null $body Pendenza di tipo custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenzaCustom'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean
     */
    public function addPendenzaCustom($id_dominio, $id_tipo_pendenza, $id_unita_operativa = null, $stampa_avviso = false, $body = null, string $contentType = self::contentTypes['addPendenzaCustom'][0])
    {
        list($response) = $this->addPendenzaCustomWithHttpInfo($id_dominio, $id_tipo_pendenza, $id_unita_operativa, $stampa_avviso, $body, $contentType);
        return $response;
    }

    /**
     * Operation addPendenzaCustomWithHttpInfo
     *
     * Aggiunge una nuova Pendenza in formato custom
     *
     * @param  string $id_dominio Identificativo dell&#39;ente creditore (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia pendenza (required)
     * @param  string|null $id_unita_operativa Identificativo dell&#39;unita&#39; operativa (optional)
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  object|null $body Pendenza di tipo custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenzaCustom'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPendenzaCustomWithHttpInfo($id_dominio, $id_tipo_pendenza, $id_unita_operativa = null, $stampa_avviso = false, $body = null, string $contentType = self::contentTypes['addPendenzaCustom'][0])
    {
        $request = $this->addPendenzaCustomRequest($id_dominio, $id_tipo_pendenza, $id_unita_operativa, $stampa_avviso, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\PendenzaCreata',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addPendenzaCustomAsync
     *
     * Aggiunge una nuova Pendenza in formato custom
     *
     * @param  string $id_dominio Identificativo dell&#39;ente creditore (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia pendenza (required)
     * @param  string|null $id_unita_operativa Identificativo dell&#39;unita&#39; operativa (optional)
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  object|null $body Pendenza di tipo custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenzaCustom'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPendenzaCustomAsync($id_dominio, $id_tipo_pendenza, $id_unita_operativa = null, $stampa_avviso = false, $body = null, string $contentType = self::contentTypes['addPendenzaCustom'][0])
    {
        return $this->addPendenzaCustomAsyncWithHttpInfo($id_dominio, $id_tipo_pendenza, $id_unita_operativa, $stampa_avviso, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPendenzaCustomAsyncWithHttpInfo
     *
     * Aggiunge una nuova Pendenza in formato custom
     *
     * @param  string $id_dominio Identificativo dell&#39;ente creditore (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia pendenza (required)
     * @param  string|null $id_unita_operativa Identificativo dell&#39;unita&#39; operativa (optional)
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  object|null $body Pendenza di tipo custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenzaCustom'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPendenzaCustomAsyncWithHttpInfo($id_dominio, $id_tipo_pendenza, $id_unita_operativa = null, $stampa_avviso = false, $body = null, string $contentType = self::contentTypes['addPendenzaCustom'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\PendenzaCreata';
        $request = $this->addPendenzaCustomRequest($id_dominio, $id_tipo_pendenza, $id_unita_operativa, $stampa_avviso, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPendenzaCustom'
     *
     * @param  string $id_dominio Identificativo dell&#39;ente creditore (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia pendenza (required)
     * @param  string|null $id_unita_operativa Identificativo dell&#39;unita&#39; operativa (optional)
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  object|null $body Pendenza di tipo custom (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenzaCustom'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addPendenzaCustomRequest($id_dominio, $id_tipo_pendenza, $id_unita_operativa = null, $stampa_avviso = false, $body = null, string $contentType = self::contentTypes['addPendenzaCustom'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling addPendenzaCustom'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PendenzeApi.addPendenzaCustom, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'id_tipo_pendenza' is set
        if ($id_tipo_pendenza === null || (is_array($id_tipo_pendenza) && count($id_tipo_pendenza) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_tipo_pendenza when calling addPendenzaCustom'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", $id_tipo_pendenza)) {
            throw new \InvalidArgumentException("invalid value for \"id_tipo_pendenza\" when calling PendenzeApi.addPendenzaCustom, must conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.");
        }
        




        $resourcePath = '/pendenze/{idDominio}/{idTipoPendenza}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_unita_operativa,
            'idUnitaOperativa', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stampa_avviso,
            'stampaAvviso', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($id_tipo_pendenza !== null) {
            $resourcePath = str_replace(
                '{' . 'idTipoPendenza' . '}',
                ObjectSerializer::toPathValue($id_tipo_pendenza),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addPendenzaPOST
     *
     * Aggiunge una nuova Pendenza
     *
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  \GovPay\Backoffice\Model\PendenzaPost|null $pendenza_post pendenza_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenzaPOST'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean
     */
    public function addPendenzaPOST($stampa_avviso = false, $pendenza_post = null, string $contentType = self::contentTypes['addPendenzaPOST'][0])
    {
        list($response) = $this->addPendenzaPOSTWithHttpInfo($stampa_avviso, $pendenza_post, $contentType);
        return $response;
    }

    /**
     * Operation addPendenzaPOSTWithHttpInfo
     *
     * Aggiunge una nuova Pendenza
     *
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  \GovPay\Backoffice\Model\PendenzaPost|null $pendenza_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenzaPOST'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\PendenzaCreata|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPendenzaPOSTWithHttpInfo($stampa_avviso = false, $pendenza_post = null, string $contentType = self::contentTypes['addPendenzaPOST'][0])
    {
        $request = $this->addPendenzaPOSTRequest($stampa_avviso, $pendenza_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\PendenzaCreata',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\PendenzaCreata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addPendenzaPOSTAsync
     *
     * Aggiunge una nuova Pendenza
     *
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  \GovPay\Backoffice\Model\PendenzaPost|null $pendenza_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenzaPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPendenzaPOSTAsync($stampa_avviso = false, $pendenza_post = null, string $contentType = self::contentTypes['addPendenzaPOST'][0])
    {
        return $this->addPendenzaPOSTAsyncWithHttpInfo($stampa_avviso, $pendenza_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPendenzaPOSTAsyncWithHttpInfo
     *
     * Aggiunge una nuova Pendenza
     *
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  \GovPay\Backoffice\Model\PendenzaPost|null $pendenza_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenzaPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPendenzaPOSTAsyncWithHttpInfo($stampa_avviso = false, $pendenza_post = null, string $contentType = self::contentTypes['addPendenzaPOST'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\PendenzaCreata';
        $request = $this->addPendenzaPOSTRequest($stampa_avviso, $pendenza_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPendenzaPOST'
     *
     * @param  bool|null $stampa_avviso Indica se nella risposta deve essere inclusa la stampa dell&#39;avviso in standard AgID (optional, default to false)
     * @param  \GovPay\Backoffice\Model\PendenzaPost|null $pendenza_post (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPendenzaPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addPendenzaPOSTRequest($stampa_avviso = false, $pendenza_post = null, string $contentType = self::contentTypes['addPendenzaPOST'][0])
    {




        $resourcePath = '/pendenze';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stampa_avviso,
            'stampaAvviso', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pendenza_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pendenza_post));
            } else {
                $httpBody = $pendenza_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addTracciatoPendenze
     *
     * Aggiunge un nuovo Tracciato di Pendenze
     *
     * @param  \GovPay\Backoffice\Model\TracciatoPendenzePost $tracciato_pendenze_post Tracciato Pendenze in formato JSON (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\TracciatoPendenzeIndex|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean
     */
    public function addTracciatoPendenze($tracciato_pendenze_post, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenze'][0])
    {
        list($response) = $this->addTracciatoPendenzeWithHttpInfo($tracciato_pendenze_post, $stampa_avvisi, $contentType);
        return $response;
    }

    /**
     * Operation addTracciatoPendenzeWithHttpInfo
     *
     * Aggiunge un nuovo Tracciato di Pendenze
     *
     * @param  \GovPay\Backoffice\Model\TracciatoPendenzePost $tracciato_pendenze_post Tracciato Pendenze in formato JSON (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\TracciatoPendenzeIndex|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTracciatoPendenzeWithHttpInfo($tracciato_pendenze_post, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenze'][0])
    {
        $request = $this->addTracciatoPendenzeRequest($tracciato_pendenze_post, $stampa_avvisi, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\TracciatoPendenzeIndex',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\TracciatoPendenzeIndex',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\TracciatoPendenzeIndex',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addTracciatoPendenzeAsync
     *
     * Aggiunge un nuovo Tracciato di Pendenze
     *
     * @param  \GovPay\Backoffice\Model\TracciatoPendenzePost $tracciato_pendenze_post Tracciato Pendenze in formato JSON (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTracciatoPendenzeAsync($tracciato_pendenze_post, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenze'][0])
    {
        return $this->addTracciatoPendenzeAsyncWithHttpInfo($tracciato_pendenze_post, $stampa_avvisi, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTracciatoPendenzeAsyncWithHttpInfo
     *
     * Aggiunge un nuovo Tracciato di Pendenze
     *
     * @param  \GovPay\Backoffice\Model\TracciatoPendenzePost $tracciato_pendenze_post Tracciato Pendenze in formato JSON (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTracciatoPendenzeAsyncWithHttpInfo($tracciato_pendenze_post, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenze'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\TracciatoPendenzeIndex';
        $request = $this->addTracciatoPendenzeRequest($tracciato_pendenze_post, $stampa_avvisi, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTracciatoPendenze'
     *
     * @param  \GovPay\Backoffice\Model\TracciatoPendenzePost $tracciato_pendenze_post Tracciato Pendenze in formato JSON (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addTracciatoPendenzeRequest($tracciato_pendenze_post, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenze'][0])
    {

        // verify the required parameter 'tracciato_pendenze_post' is set
        if ($tracciato_pendenze_post === null || (is_array($tracciato_pendenze_post) && count($tracciato_pendenze_post) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracciato_pendenze_post when calling addTracciatoPendenze'
            );
        }



        $resourcePath = '/pendenze/tracciati';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stampa_avvisi,
            'stampaAvvisi', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tracciato_pendenze_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tracciato_pendenze_post));
            } else {
                $httpBody = $tracciato_pendenze_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addTracciatoPendenzeDominio
     *
     * Aggiunge un nuovo Tracciato di Pendenze in formato csv
     *
     * @param  string $id_dominio Identificativo dente creditore (required)
     * @param  object $body Tracciato Pendenze in formato CSV (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenzeDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\TracciatoPendenzeIndex|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean
     */
    public function addTracciatoPendenzeDominio($id_dominio, $body, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenzeDominio'][0])
    {
        list($response) = $this->addTracciatoPendenzeDominioWithHttpInfo($id_dominio, $body, $stampa_avvisi, $contentType);
        return $response;
    }

    /**
     * Operation addTracciatoPendenzeDominioWithHttpInfo
     *
     * Aggiunge un nuovo Tracciato di Pendenze in formato csv
     *
     * @param  string $id_dominio Identificativo dente creditore (required)
     * @param  object $body Tracciato Pendenze in formato CSV (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenzeDominio'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\TracciatoPendenzeIndex|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTracciatoPendenzeDominioWithHttpInfo($id_dominio, $body, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenzeDominio'][0])
    {
        $request = $this->addTracciatoPendenzeDominioRequest($id_dominio, $body, $stampa_avvisi, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\TracciatoPendenzeIndex',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\TracciatoPendenzeIndex',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\TracciatoPendenzeIndex',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addTracciatoPendenzeDominioAsync
     *
     * Aggiunge un nuovo Tracciato di Pendenze in formato csv
     *
     * @param  string $id_dominio Identificativo dente creditore (required)
     * @param  object $body Tracciato Pendenze in formato CSV (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenzeDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTracciatoPendenzeDominioAsync($id_dominio, $body, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenzeDominio'][0])
    {
        return $this->addTracciatoPendenzeDominioAsyncWithHttpInfo($id_dominio, $body, $stampa_avvisi, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTracciatoPendenzeDominioAsyncWithHttpInfo
     *
     * Aggiunge un nuovo Tracciato di Pendenze in formato csv
     *
     * @param  string $id_dominio Identificativo dente creditore (required)
     * @param  object $body Tracciato Pendenze in formato CSV (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenzeDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTracciatoPendenzeDominioAsyncWithHttpInfo($id_dominio, $body, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenzeDominio'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\TracciatoPendenzeIndex';
        $request = $this->addTracciatoPendenzeDominioRequest($id_dominio, $body, $stampa_avvisi, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTracciatoPendenzeDominio'
     *
     * @param  string $id_dominio Identificativo dente creditore (required)
     * @param  object $body Tracciato Pendenze in formato CSV (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenzeDominio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addTracciatoPendenzeDominioRequest($id_dominio, $body, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenzeDominio'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling addTracciatoPendenzeDominio'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PendenzeApi.addTracciatoPendenzeDominio, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addTracciatoPendenzeDominio'
            );
        }



        $resourcePath = '/pendenze/tracciati/{idDominio}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stampa_avvisi,
            'stampaAvvisi', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addTracciatoPendenzeDominioTipoPendenza
     *
     * Aggiunge un nuovo Tracciato di Pendenze in formato csv
     *
     * @param  string $id_dominio Identificativo dente creditore (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia pendenza (required)
     * @param  object $body Tracciato Pendenze in formato CSV (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenzeDominioTipoPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\TracciatoPendenzeIndex|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean
     */
    public function addTracciatoPendenzeDominioTipoPendenza($id_dominio, $id_tipo_pendenza, $body, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenzeDominioTipoPendenza'][0])
    {
        list($response) = $this->addTracciatoPendenzeDominioTipoPendenzaWithHttpInfo($id_dominio, $id_tipo_pendenza, $body, $stampa_avvisi, $contentType);
        return $response;
    }

    /**
     * Operation addTracciatoPendenzeDominioTipoPendenzaWithHttpInfo
     *
     * Aggiunge un nuovo Tracciato di Pendenze in formato csv
     *
     * @param  string $id_dominio Identificativo dente creditore (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia pendenza (required)
     * @param  object $body Tracciato Pendenze in formato CSV (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenzeDominioTipoPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\TracciatoPendenzeIndex|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTracciatoPendenzeDominioTipoPendenzaWithHttpInfo($id_dominio, $id_tipo_pendenza, $body, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenzeDominioTipoPendenza'][0])
    {
        $request = $this->addTracciatoPendenzeDominioTipoPendenzaRequest($id_dominio, $id_tipo_pendenza, $body, $stampa_avvisi, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\TracciatoPendenzeIndex',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\TracciatoPendenzeIndex',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\TracciatoPendenzeIndex',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addTracciatoPendenzeDominioTipoPendenzaAsync
     *
     * Aggiunge un nuovo Tracciato di Pendenze in formato csv
     *
     * @param  string $id_dominio Identificativo dente creditore (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia pendenza (required)
     * @param  object $body Tracciato Pendenze in formato CSV (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenzeDominioTipoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTracciatoPendenzeDominioTipoPendenzaAsync($id_dominio, $id_tipo_pendenza, $body, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenzeDominioTipoPendenza'][0])
    {
        return $this->addTracciatoPendenzeDominioTipoPendenzaAsyncWithHttpInfo($id_dominio, $id_tipo_pendenza, $body, $stampa_avvisi, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTracciatoPendenzeDominioTipoPendenzaAsyncWithHttpInfo
     *
     * Aggiunge un nuovo Tracciato di Pendenze in formato csv
     *
     * @param  string $id_dominio Identificativo dente creditore (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia pendenza (required)
     * @param  object $body Tracciato Pendenze in formato CSV (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenzeDominioTipoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTracciatoPendenzeDominioTipoPendenzaAsyncWithHttpInfo($id_dominio, $id_tipo_pendenza, $body, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenzeDominioTipoPendenza'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\TracciatoPendenzeIndex';
        $request = $this->addTracciatoPendenzeDominioTipoPendenzaRequest($id_dominio, $id_tipo_pendenza, $body, $stampa_avvisi, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTracciatoPendenzeDominioTipoPendenza'
     *
     * @param  string $id_dominio Identificativo dente creditore (required)
     * @param  string $id_tipo_pendenza Identificativo della tipologia pendenza (required)
     * @param  object $body Tracciato Pendenze in formato CSV (required)
     * @param  bool|null $stampa_avvisi indica se effettuare la stampa degli avvisi associati alle pendenze caricate col tracciato (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTracciatoPendenzeDominioTipoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addTracciatoPendenzeDominioTipoPendenzaRequest($id_dominio, $id_tipo_pendenza, $body, $stampa_avvisi = true, string $contentType = self::contentTypes['addTracciatoPendenzeDominioTipoPendenza'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling addTracciatoPendenzeDominioTipoPendenza'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PendenzeApi.addTracciatoPendenzeDominioTipoPendenza, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'id_tipo_pendenza' is set
        if ($id_tipo_pendenza === null || (is_array($id_tipo_pendenza) && count($id_tipo_pendenza) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_tipo_pendenza when calling addTracciatoPendenzeDominioTipoPendenza'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", $id_tipo_pendenza)) {
            throw new \InvalidArgumentException("invalid value for \"id_tipo_pendenza\" when calling PendenzeApi.addTracciatoPendenzeDominioTipoPendenza, must conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.");
        }
        
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addTracciatoPendenzeDominioTipoPendenza'
            );
        }



        $resourcePath = '/pendenze/tracciati/{idDominio}/{idTipoPendenza}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stampa_avvisi,
            'stampaAvvisi', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($id_tipo_pendenza !== null) {
            $resourcePath = str_replace(
                '{' . 'idTipoPendenza' . '}',
                ObjectSerializer::toPathValue($id_tipo_pendenza),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findOperazioniTracciatoPendenze
     *
     * Elenco delle Operazioni relative ad un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOperazioniTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindOperazioniTracciatoPendenze200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findOperazioniTracciatoPendenze($id, $pagina = 1, $risultati_per_pagina = 25, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findOperazioniTracciatoPendenze'][0])
    {
        list($response) = $this->findOperazioniTracciatoPendenzeWithHttpInfo($id, $pagina, $risultati_per_pagina, $metadati_paginazione, $max_risultati, $contentType);
        return $response;
    }

    /**
     * Operation findOperazioniTracciatoPendenzeWithHttpInfo
     *
     * Elenco delle Operazioni relative ad un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOperazioniTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindOperazioniTracciatoPendenze200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findOperazioniTracciatoPendenzeWithHttpInfo($id, $pagina = 1, $risultati_per_pagina = 25, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findOperazioniTracciatoPendenze'][0])
    {
        $request = $this->findOperazioniTracciatoPendenzeRequest($id, $pagina, $risultati_per_pagina, $metadati_paginazione, $max_risultati, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindOperazioniTracciatoPendenze200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindOperazioniTracciatoPendenze200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindOperazioniTracciatoPendenze200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findOperazioniTracciatoPendenzeAsync
     *
     * Elenco delle Operazioni relative ad un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOperazioniTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findOperazioniTracciatoPendenzeAsync($id, $pagina = 1, $risultati_per_pagina = 25, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findOperazioniTracciatoPendenze'][0])
    {
        return $this->findOperazioniTracciatoPendenzeAsyncWithHttpInfo($id, $pagina, $risultati_per_pagina, $metadati_paginazione, $max_risultati, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findOperazioniTracciatoPendenzeAsyncWithHttpInfo
     *
     * Elenco delle Operazioni relative ad un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOperazioniTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findOperazioniTracciatoPendenzeAsyncWithHttpInfo($id, $pagina = 1, $risultati_per_pagina = 25, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findOperazioniTracciatoPendenze'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindOperazioniTracciatoPendenze200Response';
        $request = $this->findOperazioniTracciatoPendenzeRequest($id, $pagina, $risultati_per_pagina, $metadati_paginazione, $max_risultati, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findOperazioniTracciatoPendenze'
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOperazioniTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findOperazioniTracciatoPendenzeRequest($id, $pagina = 1, $risultati_per_pagina = 25, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findOperazioniTracciatoPendenze'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findOperazioniTracciatoPendenze'
            );
        }

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling PendenzeApi.findOperazioniTracciatoPendenze, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling PendenzeApi.findOperazioniTracciatoPendenze, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling PendenzeApi.findOperazioniTracciatoPendenze, must be bigger than or equal to 0.');
        }
        



        $resourcePath = '/pendenze/tracciati/{id}/operazioni';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findPendenze
     *
     * Elenco delle pendenze
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default discendente)  * dataCaricamento  * dataValidita  * dataScadenza  * stato  * smart (solo se attivo il filtro &#39;idDebitore&#39;) (optional, default to '+dataCaricamento')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  \GovPay\Backoffice\Model\StatoPendenza|null $stato Filtro sullo stato della pendenza (optional)
     * @param  string|null $id_pagamento Identificativo della richiesta di pagamento (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  string[]|null $id_tipo_pendenza Filtra per uno o piu&#39; identificativi di tipologia di pendenza (optional)
     * @param  string|null $direzione Identificativo della direzione interna all&#39;ente creditore (optional)
     * @param  string|null $divisione Identificativo della divisione interna all&#39;ente creditore (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  bool|null $mostra_spontanei_non_pagati Visualizza solo le pendenze di tipo Spontaneo non pagate (optional, default to false)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindPendenze200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findPendenze($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataCaricamento', $campi = null, $id_dominio = null, $id_a2_a = null, $id_debitore = null, $stato = null, $id_pagamento = null, $id_pendenza = null, $data_da = null, $data_a = null, $id_tipo_pendenza = null, $direzione = null, $divisione = null, $iuv = null, $mostra_spontanei_non_pagati = false, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findPendenze'][0])
    {
        list($response) = $this->findPendenzeWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $id_dominio, $id_a2_a, $id_debitore, $stato, $id_pagamento, $id_pendenza, $data_da, $data_a, $id_tipo_pendenza, $direzione, $divisione, $iuv, $mostra_spontanei_non_pagati, $metadati_paginazione, $max_risultati, $contentType);
        return $response;
    }

    /**
     * Operation findPendenzeWithHttpInfo
     *
     * Elenco delle pendenze
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default discendente)  * dataCaricamento  * dataValidita  * dataScadenza  * stato  * smart (solo se attivo il filtro &#39;idDebitore&#39;) (optional, default to '+dataCaricamento')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  \GovPay\Backoffice\Model\StatoPendenza|null $stato Filtro sullo stato della pendenza (optional)
     * @param  string|null $id_pagamento Identificativo della richiesta di pagamento (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  string[]|null $id_tipo_pendenza Filtra per uno o piu&#39; identificativi di tipologia di pendenza (optional)
     * @param  string|null $direzione Identificativo della direzione interna all&#39;ente creditore (optional)
     * @param  string|null $divisione Identificativo della divisione interna all&#39;ente creditore (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  bool|null $mostra_spontanei_non_pagati Visualizza solo le pendenze di tipo Spontaneo non pagate (optional, default to false)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindPendenze200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findPendenzeWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataCaricamento', $campi = null, $id_dominio = null, $id_a2_a = null, $id_debitore = null, $stato = null, $id_pagamento = null, $id_pendenza = null, $data_da = null, $data_a = null, $id_tipo_pendenza = null, $direzione = null, $divisione = null, $iuv = null, $mostra_spontanei_non_pagati = false, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findPendenze'][0])
    {
        $request = $this->findPendenzeRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $id_dominio, $id_a2_a, $id_debitore, $stato, $id_pagamento, $id_pendenza, $data_da, $data_a, $id_tipo_pendenza, $direzione, $divisione, $iuv, $mostra_spontanei_non_pagati, $metadati_paginazione, $max_risultati, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindPendenze200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindPendenze200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindPendenze200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findPendenzeAsync
     *
     * Elenco delle pendenze
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default discendente)  * dataCaricamento  * dataValidita  * dataScadenza  * stato  * smart (solo se attivo il filtro &#39;idDebitore&#39;) (optional, default to '+dataCaricamento')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  \GovPay\Backoffice\Model\StatoPendenza|null $stato Filtro sullo stato della pendenza (optional)
     * @param  string|null $id_pagamento Identificativo della richiesta di pagamento (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  string[]|null $id_tipo_pendenza Filtra per uno o piu&#39; identificativi di tipologia di pendenza (optional)
     * @param  string|null $direzione Identificativo della direzione interna all&#39;ente creditore (optional)
     * @param  string|null $divisione Identificativo della divisione interna all&#39;ente creditore (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  bool|null $mostra_spontanei_non_pagati Visualizza solo le pendenze di tipo Spontaneo non pagate (optional, default to false)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findPendenzeAsync($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataCaricamento', $campi = null, $id_dominio = null, $id_a2_a = null, $id_debitore = null, $stato = null, $id_pagamento = null, $id_pendenza = null, $data_da = null, $data_a = null, $id_tipo_pendenza = null, $direzione = null, $divisione = null, $iuv = null, $mostra_spontanei_non_pagati = false, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findPendenze'][0])
    {
        return $this->findPendenzeAsyncWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $id_dominio, $id_a2_a, $id_debitore, $stato, $id_pagamento, $id_pendenza, $data_da, $data_a, $id_tipo_pendenza, $direzione, $divisione, $iuv, $mostra_spontanei_non_pagati, $metadati_paginazione, $max_risultati, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findPendenzeAsyncWithHttpInfo
     *
     * Elenco delle pendenze
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default discendente)  * dataCaricamento  * dataValidita  * dataScadenza  * stato  * smart (solo se attivo il filtro &#39;idDebitore&#39;) (optional, default to '+dataCaricamento')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  \GovPay\Backoffice\Model\StatoPendenza|null $stato Filtro sullo stato della pendenza (optional)
     * @param  string|null $id_pagamento Identificativo della richiesta di pagamento (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  string[]|null $id_tipo_pendenza Filtra per uno o piu&#39; identificativi di tipologia di pendenza (optional)
     * @param  string|null $direzione Identificativo della direzione interna all&#39;ente creditore (optional)
     * @param  string|null $divisione Identificativo della divisione interna all&#39;ente creditore (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  bool|null $mostra_spontanei_non_pagati Visualizza solo le pendenze di tipo Spontaneo non pagate (optional, default to false)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findPendenzeAsyncWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataCaricamento', $campi = null, $id_dominio = null, $id_a2_a = null, $id_debitore = null, $stato = null, $id_pagamento = null, $id_pendenza = null, $data_da = null, $data_a = null, $id_tipo_pendenza = null, $direzione = null, $divisione = null, $iuv = null, $mostra_spontanei_non_pagati = false, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findPendenze'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindPendenze200Response';
        $request = $this->findPendenzeRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $id_dominio, $id_a2_a, $id_debitore, $stato, $id_pagamento, $id_pendenza, $data_da, $data_a, $id_tipo_pendenza, $direzione, $divisione, $iuv, $mostra_spontanei_non_pagati, $metadati_paginazione, $max_risultati, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findPendenze'
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default discendente)  * dataCaricamento  * dataValidita  * dataScadenza  * stato  * smart (solo se attivo il filtro &#39;idDebitore&#39;) (optional, default to '+dataCaricamento')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  \GovPay\Backoffice\Model\StatoPendenza|null $stato Filtro sullo stato della pendenza (optional)
     * @param  string|null $id_pagamento Identificativo della richiesta di pagamento (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  string[]|null $id_tipo_pendenza Filtra per uno o piu&#39; identificativi di tipologia di pendenza (optional)
     * @param  string|null $direzione Identificativo della direzione interna all&#39;ente creditore (optional)
     * @param  string|null $divisione Identificativo della divisione interna all&#39;ente creditore (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  bool|null $mostra_spontanei_non_pagati Visualizza solo le pendenze di tipo Spontaneo non pagate (optional, default to false)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findPendenzeRequest($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataCaricamento', $campi = null, $id_dominio = null, $id_a2_a = null, $id_debitore = null, $stato = null, $id_pagamento = null, $id_pendenza = null, $data_da = null, $data_a = null, $id_tipo_pendenza = null, $direzione = null, $divisione = null, $iuv = null, $mostra_spontanei_non_pagati = false, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findPendenze'][0])
    {

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling PendenzeApi.findPendenze, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling PendenzeApi.findPendenze, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling PendenzeApi.findPendenze, must be bigger than or equal to 0.');
        }
        


        if ($id_dominio !== null && !preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PendenzeApi.findPendenze, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        















        $resourcePath = '/pendenze';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_dominio,
            'idDominio', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_a2_a,
            'idA2A', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_debitore,
            'idDebitore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stato,
            'stato', // param base name
            'StatoPendenza', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_pagamento,
            'idPagamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_pendenza,
            'idPendenza', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_da,
            'dataDa', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_a,
            'dataA', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_tipo_pendenza,
            'idTipoPendenza', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direzione,
            'direzione', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $divisione,
            'divisione', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iuv,
            'iuv', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mostra_spontanei_non_pagati,
            'mostraSpontaneiNonPagati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findTracciatiPendenze
     *
     * Elenco dei Tracciati caricati
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  \GovPay\Backoffice\Model\StatoTracciatoPendenza|null $stato_tracciato_pendenza Filtro sullo stato del tracciato (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTracciatiPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindTracciatiPendenze200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findTracciatiPendenze($pagina = 1, $risultati_per_pagina = 25, $id_dominio = null, $stato_tracciato_pendenza = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTracciatiPendenze'][0])
    {
        list($response) = $this->findTracciatiPendenzeWithHttpInfo($pagina, $risultati_per_pagina, $id_dominio, $stato_tracciato_pendenza, $metadati_paginazione, $max_risultati, $contentType);
        return $response;
    }

    /**
     * Operation findTracciatiPendenzeWithHttpInfo
     *
     * Elenco dei Tracciati caricati
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  \GovPay\Backoffice\Model\StatoTracciatoPendenza|null $stato_tracciato_pendenza Filtro sullo stato del tracciato (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTracciatiPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindTracciatiPendenze200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findTracciatiPendenzeWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $id_dominio = null, $stato_tracciato_pendenza = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTracciatiPendenze'][0])
    {
        $request = $this->findTracciatiPendenzeRequest($pagina, $risultati_per_pagina, $id_dominio, $stato_tracciato_pendenza, $metadati_paginazione, $max_risultati, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindTracciatiPendenze200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindTracciatiPendenze200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindTracciatiPendenze200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findTracciatiPendenzeAsync
     *
     * Elenco dei Tracciati caricati
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  \GovPay\Backoffice\Model\StatoTracciatoPendenza|null $stato_tracciato_pendenza Filtro sullo stato del tracciato (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTracciatiPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTracciatiPendenzeAsync($pagina = 1, $risultati_per_pagina = 25, $id_dominio = null, $stato_tracciato_pendenza = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTracciatiPendenze'][0])
    {
        return $this->findTracciatiPendenzeAsyncWithHttpInfo($pagina, $risultati_per_pagina, $id_dominio, $stato_tracciato_pendenza, $metadati_paginazione, $max_risultati, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findTracciatiPendenzeAsyncWithHttpInfo
     *
     * Elenco dei Tracciati caricati
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  \GovPay\Backoffice\Model\StatoTracciatoPendenza|null $stato_tracciato_pendenza Filtro sullo stato del tracciato (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTracciatiPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTracciatiPendenzeAsyncWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $id_dominio = null, $stato_tracciato_pendenza = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTracciatiPendenze'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindTracciatiPendenze200Response';
        $request = $this->findTracciatiPendenzeRequest($pagina, $risultati_per_pagina, $id_dominio, $stato_tracciato_pendenza, $metadati_paginazione, $max_risultati, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findTracciatiPendenze'
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  \GovPay\Backoffice\Model\StatoTracciatoPendenza|null $stato_tracciato_pendenza Filtro sullo stato del tracciato (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTracciatiPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findTracciatiPendenzeRequest($pagina = 1, $risultati_per_pagina = 25, $id_dominio = null, $stato_tracciato_pendenza = null, $metadati_paginazione = true, $max_risultati = true, string $contentType = self::contentTypes['findTracciatiPendenze'][0])
    {

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling PendenzeApi.findTracciatiPendenze, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling PendenzeApi.findTracciatiPendenze, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling PendenzeApi.findTracciatiPendenze, must be bigger than or equal to 0.');
        }
        
        if ($id_dominio !== null && !preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PendenzeApi.findTracciatiPendenze, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        




        $resourcePath = '/pendenze/tracciati';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_dominio,
            'idDominio', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stato_tracciato_pendenza,
            'statoTracciatoPendenza', // param base name
            'StatoTracciatoPendenza', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllegatoPendenza
     *
     * Allegato di una pendenza
     *
     * @param  int $id Identificativo dell&#39;allegato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllegatoPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\GovPay\Backoffice\Model\FaultBean
     */
    public function getAllegatoPendenza($id, string $contentType = self::contentTypes['getAllegatoPendenza'][0])
    {
        list($response) = $this->getAllegatoPendenzaWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getAllegatoPendenzaWithHttpInfo
     *
     * Allegato di una pendenza
     *
     * @param  int $id Identificativo dell&#39;allegato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllegatoPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllegatoPendenzaWithHttpInfo($id, string $contentType = self::contentTypes['getAllegatoPendenza'][0])
    {
        $request = $this->getAllegatoPendenzaRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAllegatoPendenzaAsync
     *
     * Allegato di una pendenza
     *
     * @param  int $id Identificativo dell&#39;allegato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllegatoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllegatoPendenzaAsync($id, string $contentType = self::contentTypes['getAllegatoPendenza'][0])
    {
        return $this->getAllegatoPendenzaAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllegatoPendenzaAsyncWithHttpInfo
     *
     * Allegato di una pendenza
     *
     * @param  int $id Identificativo dell&#39;allegato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllegatoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllegatoPendenzaAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getAllegatoPendenza'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getAllegatoPendenzaRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllegatoPendenza'
     *
     * @param  int $id Identificativo dell&#39;allegato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllegatoPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllegatoPendenzaRequest($id, string $contentType = self::contentTypes['getAllegatoPendenza'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAllegatoPendenza'
            );
        }


        $resourcePath = '/allegati/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAvvisiDocumento
     *
     * Documento di pagamento
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_documento Identificativo del documento di pagamento (required)
     * @param  \GovPay\Backoffice\Model\LinguaSecondaria|null $lingua_secondaria Indica se creare l&#39;avviso in modalita&#39; multilingua e quale seconda lingua affiancare all&#39;italiano all&#39;interno dell&#39;avviso (optional)
     * @param  string[]|null $numeri_avviso Indica i numeri avviso da includere nelle stampe dei documenti (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvvisiDocumento'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\GovPay\Backoffice\Model\FaultBean
     */
    public function getAvvisiDocumento($id_a2_a, $id_dominio, $numero_documento, $lingua_secondaria = null, $numeri_avviso = null, string $contentType = self::contentTypes['getAvvisiDocumento'][0])
    {
        list($response) = $this->getAvvisiDocumentoWithHttpInfo($id_a2_a, $id_dominio, $numero_documento, $lingua_secondaria, $numeri_avviso, $contentType);
        return $response;
    }

    /**
     * Operation getAvvisiDocumentoWithHttpInfo
     *
     * Documento di pagamento
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_documento Identificativo del documento di pagamento (required)
     * @param  \GovPay\Backoffice\Model\LinguaSecondaria|null $lingua_secondaria Indica se creare l&#39;avviso in modalita&#39; multilingua e quale seconda lingua affiancare all&#39;italiano all&#39;interno dell&#39;avviso (optional)
     * @param  string[]|null $numeri_avviso Indica i numeri avviso da includere nelle stampe dei documenti (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvvisiDocumento'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAvvisiDocumentoWithHttpInfo($id_a2_a, $id_dominio, $numero_documento, $lingua_secondaria = null, $numeri_avviso = null, string $contentType = self::contentTypes['getAvvisiDocumento'][0])
    {
        $request = $this->getAvvisiDocumentoRequest($id_a2_a, $id_dominio, $numero_documento, $lingua_secondaria, $numeri_avviso, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAvvisiDocumentoAsync
     *
     * Documento di pagamento
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_documento Identificativo del documento di pagamento (required)
     * @param  \GovPay\Backoffice\Model\LinguaSecondaria|null $lingua_secondaria Indica se creare l&#39;avviso in modalita&#39; multilingua e quale seconda lingua affiancare all&#39;italiano all&#39;interno dell&#39;avviso (optional)
     * @param  string[]|null $numeri_avviso Indica i numeri avviso da includere nelle stampe dei documenti (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvvisiDocumento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvvisiDocumentoAsync($id_a2_a, $id_dominio, $numero_documento, $lingua_secondaria = null, $numeri_avviso = null, string $contentType = self::contentTypes['getAvvisiDocumento'][0])
    {
        return $this->getAvvisiDocumentoAsyncWithHttpInfo($id_a2_a, $id_dominio, $numero_documento, $lingua_secondaria, $numeri_avviso, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAvvisiDocumentoAsyncWithHttpInfo
     *
     * Documento di pagamento
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_documento Identificativo del documento di pagamento (required)
     * @param  \GovPay\Backoffice\Model\LinguaSecondaria|null $lingua_secondaria Indica se creare l&#39;avviso in modalita&#39; multilingua e quale seconda lingua affiancare all&#39;italiano all&#39;interno dell&#39;avviso (optional)
     * @param  string[]|null $numeri_avviso Indica i numeri avviso da includere nelle stampe dei documenti (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvvisiDocumento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvvisiDocumentoAsyncWithHttpInfo($id_a2_a, $id_dominio, $numero_documento, $lingua_secondaria = null, $numeri_avviso = null, string $contentType = self::contentTypes['getAvvisiDocumento'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getAvvisiDocumentoRequest($id_a2_a, $id_dominio, $numero_documento, $lingua_secondaria, $numeri_avviso, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAvvisiDocumento'
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_documento Identificativo del documento di pagamento (required)
     * @param  \GovPay\Backoffice\Model\LinguaSecondaria|null $lingua_secondaria Indica se creare l&#39;avviso in modalita&#39; multilingua e quale seconda lingua affiancare all&#39;italiano all&#39;interno dell&#39;avviso (optional)
     * @param  string[]|null $numeri_avviso Indica i numeri avviso da includere nelle stampe dei documenti (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvvisiDocumento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAvvisiDocumentoRequest($id_a2_a, $id_dominio, $numero_documento, $lingua_secondaria = null, $numeri_avviso = null, string $contentType = self::contentTypes['getAvvisiDocumento'][0])
    {

        // verify the required parameter 'id_a2_a' is set
        if ($id_a2_a === null || (is_array($id_a2_a) && count($id_a2_a) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_a2_a when calling getAvvisiDocumento'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_]{1,35}$)/", $id_a2_a)) {
            throw new \InvalidArgumentException("invalid value for \"id_a2_a\" when calling PendenzeApi.getAvvisiDocumento, must conform to the pattern /(^[a-zA-Z0-9\\-_]{1,35}$)/.");
        }
        
        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getAvvisiDocumento'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PendenzeApi.getAvvisiDocumento, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'numero_documento' is set
        if ($numero_documento === null || (is_array($numero_documento) && count($numero_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_documento when calling getAvvisiDocumento'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_]{1,35}$)/", $numero_documento)) {
            throw new \InvalidArgumentException("invalid value for \"numero_documento\" when calling PendenzeApi.getAvvisiDocumento, must conform to the pattern /(^[a-zA-Z0-9\\-_]{1,35}$)/.");
        }
        



        $resourcePath = '/documenti/{idA2A}/{idDominio}/{numeroDocumento}/avvisi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lingua_secondaria,
            'linguaSecondaria', // param base name
            'LinguaSecondaria', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $numeri_avviso,
            'numeriAvviso', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_a2_a !== null) {
            $resourcePath = str_replace(
                '{' . 'idA2A' . '}',
                ObjectSerializer::toPathValue($id_a2_a),
                $resourcePath
            );
        }
        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($numero_documento !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroDocumento' . '}',
                ObjectSerializer::toPathValue($numero_documento),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAvviso
     *
     * Avviso di pagamento
     *
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_avviso Identificativo dell&#39;avviso di pagamento (required)
     * @param  \GovPay\Backoffice\Model\LinguaSecondaria|null $lingua_secondaria Indica se creare l&#39;avviso in modalita&#39; multilingua e quale seconda lingua affiancare all&#39;italiano all&#39;interno dell&#39;avviso (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvviso'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\Avviso|\GovPay\Backoffice\Model\FaultBean
     */
    public function getAvviso($id_dominio, $numero_avviso, $lingua_secondaria = null, string $contentType = self::contentTypes['getAvviso'][0])
    {
        list($response) = $this->getAvvisoWithHttpInfo($id_dominio, $numero_avviso, $lingua_secondaria, $contentType);
        return $response;
    }

    /**
     * Operation getAvvisoWithHttpInfo
     *
     * Avviso di pagamento
     *
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_avviso Identificativo dell&#39;avviso di pagamento (required)
     * @param  \GovPay\Backoffice\Model\LinguaSecondaria|null $lingua_secondaria Indica se creare l&#39;avviso in modalita&#39; multilingua e quale seconda lingua affiancare all&#39;italiano all&#39;interno dell&#39;avviso (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvviso'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\Avviso|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAvvisoWithHttpInfo($id_dominio, $numero_avviso, $lingua_secondaria = null, string $contentType = self::contentTypes['getAvviso'][0])
    {
        $request = $this->getAvvisoRequest($id_dominio, $numero_avviso, $lingua_secondaria, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\Avviso',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\Avviso',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\Avviso',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAvvisoAsync
     *
     * Avviso di pagamento
     *
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_avviso Identificativo dell&#39;avviso di pagamento (required)
     * @param  \GovPay\Backoffice\Model\LinguaSecondaria|null $lingua_secondaria Indica se creare l&#39;avviso in modalita&#39; multilingua e quale seconda lingua affiancare all&#39;italiano all&#39;interno dell&#39;avviso (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvviso'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvvisoAsync($id_dominio, $numero_avviso, $lingua_secondaria = null, string $contentType = self::contentTypes['getAvviso'][0])
    {
        return $this->getAvvisoAsyncWithHttpInfo($id_dominio, $numero_avviso, $lingua_secondaria, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAvvisoAsyncWithHttpInfo
     *
     * Avviso di pagamento
     *
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_avviso Identificativo dell&#39;avviso di pagamento (required)
     * @param  \GovPay\Backoffice\Model\LinguaSecondaria|null $lingua_secondaria Indica se creare l&#39;avviso in modalita&#39; multilingua e quale seconda lingua affiancare all&#39;italiano all&#39;interno dell&#39;avviso (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvviso'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvvisoAsyncWithHttpInfo($id_dominio, $numero_avviso, $lingua_secondaria = null, string $contentType = self::contentTypes['getAvviso'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\Avviso';
        $request = $this->getAvvisoRequest($id_dominio, $numero_avviso, $lingua_secondaria, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAvviso'
     *
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_avviso Identificativo dell&#39;avviso di pagamento (required)
     * @param  \GovPay\Backoffice\Model\LinguaSecondaria|null $lingua_secondaria Indica se creare l&#39;avviso in modalita&#39; multilingua e quale seconda lingua affiancare all&#39;italiano all&#39;interno dell&#39;avviso (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvviso'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAvvisoRequest($id_dominio, $numero_avviso, $lingua_secondaria = null, string $contentType = self::contentTypes['getAvviso'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getAvviso'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PendenzeApi.getAvviso, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'numero_avviso' is set
        if ($numero_avviso === null || (is_array($numero_avviso) && count($numero_avviso) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_avviso when calling getAvviso'
            );
        }
        if (!preg_match("/(^[0-9]{18}$)/", $numero_avviso)) {
            throw new \InvalidArgumentException("invalid value for \"numero_avviso\" when calling PendenzeApi.getAvviso, must conform to the pattern /(^[0-9]{18}$)/.");
        }
        


        $resourcePath = '/avvisi/{idDominio}/{numeroAvviso}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lingua_secondaria,
            'linguaSecondaria', // param base name
            'LinguaSecondaria', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($numero_avviso !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroAvviso' . '}',
                ObjectSerializer::toPathValue($numero_avviso),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEsitoTracciatoPendenze
     *
     * Dettaglio esito di un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEsitoTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\TracciatoPendenzeEsito|\GovPay\Backoffice\Model\FaultBean
     */
    public function getEsitoTracciatoPendenze($id, string $contentType = self::contentTypes['getEsitoTracciatoPendenze'][0])
    {
        list($response) = $this->getEsitoTracciatoPendenzeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getEsitoTracciatoPendenzeWithHttpInfo
     *
     * Dettaglio esito di un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEsitoTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\TracciatoPendenzeEsito|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEsitoTracciatoPendenzeWithHttpInfo($id, string $contentType = self::contentTypes['getEsitoTracciatoPendenze'][0])
    {
        $request = $this->getEsitoTracciatoPendenzeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\TracciatoPendenzeEsito',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\TracciatoPendenzeEsito',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\TracciatoPendenzeEsito',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getEsitoTracciatoPendenzeAsync
     *
     * Dettaglio esito di un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEsitoTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEsitoTracciatoPendenzeAsync($id, string $contentType = self::contentTypes['getEsitoTracciatoPendenze'][0])
    {
        return $this->getEsitoTracciatoPendenzeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEsitoTracciatoPendenzeAsyncWithHttpInfo
     *
     * Dettaglio esito di un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEsitoTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEsitoTracciatoPendenzeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getEsitoTracciatoPendenze'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\TracciatoPendenzeEsito';
        $request = $this->getEsitoTracciatoPendenzeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEsitoTracciatoPendenze'
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEsitoTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEsitoTracciatoPendenzeRequest($id, string $contentType = self::contentTypes['getEsitoTracciatoPendenze'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEsitoTracciatoPendenze'
            );
        }


        $resourcePath = '/pendenze/tracciati/{id}/esito';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPendenza
     *
     * Dettaglio di una Pendenza per identificativo
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\Pendenza|\GovPay\Backoffice\Model\FaultBean
     */
    public function getPendenza($id_a2_a, $id_pendenza, string $contentType = self::contentTypes['getPendenza'][0])
    {
        list($response) = $this->getPendenzaWithHttpInfo($id_a2_a, $id_pendenza, $contentType);
        return $response;
    }

    /**
     * Operation getPendenzaWithHttpInfo
     *
     * Dettaglio di una Pendenza per identificativo
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\Pendenza|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPendenzaWithHttpInfo($id_a2_a, $id_pendenza, string $contentType = self::contentTypes['getPendenza'][0])
    {
        $request = $this->getPendenzaRequest($id_a2_a, $id_pendenza, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\Pendenza',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\Pendenza',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\Pendenza',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPendenzaAsync
     *
     * Dettaglio di una Pendenza per identificativo
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPendenzaAsync($id_a2_a, $id_pendenza, string $contentType = self::contentTypes['getPendenza'][0])
    {
        return $this->getPendenzaAsyncWithHttpInfo($id_a2_a, $id_pendenza, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPendenzaAsyncWithHttpInfo
     *
     * Dettaglio di una Pendenza per identificativo
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPendenzaAsyncWithHttpInfo($id_a2_a, $id_pendenza, string $contentType = self::contentTypes['getPendenza'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\Pendenza';
        $request = $this->getPendenzaRequest($id_a2_a, $id_pendenza, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPendenza'
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPendenzaRequest($id_a2_a, $id_pendenza, string $contentType = self::contentTypes['getPendenza'][0])
    {

        // verify the required parameter 'id_a2_a' is set
        if ($id_a2_a === null || (is_array($id_a2_a) && count($id_a2_a) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_a2_a when calling getPendenza'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_]{1,35}$)/", $id_a2_a)) {
            throw new \InvalidArgumentException("invalid value for \"id_a2_a\" when calling PendenzeApi.getPendenza, must conform to the pattern /(^[a-zA-Z0-9\\-_]{1,35}$)/.");
        }
        
        // verify the required parameter 'id_pendenza' is set
        if ($id_pendenza === null || (is_array($id_pendenza) && count($id_pendenza) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_pendenza when calling getPendenza'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_]{1,35}$)/", $id_pendenza)) {
            throw new \InvalidArgumentException("invalid value for \"id_pendenza\" when calling PendenzeApi.getPendenza, must conform to the pattern /(^[a-zA-Z0-9\\-_]{1,35}$)/.");
        }
        

        $resourcePath = '/pendenze/{idA2A}/{idPendenza}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_a2_a !== null) {
            $resourcePath = str_replace(
                '{' . 'idA2A' . '}',
                ObjectSerializer::toPathValue($id_a2_a),
                $resourcePath
            );
        }
        // path params
        if ($id_pendenza !== null) {
            $resourcePath = str_replace(
                '{' . 'idPendenza' . '}',
                ObjectSerializer::toPathValue($id_pendenza),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPendenzaByAvviso
     *
     * Dettaglio di una pendenza per riferimento Avviso
     *
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_avviso Identificativo dell&#39;avviso di pagamento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPendenzaByAvviso'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\Pendenza|\GovPay\Backoffice\Model\FaultBean
     */
    public function getPendenzaByAvviso($id_dominio, $numero_avviso, string $contentType = self::contentTypes['getPendenzaByAvviso'][0])
    {
        list($response) = $this->getPendenzaByAvvisoWithHttpInfo($id_dominio, $numero_avviso, $contentType);
        return $response;
    }

    /**
     * Operation getPendenzaByAvvisoWithHttpInfo
     *
     * Dettaglio di una pendenza per riferimento Avviso
     *
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_avviso Identificativo dell&#39;avviso di pagamento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPendenzaByAvviso'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\Pendenza|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPendenzaByAvvisoWithHttpInfo($id_dominio, $numero_avviso, string $contentType = self::contentTypes['getPendenzaByAvviso'][0])
    {
        $request = $this->getPendenzaByAvvisoRequest($id_dominio, $numero_avviso, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\Pendenza',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\Pendenza',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\Pendenza',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPendenzaByAvvisoAsync
     *
     * Dettaglio di una pendenza per riferimento Avviso
     *
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_avviso Identificativo dell&#39;avviso di pagamento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPendenzaByAvviso'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPendenzaByAvvisoAsync($id_dominio, $numero_avviso, string $contentType = self::contentTypes['getPendenzaByAvviso'][0])
    {
        return $this->getPendenzaByAvvisoAsyncWithHttpInfo($id_dominio, $numero_avviso, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPendenzaByAvvisoAsyncWithHttpInfo
     *
     * Dettaglio di una pendenza per riferimento Avviso
     *
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_avviso Identificativo dell&#39;avviso di pagamento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPendenzaByAvviso'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPendenzaByAvvisoAsyncWithHttpInfo($id_dominio, $numero_avviso, string $contentType = self::contentTypes['getPendenzaByAvviso'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\Pendenza';
        $request = $this->getPendenzaByAvvisoRequest($id_dominio, $numero_avviso, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPendenzaByAvviso'
     *
     * @param  string $id_dominio Identificativo del dominio dell&#39;ente (required)
     * @param  string $numero_avviso Identificativo dell&#39;avviso di pagamento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPendenzaByAvviso'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPendenzaByAvvisoRequest($id_dominio, $numero_avviso, string $contentType = self::contentTypes['getPendenzaByAvviso'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getPendenzaByAvviso'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PendenzeApi.getPendenzaByAvviso, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'numero_avviso' is set
        if ($numero_avviso === null || (is_array($numero_avviso) && count($numero_avviso) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_avviso when calling getPendenzaByAvviso'
            );
        }
        if (!preg_match("/(^[0-9]{18}$)/", $numero_avviso)) {
            throw new \InvalidArgumentException("invalid value for \"numero_avviso\" when calling PendenzeApi.getPendenzaByAvviso, must conform to the pattern /(^[0-9]{18}$)/.");
        }
        

        $resourcePath = '/pendenze/byAvviso/{idDominio}/{numeroAvviso}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($numero_avviso !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroAvviso' . '}',
                ObjectSerializer::toPathValue($numero_avviso),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRichiestaTracciatoPendenze
     *
     * Tracciato di richiesta
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRichiestaTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\TracciatoPendenzePost|\GovPay\Backoffice\Model\FaultBean
     */
    public function getRichiestaTracciatoPendenze($id, string $contentType = self::contentTypes['getRichiestaTracciatoPendenze'][0])
    {
        list($response) = $this->getRichiestaTracciatoPendenzeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getRichiestaTracciatoPendenzeWithHttpInfo
     *
     * Tracciato di richiesta
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRichiestaTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\TracciatoPendenzePost|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRichiestaTracciatoPendenzeWithHttpInfo($id, string $contentType = self::contentTypes['getRichiestaTracciatoPendenze'][0])
    {
        $request = $this->getRichiestaTracciatoPendenzeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\TracciatoPendenzePost',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\TracciatoPendenzePost',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\TracciatoPendenzePost',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRichiestaTracciatoPendenzeAsync
     *
     * Tracciato di richiesta
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRichiestaTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRichiestaTracciatoPendenzeAsync($id, string $contentType = self::contentTypes['getRichiestaTracciatoPendenze'][0])
    {
        return $this->getRichiestaTracciatoPendenzeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRichiestaTracciatoPendenzeAsyncWithHttpInfo
     *
     * Tracciato di richiesta
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRichiestaTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRichiestaTracciatoPendenzeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getRichiestaTracciatoPendenze'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\TracciatoPendenzePost';
        $request = $this->getRichiestaTracciatoPendenzeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRichiestaTracciatoPendenze'
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRichiestaTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRichiestaTracciatoPendenzeRequest($id, string $contentType = self::contentTypes['getRichiestaTracciatoPendenze'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRichiestaTracciatoPendenze'
            );
        }


        $resourcePath = '/pendenze/tracciati/{id}/richiesta';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStampeTracciatoPendenze
     *
     * Avvisi di pagamento relativi al Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStampeTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\GovPay\Backoffice\Model\FaultBean
     */
    public function getStampeTracciatoPendenze($id, string $contentType = self::contentTypes['getStampeTracciatoPendenze'][0])
    {
        list($response) = $this->getStampeTracciatoPendenzeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getStampeTracciatoPendenzeWithHttpInfo
     *
     * Avvisi di pagamento relativi al Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStampeTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStampeTracciatoPendenzeWithHttpInfo($id, string $contentType = self::contentTypes['getStampeTracciatoPendenze'][0])
    {
        $request = $this->getStampeTracciatoPendenzeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getStampeTracciatoPendenzeAsync
     *
     * Avvisi di pagamento relativi al Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStampeTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStampeTracciatoPendenzeAsync($id, string $contentType = self::contentTypes['getStampeTracciatoPendenze'][0])
    {
        return $this->getStampeTracciatoPendenzeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStampeTracciatoPendenzeAsyncWithHttpInfo
     *
     * Avvisi di pagamento relativi al Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStampeTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStampeTracciatoPendenzeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getStampeTracciatoPendenze'][0])
    {
        $returnType = 'object';
        $request = $this->getStampeTracciatoPendenzeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStampeTracciatoPendenze'
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStampeTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStampeTracciatoPendenzeRequest($id, string $contentType = self::contentTypes['getStampeTracciatoPendenze'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStampeTracciatoPendenze'
            );
        }


        $resourcePath = '/pendenze/tracciati/{id}/stampe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/zip', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTracciatoPendenze
     *
     * Dettaglio di un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\TracciatoPendenze|\GovPay\Backoffice\Model\FaultBean
     */
    public function getTracciatoPendenze($id, string $contentType = self::contentTypes['getTracciatoPendenze'][0])
    {
        list($response) = $this->getTracciatoPendenzeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getTracciatoPendenzeWithHttpInfo
     *
     * Dettaglio di un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\TracciatoPendenze|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTracciatoPendenzeWithHttpInfo($id, string $contentType = self::contentTypes['getTracciatoPendenze'][0])
    {
        $request = $this->getTracciatoPendenzeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\TracciatoPendenze',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\TracciatoPendenze',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\TracciatoPendenze',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTracciatoPendenzeAsync
     *
     * Dettaglio di un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTracciatoPendenzeAsync($id, string $contentType = self::contentTypes['getTracciatoPendenze'][0])
    {
        return $this->getTracciatoPendenzeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTracciatoPendenzeAsyncWithHttpInfo
     *
     * Dettaglio di un Tracciato
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTracciatoPendenzeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getTracciatoPendenze'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\TracciatoPendenze';
        $request = $this->getTracciatoPendenzeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTracciatoPendenze'
     *
     * @param  int $id identificativo di un tracciato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTracciatoPendenze'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTracciatoPendenzeRequest($id, string $contentType = self::contentTypes['getTracciatoPendenze'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTracciatoPendenze'
            );
        }


        $resourcePath = '/pendenze/tracciati/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePendenza
     *
     * Annullamento o ripristino di una Pendenza
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePendenza($id_a2_a, $id_pendenza, $patch_op, string $contentType = self::contentTypes['updatePendenza'][0])
    {
        $this->updatePendenzaWithHttpInfo($id_a2_a, $id_pendenza, $patch_op, $contentType);
    }

    /**
     * Operation updatePendenzaWithHttpInfo
     *
     * Annullamento o ripristino di una Pendenza
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePendenza'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePendenzaWithHttpInfo($id_a2_a, $id_pendenza, $patch_op, string $contentType = self::contentTypes['updatePendenza'][0])
    {
        $request = $this->updatePendenzaRequest($id_a2_a, $id_pendenza, $patch_op, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updatePendenzaAsync
     *
     * Annullamento o ripristino di una Pendenza
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePendenzaAsync($id_a2_a, $id_pendenza, $patch_op, string $contentType = self::contentTypes['updatePendenza'][0])
    {
        return $this->updatePendenzaAsyncWithHttpInfo($id_a2_a, $id_pendenza, $patch_op, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePendenzaAsyncWithHttpInfo
     *
     * Annullamento o ripristino di una Pendenza
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePendenzaAsyncWithHttpInfo($id_a2_a, $id_pendenza, $patch_op, string $contentType = self::contentTypes['updatePendenza'][0])
    {
        $returnType = '';
        $request = $this->updatePendenzaRequest($id_a2_a, $id_pendenza, $patch_op, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePendenza'
     *
     * @param  string $id_a2_a Identificativo del gestionale (required)
     * @param  string $id_pendenza Identificativo della pendenza (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePendenza'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePendenzaRequest($id_a2_a, $id_pendenza, $patch_op, string $contentType = self::contentTypes['updatePendenza'][0])
    {

        // verify the required parameter 'id_a2_a' is set
        if ($id_a2_a === null || (is_array($id_a2_a) && count($id_a2_a) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_a2_a when calling updatePendenza'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_]{1,35}$)/", $id_a2_a)) {
            throw new \InvalidArgumentException("invalid value for \"id_a2_a\" when calling PendenzeApi.updatePendenza, must conform to the pattern /(^[a-zA-Z0-9\\-_]{1,35}$)/.");
        }
        
        // verify the required parameter 'id_pendenza' is set
        if ($id_pendenza === null || (is_array($id_pendenza) && count($id_pendenza) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_pendenza when calling updatePendenza'
            );
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_]{1,35}$)/", $id_pendenza)) {
            throw new \InvalidArgumentException("invalid value for \"id_pendenza\" when calling PendenzeApi.updatePendenza, must conform to the pattern /(^[a-zA-Z0-9\\-_]{1,35}$)/.");
        }
        
        // verify the required parameter 'patch_op' is set
        if ($patch_op === null || (is_array($patch_op) && count($patch_op) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patch_op when calling updatePendenza'
            );
        }


        $resourcePath = '/pendenze/{idA2A}/{idPendenza}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_a2_a !== null) {
            $resourcePath = str_replace(
                '{' . 'idA2A' . '}',
                ObjectSerializer::toPathValue($id_a2_a),
                $resourcePath
            );
        }
        // path params
        if ($id_pendenza !== null) {
            $resourcePath = str_replace(
                '{' . 'idPendenza' . '}',
                ObjectSerializer::toPathValue($id_pendenza),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_op)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_op));
            } else {
                $httpBody = $patch_op;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}

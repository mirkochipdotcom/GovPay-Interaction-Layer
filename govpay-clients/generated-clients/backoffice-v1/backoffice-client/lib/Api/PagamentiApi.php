<?php
/**
 * PagamentiApi
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Backoffice
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.45.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Backoffice\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use GovPay\Backoffice\ApiException;
use GovPay\Backoffice\Configuration;
use GovPay\Backoffice\FormDataProcessor;
use GovPay\Backoffice\HeaderSelector;
use GovPay\Backoffice\ObjectSerializer;

/**
 * PagamentiApi Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Backoffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PagamentiApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'findPagamenti' => [
            'application/json',
        ],
        'findRpps' => [
            'application/json',
        ],
        'getPagamento' => [
            'application/json',
        ],
        'getRpp' => [
            'application/json',
        ],
        'getRpt' => [
            'application/json',
        ],
        'getRt' => [
            'application/json',
        ],
        'updatePagamento' => [
            'application/json-patch+json',
        ],
        'updateRpp' => [
            'application/json-patch+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation findPagamenti
     *
     * Lista dei pagamenti
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * dataRichiestaPagamento  * stato (optional, default to '+dataRichiestaPagamento')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  \GovPay\Backoffice\Model\StatoPagamento|null $stato Filtro sullo stato del pagamento (optional)
     * @param  string|null $versante Identificativo del soggetto versante del pagamento (optional)
     * @param  string|null $id_sessione_portale Identificativo della sessione di pagamento assegnato dall&#39;EC (optional)
     * @param  bool|null $verificato Filtro sui pagamenti verificati o meno (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  string|null $id Identificativo della richiesta di pagamento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  int|null $severita_da filtro per severita errore (optional)
     * @param  int|null $severita_a filtro per severita errore (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPagamenti'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindPagamenti200Response|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean
     * @deprecated
     */
    public function findPagamenti($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataRichiestaPagamento', $campi = null, $stato = null, $versante = null, $id_sessione_portale = null, $verificato = null, $data_da = null, $data_a = null, $id_debitore = null, $id = null, $metadati_paginazione = true, $max_risultati = true, $severita_da = null, $severita_a = null, $id_dominio = null, $iuv = null, $id_a2_a = null, $id_pendenza = null, string $contentType = self::contentTypes['findPagamenti'][0])
    {
        list($response) = $this->findPagamentiWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $stato, $versante, $id_sessione_portale, $verificato, $data_da, $data_a, $id_debitore, $id, $metadati_paginazione, $max_risultati, $severita_da, $severita_a, $id_dominio, $iuv, $id_a2_a, $id_pendenza, $contentType);
        return $response;
    }

    /**
     * Operation findPagamentiWithHttpInfo
     *
     * Lista dei pagamenti
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * dataRichiestaPagamento  * stato (optional, default to '+dataRichiestaPagamento')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  \GovPay\Backoffice\Model\StatoPagamento|null $stato Filtro sullo stato del pagamento (optional)
     * @param  string|null $versante Identificativo del soggetto versante del pagamento (optional)
     * @param  string|null $id_sessione_portale Identificativo della sessione di pagamento assegnato dall&#39;EC (optional)
     * @param  bool|null $verificato Filtro sui pagamenti verificati o meno (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  string|null $id Identificativo della richiesta di pagamento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  int|null $severita_da filtro per severita errore (optional)
     * @param  int|null $severita_a filtro per severita errore (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPagamenti'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindPagamenti200Response|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function findPagamentiWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataRichiestaPagamento', $campi = null, $stato = null, $versante = null, $id_sessione_portale = null, $verificato = null, $data_da = null, $data_a = null, $id_debitore = null, $id = null, $metadati_paginazione = true, $max_risultati = true, $severita_da = null, $severita_a = null, $id_dominio = null, $iuv = null, $id_a2_a = null, $id_pendenza = null, string $contentType = self::contentTypes['findPagamenti'][0])
    {
        $request = $this->findPagamentiRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $stato, $versante, $id_sessione_portale, $verificato, $data_da, $data_a, $id_debitore, $id, $metadati_paginazione, $max_risultati, $severita_da, $severita_a, $id_dominio, $iuv, $id_a2_a, $id_pendenza, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindPagamenti200Response',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 502:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindPagamenti200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindPagamenti200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findPagamentiAsync
     *
     * Lista dei pagamenti
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * dataRichiestaPagamento  * stato (optional, default to '+dataRichiestaPagamento')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  \GovPay\Backoffice\Model\StatoPagamento|null $stato Filtro sullo stato del pagamento (optional)
     * @param  string|null $versante Identificativo del soggetto versante del pagamento (optional)
     * @param  string|null $id_sessione_portale Identificativo della sessione di pagamento assegnato dall&#39;EC (optional)
     * @param  bool|null $verificato Filtro sui pagamenti verificati o meno (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  string|null $id Identificativo della richiesta di pagamento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  int|null $severita_da filtro per severita errore (optional)
     * @param  int|null $severita_a filtro per severita errore (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPagamenti'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function findPagamentiAsync($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataRichiestaPagamento', $campi = null, $stato = null, $versante = null, $id_sessione_portale = null, $verificato = null, $data_da = null, $data_a = null, $id_debitore = null, $id = null, $metadati_paginazione = true, $max_risultati = true, $severita_da = null, $severita_a = null, $id_dominio = null, $iuv = null, $id_a2_a = null, $id_pendenza = null, string $contentType = self::contentTypes['findPagamenti'][0])
    {
        return $this->findPagamentiAsyncWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $stato, $versante, $id_sessione_portale, $verificato, $data_da, $data_a, $id_debitore, $id, $metadati_paginazione, $max_risultati, $severita_da, $severita_a, $id_dominio, $iuv, $id_a2_a, $id_pendenza, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findPagamentiAsyncWithHttpInfo
     *
     * Lista dei pagamenti
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * dataRichiestaPagamento  * stato (optional, default to '+dataRichiestaPagamento')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  \GovPay\Backoffice\Model\StatoPagamento|null $stato Filtro sullo stato del pagamento (optional)
     * @param  string|null $versante Identificativo del soggetto versante del pagamento (optional)
     * @param  string|null $id_sessione_portale Identificativo della sessione di pagamento assegnato dall&#39;EC (optional)
     * @param  bool|null $verificato Filtro sui pagamenti verificati o meno (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  string|null $id Identificativo della richiesta di pagamento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  int|null $severita_da filtro per severita errore (optional)
     * @param  int|null $severita_a filtro per severita errore (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPagamenti'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function findPagamentiAsyncWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataRichiestaPagamento', $campi = null, $stato = null, $versante = null, $id_sessione_portale = null, $verificato = null, $data_da = null, $data_a = null, $id_debitore = null, $id = null, $metadati_paginazione = true, $max_risultati = true, $severita_da = null, $severita_a = null, $id_dominio = null, $iuv = null, $id_a2_a = null, $id_pendenza = null, string $contentType = self::contentTypes['findPagamenti'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindPagamenti200Response';
        $request = $this->findPagamentiRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $stato, $versante, $id_sessione_portale, $verificato, $data_da, $data_a, $id_debitore, $id, $metadati_paginazione, $max_risultati, $severita_da, $severita_a, $id_dominio, $iuv, $id_a2_a, $id_pendenza, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findPagamenti'
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * dataRichiestaPagamento  * stato (optional, default to '+dataRichiestaPagamento')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  \GovPay\Backoffice\Model\StatoPagamento|null $stato Filtro sullo stato del pagamento (optional)
     * @param  string|null $versante Identificativo del soggetto versante del pagamento (optional)
     * @param  string|null $id_sessione_portale Identificativo della sessione di pagamento assegnato dall&#39;EC (optional)
     * @param  bool|null $verificato Filtro sui pagamenti verificati o meno (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  string|null $id Identificativo della richiesta di pagamento (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  int|null $severita_da filtro per severita errore (optional)
     * @param  int|null $severita_a filtro per severita errore (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPagamenti'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function findPagamentiRequest($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataRichiestaPagamento', $campi = null, $stato = null, $versante = null, $id_sessione_portale = null, $verificato = null, $data_da = null, $data_a = null, $id_debitore = null, $id = null, $metadati_paginazione = true, $max_risultati = true, $severita_da = null, $severita_a = null, $id_dominio = null, $iuv = null, $id_a2_a = null, $id_pendenza = null, string $contentType = self::contentTypes['findPagamenti'][0])
    {

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling PagamentiApi.findPagamenti, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling PagamentiApi.findPagamenti, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling PagamentiApi.findPagamenti, must be bigger than or equal to 0.');
        }
        














        if ($id_dominio !== null && !preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PagamentiApi.findPagamenti, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        




        $resourcePath = '/pagamenti';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stato,
            'stato', // param base name
            'StatoPagamento', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $versante,
            'versante', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_sessione_portale,
            'idSessionePortale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $verificato,
            'verificato', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_da,
            'dataDa', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_a,
            'dataA', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_debitore,
            'idDebitore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $severita_da,
            'severitaDa', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $severita_a,
            'severitaA', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_dominio,
            'idDominio', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iuv,
            'iuv', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_a2_a,
            'idA2A', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_pendenza,
            'idPendenza', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findRpps
     *
     * Lista delle richieste di pagamento pendenza
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * dataRichiesta  * stato (optional, default to '+dataRichiesta')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  string|null $ccp Codice contesto pagamento (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  \GovPay\Backoffice\Model\EsitoRpt|null $esito Esito della richiesta di pagamento (optional)
     * @param  string|null $id_pagamento Identificativo della richiesta di pagamento (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  \DateTime|null $data_rpt_da Filtro sulla data di invio della richiesta di pagamento (optional)
     * @param  \DateTime|null $data_rpt_a Filtro sulla data di invio della richiesta di pagamento (optional)
     * @param  \DateTime|null $data_rt_da Filtro sulla data di ricezione della ricevuta di pagamento (optional)
     * @param  \DateTime|null $data_rt_a Filtro sulla data di ricezione della ricevuta di pagamento (optional)
     * @param  string[]|null $direzione Filtro per direzione (optional)
     * @param  string[]|null $divisione Filtro per divisione (optional)
     * @param  string|null $tassonomia Filtro per tassonomia (optional)
     * @param  string|null $id_unita Identificativo dell&#39; unita&#39; operativa (optional)
     * @param  string|null $id_tipo_pendenza Identificativo della tipologia di pendenza (optional)
     * @param  string|null $anagrafica_debitore Filtro per anagrafica del soggetto debitore (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findRpps'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\FindRpps200Response|\GovPay\Backoffice\Model\FaultBean
     */
    public function findRpps($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataRichiesta', $campi = null, $id_dominio = null, $iuv = null, $ccp = null, $id_a2_a = null, $id_pendenza = null, $esito = null, $id_pagamento = null, $id_debitore = null, $data_rpt_da = null, $data_rpt_a = null, $data_rt_da = null, $data_rt_a = null, $direzione = null, $divisione = null, $tassonomia = null, $id_unita = null, $id_tipo_pendenza = null, $anagrafica_debitore = null, $metadati_paginazione = true, $max_risultati = true, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['findRpps'][0])
    {
        list($response) = $this->findRppsWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $id_dominio, $iuv, $ccp, $id_a2_a, $id_pendenza, $esito, $id_pagamento, $id_debitore, $data_rpt_da, $data_rpt_a, $data_rt_da, $data_rt_a, $direzione, $divisione, $tassonomia, $id_unita, $id_tipo_pendenza, $anagrafica_debitore, $metadati_paginazione, $max_risultati, $retrocompatibilita_messaggi_pago_pav1, $contentType);
        return $response;
    }

    /**
     * Operation findRppsWithHttpInfo
     *
     * Lista delle richieste di pagamento pendenza
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * dataRichiesta  * stato (optional, default to '+dataRichiesta')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  string|null $ccp Codice contesto pagamento (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  \GovPay\Backoffice\Model\EsitoRpt|null $esito Esito della richiesta di pagamento (optional)
     * @param  string|null $id_pagamento Identificativo della richiesta di pagamento (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  \DateTime|null $data_rpt_da Filtro sulla data di invio della richiesta di pagamento (optional)
     * @param  \DateTime|null $data_rpt_a Filtro sulla data di invio della richiesta di pagamento (optional)
     * @param  \DateTime|null $data_rt_da Filtro sulla data di ricezione della ricevuta di pagamento (optional)
     * @param  \DateTime|null $data_rt_a Filtro sulla data di ricezione della ricevuta di pagamento (optional)
     * @param  string[]|null $direzione Filtro per direzione (optional)
     * @param  string[]|null $divisione Filtro per divisione (optional)
     * @param  string|null $tassonomia Filtro per tassonomia (optional)
     * @param  string|null $id_unita Identificativo dell&#39; unita&#39; operativa (optional)
     * @param  string|null $id_tipo_pendenza Identificativo della tipologia di pendenza (optional)
     * @param  string|null $anagrafica_debitore Filtro per anagrafica del soggetto debitore (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findRpps'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\FindRpps200Response|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findRppsWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataRichiesta', $campi = null, $id_dominio = null, $iuv = null, $ccp = null, $id_a2_a = null, $id_pendenza = null, $esito = null, $id_pagamento = null, $id_debitore = null, $data_rpt_da = null, $data_rpt_a = null, $data_rt_da = null, $data_rt_a = null, $direzione = null, $divisione = null, $tassonomia = null, $id_unita = null, $id_tipo_pendenza = null, $anagrafica_debitore = null, $metadati_paginazione = true, $max_risultati = true, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['findRpps'][0])
    {
        $request = $this->findRppsRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $id_dominio, $iuv, $ccp, $id_a2_a, $id_pendenza, $esito, $id_pagamento, $id_debitore, $data_rpt_da, $data_rpt_a, $data_rt_da, $data_rt_a, $direzione, $divisione, $tassonomia, $id_unita, $id_tipo_pendenza, $anagrafica_debitore, $metadati_paginazione, $max_risultati, $retrocompatibilita_messaggi_pago_pav1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FindRpps200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\FindRpps200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FindRpps200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findRppsAsync
     *
     * Lista delle richieste di pagamento pendenza
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * dataRichiesta  * stato (optional, default to '+dataRichiesta')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  string|null $ccp Codice contesto pagamento (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  \GovPay\Backoffice\Model\EsitoRpt|null $esito Esito della richiesta di pagamento (optional)
     * @param  string|null $id_pagamento Identificativo della richiesta di pagamento (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  \DateTime|null $data_rpt_da Filtro sulla data di invio della richiesta di pagamento (optional)
     * @param  \DateTime|null $data_rpt_a Filtro sulla data di invio della richiesta di pagamento (optional)
     * @param  \DateTime|null $data_rt_da Filtro sulla data di ricezione della ricevuta di pagamento (optional)
     * @param  \DateTime|null $data_rt_a Filtro sulla data di ricezione della ricevuta di pagamento (optional)
     * @param  string[]|null $direzione Filtro per direzione (optional)
     * @param  string[]|null $divisione Filtro per divisione (optional)
     * @param  string|null $tassonomia Filtro per tassonomia (optional)
     * @param  string|null $id_unita Identificativo dell&#39; unita&#39; operativa (optional)
     * @param  string|null $id_tipo_pendenza Identificativo della tipologia di pendenza (optional)
     * @param  string|null $anagrafica_debitore Filtro per anagrafica del soggetto debitore (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findRpps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findRppsAsync($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataRichiesta', $campi = null, $id_dominio = null, $iuv = null, $ccp = null, $id_a2_a = null, $id_pendenza = null, $esito = null, $id_pagamento = null, $id_debitore = null, $data_rpt_da = null, $data_rpt_a = null, $data_rt_da = null, $data_rt_a = null, $direzione = null, $divisione = null, $tassonomia = null, $id_unita = null, $id_tipo_pendenza = null, $anagrafica_debitore = null, $metadati_paginazione = true, $max_risultati = true, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['findRpps'][0])
    {
        return $this->findRppsAsyncWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $campi, $id_dominio, $iuv, $ccp, $id_a2_a, $id_pendenza, $esito, $id_pagamento, $id_debitore, $data_rpt_da, $data_rpt_a, $data_rt_da, $data_rt_a, $direzione, $divisione, $tassonomia, $id_unita, $id_tipo_pendenza, $anagrafica_debitore, $metadati_paginazione, $max_risultati, $retrocompatibilita_messaggi_pago_pav1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findRppsAsyncWithHttpInfo
     *
     * Lista delle richieste di pagamento pendenza
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * dataRichiesta  * stato (optional, default to '+dataRichiesta')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  string|null $ccp Codice contesto pagamento (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  \GovPay\Backoffice\Model\EsitoRpt|null $esito Esito della richiesta di pagamento (optional)
     * @param  string|null $id_pagamento Identificativo della richiesta di pagamento (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  \DateTime|null $data_rpt_da Filtro sulla data di invio della richiesta di pagamento (optional)
     * @param  \DateTime|null $data_rpt_a Filtro sulla data di invio della richiesta di pagamento (optional)
     * @param  \DateTime|null $data_rt_da Filtro sulla data di ricezione della ricevuta di pagamento (optional)
     * @param  \DateTime|null $data_rt_a Filtro sulla data di ricezione della ricevuta di pagamento (optional)
     * @param  string[]|null $direzione Filtro per direzione (optional)
     * @param  string[]|null $divisione Filtro per divisione (optional)
     * @param  string|null $tassonomia Filtro per tassonomia (optional)
     * @param  string|null $id_unita Identificativo dell&#39; unita&#39; operativa (optional)
     * @param  string|null $id_tipo_pendenza Identificativo della tipologia di pendenza (optional)
     * @param  string|null $anagrafica_debitore Filtro per anagrafica del soggetto debitore (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findRpps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findRppsAsyncWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataRichiesta', $campi = null, $id_dominio = null, $iuv = null, $ccp = null, $id_a2_a = null, $id_pendenza = null, $esito = null, $id_pagamento = null, $id_debitore = null, $data_rpt_da = null, $data_rpt_a = null, $data_rt_da = null, $data_rt_a = null, $direzione = null, $divisione = null, $tassonomia = null, $id_unita = null, $id_tipo_pendenza = null, $anagrafica_debitore = null, $metadati_paginazione = true, $max_risultati = true, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['findRpps'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\FindRpps200Response';
        $request = $this->findRppsRequest($pagina, $risultati_per_pagina, $ordinamento, $campi, $id_dominio, $iuv, $ccp, $id_a2_a, $id_pendenza, $esito, $id_pagamento, $id_debitore, $data_rpt_da, $data_rpt_a, $data_rt_da, $data_rt_a, $direzione, $divisione, $tassonomia, $id_unita, $id_tipo_pendenza, $anagrafica_debitore, $metadati_paginazione, $max_risultati, $retrocompatibilita_messaggi_pago_pav1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findRpps'
     *
     * @param  int|null $pagina Numero di pagina dei risultati (optional, default to 1)
     * @param  int|null $risultati_per_pagina Numero di risultati richiesti (max 5000) (optional, default to 25)
     * @param  string|null $ordinamento csv dei campi su cui ordinare i risultati, preceduti da + o - per ascendente o discendente (default ascendente)  * dataRichiesta  * stato (optional, default to '+dataRichiesta')
     * @param  string|null $campi csv dei campi da includere nella risposta (default tutti) (optional)
     * @param  string|null $id_dominio Identificativo del dominio beneficiario (optional)
     * @param  string|null $iuv Identificativo univoco di versamento (optional)
     * @param  string|null $ccp Codice contesto pagamento (optional)
     * @param  string|null $id_a2_a Identificativo del gestionale proprietario della pendenza (optional)
     * @param  string|null $id_pendenza Identificativo della pendenza nel gestionale proprietario (optional)
     * @param  \GovPay\Backoffice\Model\EsitoRpt|null $esito Esito della richiesta di pagamento (optional)
     * @param  string|null $id_pagamento Identificativo della richiesta di pagamento (optional)
     * @param  string|null $id_debitore Identificativo del soggetto debitore della pendenza (optional)
     * @param  \DateTime|null $data_rpt_da Filtro sulla data di invio della richiesta di pagamento (optional)
     * @param  \DateTime|null $data_rpt_a Filtro sulla data di invio della richiesta di pagamento (optional)
     * @param  \DateTime|null $data_rt_da Filtro sulla data di ricezione della ricevuta di pagamento (optional)
     * @param  \DateTime|null $data_rt_a Filtro sulla data di ricezione della ricevuta di pagamento (optional)
     * @param  string[]|null $direzione Filtro per direzione (optional)
     * @param  string[]|null $divisione Filtro per divisione (optional)
     * @param  string|null $tassonomia Filtro per tassonomia (optional)
     * @param  string|null $id_unita Identificativo dell&#39; unita&#39; operativa (optional)
     * @param  string|null $id_tipo_pendenza Identificativo della tipologia di pendenza (optional)
     * @param  string|null $anagrafica_debitore Filtro per anagrafica del soggetto debitore (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findRpps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findRppsRequest($pagina = 1, $risultati_per_pagina = 25, $ordinamento = '+dataRichiesta', $campi = null, $id_dominio = null, $iuv = null, $ccp = null, $id_a2_a = null, $id_pendenza = null, $esito = null, $id_pagamento = null, $id_debitore = null, $data_rpt_da = null, $data_rpt_a = null, $data_rt_da = null, $data_rt_a = null, $direzione = null, $divisione = null, $tassonomia = null, $id_unita = null, $id_tipo_pendenza = null, $anagrafica_debitore = null, $metadati_paginazione = true, $max_risultati = true, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['findRpps'][0])
    {

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling PagamentiApi.findRpps, must be bigger than or equal to 1.');
        }
        
        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling PagamentiApi.findRpps, must be smaller than or equal to 200.');
        }
        if ($risultati_per_pagina !== null && $risultati_per_pagina < 0) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling PagamentiApi.findRpps, must be bigger than or equal to 0.');
        }
        


        if ($id_dominio !== null && !preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PagamentiApi.findRpps, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        





















        $resourcePath = '/rpp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campi,
            'campi', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_dominio,
            'idDominio', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iuv,
            'iuv', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ccp,
            'ccp', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_a2_a,
            'idA2A', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_pendenza,
            'idPendenza', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $esito,
            'esito', // param base name
            'EsitoRpt', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_pagamento,
            'idPagamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_debitore,
            'idDebitore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_rpt_da,
            'dataRptDa', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_rpt_a,
            'dataRptA', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_rt_da,
            'dataRtDa', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_rt_a,
            'dataRtA', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direzione,
            'direzione', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $divisione,
            'divisione', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tassonomia,
            'tassonomia', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_unita,
            'idUnita', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_tipo_pendenza,
            'idTipoPendenza', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $anagrafica_debitore,
            'anagraficaDebitore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $retrocompatibilita_messaggi_pago_pav1,
            'retrocompatibilitaMessaggiPagoPAV1', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPagamento
     *
     * Dettaglio di un pagamento
     *
     * @param  string $id Identificativo del pagamento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagamento'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\Pagamento|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean
     * @deprecated
     */
    public function getPagamento($id, string $contentType = self::contentTypes['getPagamento'][0])
    {
        list($response) = $this->getPagamentoWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getPagamentoWithHttpInfo
     *
     * Dettaglio di un pagamento
     *
     * @param  string $id Identificativo del pagamento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagamento'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\Pagamento|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getPagamentoWithHttpInfo($id, string $contentType = self::contentTypes['getPagamento'][0])
    {
        $request = $this->getPagamentoRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\Pagamento',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\Pagamento',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\Pagamento',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPagamentoAsync
     *
     * Dettaglio di un pagamento
     *
     * @param  string $id Identificativo del pagamento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagamento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getPagamentoAsync($id, string $contentType = self::contentTypes['getPagamento'][0])
    {
        return $this->getPagamentoAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPagamentoAsyncWithHttpInfo
     *
     * Dettaglio di un pagamento
     *
     * @param  string $id Identificativo del pagamento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagamento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getPagamentoAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getPagamento'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\Pagamento';
        $request = $this->getPagamentoRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPagamento'
     *
     * @param  string $id Identificativo del pagamento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPagamento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getPagamentoRequest($id, string $contentType = self::contentTypes['getPagamento'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPagamento'
            );
        }


        $resourcePath = '/pagamenti/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRpp
     *
     * Dettaglio di una richiesta di pagamento pendenza
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRpp'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\Rpp|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean
     */
    public function getRpp($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRpp'][0])
    {
        list($response) = $this->getRppWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType);
        return $response;
    }

    /**
     * Operation getRppWithHttpInfo
     *
     * Dettaglio di una richiesta di pagamento pendenza
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRpp'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\Rpp|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRppWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRpp'][0])
    {
        $request = $this->getRppRequest($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\Rpp',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\Rpp',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\Rpp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRppAsync
     *
     * Dettaglio di una richiesta di pagamento pendenza
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRpp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRppAsync($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRpp'][0])
    {
        return $this->getRppAsyncWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRppAsyncWithHttpInfo
     *
     * Dettaglio di una richiesta di pagamento pendenza
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRpp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRppAsyncWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRpp'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\Rpp';
        $request = $this->getRppRequest($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRpp'
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRpp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRppRequest($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRpp'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getRpp'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PagamentiApi.getRpp, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'iuv' is set
        if ($iuv === null || (is_array($iuv) && count($iuv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iuv when calling getRpp'
            );
        }

        // verify the required parameter 'ccp' is set
        if ($ccp === null || (is_array($ccp) && count($ccp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ccp when calling getRpp'
            );
        }



        $resourcePath = '/rpp/{idDominio}/{iuv}/{ccp}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $retrocompatibilita_messaggi_pago_pav1,
            'retrocompatibilitaMessaggiPagoPAV1', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($iuv !== null) {
            $resourcePath = str_replace(
                '{' . 'iuv' . '}',
                ObjectSerializer::toPathValue($iuv),
                $resourcePath
            );
        }
        // path params
        if ($ccp !== null) {
            $resourcePath = str_replace(
                '{' . 'ccp' . '}',
                ObjectSerializer::toPathValue($ccp),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRpt
     *
     * Dettaglio della richiesta di pagamento pagopa
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRpt'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\GovPay\Backoffice\Model\FaultBean
     */
    public function getRpt($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRpt'][0])
    {
        list($response) = $this->getRptWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType);
        return $response;
    }

    /**
     * Operation getRptWithHttpInfo
     *
     * Dettaglio della richiesta di pagamento pagopa
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRpt'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRptWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRpt'][0])
    {
        $request = $this->getRptRequest($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'string',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRptAsync
     *
     * Dettaglio della richiesta di pagamento pagopa
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRpt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRptAsync($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRpt'][0])
    {
        return $this->getRptAsyncWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRptAsyncWithHttpInfo
     *
     * Dettaglio della richiesta di pagamento pagopa
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRpt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRptAsyncWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRpt'][0])
    {
        $returnType = 'string';
        $request = $this->getRptRequest($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRpt'
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRpt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRptRequest($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRpt'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getRpt'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PagamentiApi.getRpt, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'iuv' is set
        if ($iuv === null || (is_array($iuv) && count($iuv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iuv when calling getRpt'
            );
        }

        // verify the required parameter 'ccp' is set
        if ($ccp === null || (is_array($ccp) && count($ccp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ccp when calling getRpt'
            );
        }



        $resourcePath = '/rpp/{idDominio}/{iuv}/{ccp}/rpt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $retrocompatibilita_messaggi_pago_pav1,
            'retrocompatibilitaMessaggiPagoPAV1', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($iuv !== null) {
            $resourcePath = str_replace(
                '{' . 'iuv' . '}',
                ObjectSerializer::toPathValue($iuv),
                $resourcePath
            );
        }
        // path params
        if ($ccp !== null) {
            $resourcePath = str_replace(
                '{' . 'ccp' . '}',
                ObjectSerializer::toPathValue($ccp),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRt
     *
     * Dettaglio della ricevuta di pagamento
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRt'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\GovPay\Backoffice\Model\FaultBean
     */
    public function getRt($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRt'][0])
    {
        list($response) = $this->getRtWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType);
        return $response;
    }

    /**
     * Operation getRtWithHttpInfo
     *
     * Dettaglio della ricevuta di pagamento
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRt'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRtWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRt'][0])
    {
        $request = $this->getRtRequest($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRtAsync
     *
     * Dettaglio della ricevuta di pagamento
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRtAsync($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRt'][0])
    {
        return $this->getRtAsyncWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRtAsyncWithHttpInfo
     *
     * Dettaglio della ricevuta di pagamento
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRtAsyncWithHttpInfo($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRt'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getRtRequest($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRt'
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  bool|null $retrocompatibilita_messaggi_pago_pav1 abilita la conversione dei messaggi PagoPA nel formato V1 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRtRequest($id_dominio, $iuv, $ccp, $retrocompatibilita_messaggi_pago_pav1 = null, string $contentType = self::contentTypes['getRt'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getRt'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PagamentiApi.getRt, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'iuv' is set
        if ($iuv === null || (is_array($iuv) && count($iuv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iuv when calling getRt'
            );
        }

        // verify the required parameter 'ccp' is set
        if ($ccp === null || (is_array($ccp) && count($ccp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ccp when calling getRt'
            );
        }



        $resourcePath = '/rpp/{idDominio}/{iuv}/{ccp}/rt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $retrocompatibilita_messaggi_pago_pav1,
            'retrocompatibilitaMessaggiPagoPAV1', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($iuv !== null) {
            $resourcePath = str_replace(
                '{' . 'iuv' . '}',
                ObjectSerializer::toPathValue($iuv),
                $resourcePath
            );
        }
        // path params
        if ($ccp !== null) {
            $resourcePath = str_replace(
                '{' . 'ccp' . '}',
                ObjectSerializer::toPathValue($ccp),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/xml', 'application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePagamento
     *
     * Aggiorna selettivamente campi di un pagamento
     *
     * @param  string $id Identificativo del pagamento (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePagamento'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\Pagamento|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean
     * @deprecated
     */
    public function updatePagamento($id, $patch_op, string $contentType = self::contentTypes['updatePagamento'][0])
    {
        list($response) = $this->updatePagamentoWithHttpInfo($id, $patch_op, $contentType);
        return $response;
    }

    /**
     * Operation updatePagamentoWithHttpInfo
     *
     * Aggiorna selettivamente campi di un pagamento
     *
     * @param  string $id Identificativo del pagamento (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePagamento'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\Pagamento|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updatePagamentoWithHttpInfo($id, $patch_op, string $contentType = self::contentTypes['updatePagamento'][0])
    {
        $request = $this->updatePagamentoRequest($id, $patch_op, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\Pagamento',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\Pagamento',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\Pagamento',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updatePagamentoAsync
     *
     * Aggiorna selettivamente campi di un pagamento
     *
     * @param  string $id Identificativo del pagamento (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePagamento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updatePagamentoAsync($id, $patch_op, string $contentType = self::contentTypes['updatePagamento'][0])
    {
        return $this->updatePagamentoAsyncWithHttpInfo($id, $patch_op, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePagamentoAsyncWithHttpInfo
     *
     * Aggiorna selettivamente campi di un pagamento
     *
     * @param  string $id Identificativo del pagamento (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePagamento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updatePagamentoAsyncWithHttpInfo($id, $patch_op, string $contentType = self::contentTypes['updatePagamento'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\Pagamento';
        $request = $this->updatePagamentoRequest($id, $patch_op, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePagamento'
     *
     * @param  string $id Identificativo del pagamento (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePagamento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updatePagamentoRequest($id, $patch_op, string $contentType = self::contentTypes['updatePagamento'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePagamento'
            );
        }

        // verify the required parameter 'patch_op' is set
        if ($patch_op === null || (is_array($patch_op) && count($patch_op) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patch_op when calling updatePagamento'
            );
        }


        $resourcePath = '/pagamenti/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_op)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_op));
            } else {
                $httpBody = $patch_op;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRpp
     *
     * Aggiorna selettivamente campi di una richiesta di pagamento
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRpp'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Backoffice\Model\Rpp|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean
     */
    public function updateRpp($id_dominio, $iuv, $ccp, $patch_op, string $contentType = self::contentTypes['updateRpp'][0])
    {
        list($response) = $this->updateRppWithHttpInfo($id_dominio, $iuv, $ccp, $patch_op, $contentType);
        return $response;
    }

    /**
     * Operation updateRppWithHttpInfo
     *
     * Aggiorna selettivamente campi di una richiesta di pagamento
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRpp'] to see the possible values for this operation
     *
     * @throws \GovPay\Backoffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Backoffice\Model\Rpp|\GovPay\Backoffice\Model\FaultBean|\GovPay\Backoffice\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRppWithHttpInfo($id_dominio, $iuv, $ccp, $patch_op, string $contentType = self::contentTypes['updateRpp'][0])
    {
        $request = $this->updateRppRequest($id_dominio, $iuv, $ccp, $patch_op, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\Rpp',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Backoffice\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Backoffice\Model\Rpp',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\Rpp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Backoffice\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateRppAsync
     *
     * Aggiorna selettivamente campi di una richiesta di pagamento
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRpp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRppAsync($id_dominio, $iuv, $ccp, $patch_op, string $contentType = self::contentTypes['updateRpp'][0])
    {
        return $this->updateRppAsyncWithHttpInfo($id_dominio, $iuv, $ccp, $patch_op, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRppAsyncWithHttpInfo
     *
     * Aggiorna selettivamente campi di una richiesta di pagamento
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRpp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRppAsyncWithHttpInfo($id_dominio, $iuv, $ccp, $patch_op, string $contentType = self::contentTypes['updateRpp'][0])
    {
        $returnType = '\GovPay\Backoffice\Model\Rpp';
        $request = $this->updateRppRequest($id_dominio, $iuv, $ccp, $patch_op, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRpp'
     *
     * @param  string $id_dominio Codice fiscale del dominio beneficiario (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $ccp Codice di contesto pagamento (required)
     * @param  \GovPay\Backoffice\Model\PatchOp[] $patch_op (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRpp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRppRequest($id_dominio, $iuv, $ccp, $patch_op, string $contentType = self::contentTypes['updateRpp'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling updateRpp'
            );
        }
        if (!preg_match("/(^([0-9]){11}$)/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling PagamentiApi.updateRpp, must conform to the pattern /(^([0-9]){11}$)/.");
        }
        
        // verify the required parameter 'iuv' is set
        if ($iuv === null || (is_array($iuv) && count($iuv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iuv when calling updateRpp'
            );
        }

        // verify the required parameter 'ccp' is set
        if ($ccp === null || (is_array($ccp) && count($ccp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ccp when calling updateRpp'
            );
        }

        // verify the required parameter 'patch_op' is set
        if ($patch_op === null || (is_array($patch_op) && count($patch_op) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patch_op when calling updateRpp'
            );
        }


        $resourcePath = '/rpp/{idDominio}/{iuv}/{ccp}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($iuv !== null) {
            $resourcePath = str_replace(
                '{' . 'iuv' . '}',
                ObjectSerializer::toPathValue($iuv),
                $resourcePath
            );
        }
        // path params
        if ($ccp !== null) {
            $resourcePath = str_replace(
                '{' . 'ccp' . '}',
                ObjectSerializer::toPathValue($ccp),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_op)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_op));
            } else {
                $httpBody = $patch_op;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}

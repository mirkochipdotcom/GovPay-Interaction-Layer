<?php
/**
 * RicevuteApi
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Ragioneria
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Ragioneria
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Ragioneria\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use GovPay\Ragioneria\ApiException;
use GovPay\Ragioneria\Configuration;
use GovPay\Ragioneria\FormDataProcessor;
use GovPay\Ragioneria\HeaderSelector;
use GovPay\Ragioneria\ObjectSerializer;

/**
 * RicevuteApi Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Ragioneria
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RicevuteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'findRicevute' => [
            'application/json',
        ],
        'getRicevuta' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation findRicevute
     *
     * Ricerca delle ricevute di pagamento
     *
     * @param  int|null $pagina Numero di pagina di risultato (optional, default to 1)
     * @param  int|null $risultati_per_pagina How many items to return at one time (optional, default to 25)
     * @param  string|null $ordinamento Sorting order (optional)
     * @param  string|null $id_dominio Identificativo dell&#39;Ente Creditore in pagoPA. Corrisponde al codice fiscale. (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string|null $iuv Identificativo del versamento (optional)
     * @param  string|null $id_ricevuta Identificativo della ricevuta (optional)
     * @param  string|null $numero_avviso Numero identificativo dell&#39;avviso pagoPA (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findRicevute'] to see the possible values for this operation
     *
     * @throws \GovPay\Ragioneria\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Ragioneria\Model\Ricevute|\GovPay\Ragioneria\Model\FaultBean|\GovPay\Ragioneria\Model\FaultBean
     */
    public function findRicevute($pagina = 1, $risultati_per_pagina = 25, $ordinamento = null, $id_dominio = null, $data_da = null, $data_a = null, $metadati_paginazione = true, $max_risultati = true, $iuv = null, $id_ricevuta = null, $numero_avviso = null, string $contentType = self::contentTypes['findRicevute'][0])
    {
        list($response) = $this->findRicevuteWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $id_dominio, $data_da, $data_a, $metadati_paginazione, $max_risultati, $iuv, $id_ricevuta, $numero_avviso, $contentType);
        return $response;
    }

    /**
     * Operation findRicevuteWithHttpInfo
     *
     * Ricerca delle ricevute di pagamento
     *
     * @param  int|null $pagina Numero di pagina di risultato (optional, default to 1)
     * @param  int|null $risultati_per_pagina How many items to return at one time (optional, default to 25)
     * @param  string|null $ordinamento Sorting order (optional)
     * @param  string|null $id_dominio Identificativo dell&#39;Ente Creditore in pagoPA. Corrisponde al codice fiscale. (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string|null $iuv Identificativo del versamento (optional)
     * @param  string|null $id_ricevuta Identificativo della ricevuta (optional)
     * @param  string|null $numero_avviso Numero identificativo dell&#39;avviso pagoPA (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findRicevute'] to see the possible values for this operation
     *
     * @throws \GovPay\Ragioneria\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Ragioneria\Model\Ricevute|\GovPay\Ragioneria\Model\FaultBean|\GovPay\Ragioneria\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function findRicevuteWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = null, $id_dominio = null, $data_da = null, $data_a = null, $metadati_paginazione = true, $max_risultati = true, $iuv = null, $id_ricevuta = null, $numero_avviso = null, string $contentType = self::contentTypes['findRicevute'][0])
    {
        $request = $this->findRicevuteRequest($pagina, $risultati_per_pagina, $ordinamento, $id_dominio, $data_da, $data_a, $metadati_paginazione, $max_risultati, $iuv, $id_ricevuta, $numero_avviso, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Ragioneria\Model\Ricevute',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Ragioneria\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Ragioneria\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Ragioneria\Model\Ricevute',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Ragioneria\Model\Ricevute',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Ragioneria\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Ragioneria\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findRicevuteAsync
     *
     * Ricerca delle ricevute di pagamento
     *
     * @param  int|null $pagina Numero di pagina di risultato (optional, default to 1)
     * @param  int|null $risultati_per_pagina How many items to return at one time (optional, default to 25)
     * @param  string|null $ordinamento Sorting order (optional)
     * @param  string|null $id_dominio Identificativo dell&#39;Ente Creditore in pagoPA. Corrisponde al codice fiscale. (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string|null $iuv Identificativo del versamento (optional)
     * @param  string|null $id_ricevuta Identificativo della ricevuta (optional)
     * @param  string|null $numero_avviso Numero identificativo dell&#39;avviso pagoPA (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findRicevute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findRicevuteAsync($pagina = 1, $risultati_per_pagina = 25, $ordinamento = null, $id_dominio = null, $data_da = null, $data_a = null, $metadati_paginazione = true, $max_risultati = true, $iuv = null, $id_ricevuta = null, $numero_avviso = null, string $contentType = self::contentTypes['findRicevute'][0])
    {
        return $this->findRicevuteAsyncWithHttpInfo($pagina, $risultati_per_pagina, $ordinamento, $id_dominio, $data_da, $data_a, $metadati_paginazione, $max_risultati, $iuv, $id_ricevuta, $numero_avviso, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findRicevuteAsyncWithHttpInfo
     *
     * Ricerca delle ricevute di pagamento
     *
     * @param  int|null $pagina Numero di pagina di risultato (optional, default to 1)
     * @param  int|null $risultati_per_pagina How many items to return at one time (optional, default to 25)
     * @param  string|null $ordinamento Sorting order (optional)
     * @param  string|null $id_dominio Identificativo dell&#39;Ente Creditore in pagoPA. Corrisponde al codice fiscale. (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string|null $iuv Identificativo del versamento (optional)
     * @param  string|null $id_ricevuta Identificativo della ricevuta (optional)
     * @param  string|null $numero_avviso Numero identificativo dell&#39;avviso pagoPA (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findRicevute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findRicevuteAsyncWithHttpInfo($pagina = 1, $risultati_per_pagina = 25, $ordinamento = null, $id_dominio = null, $data_da = null, $data_a = null, $metadati_paginazione = true, $max_risultati = true, $iuv = null, $id_ricevuta = null, $numero_avviso = null, string $contentType = self::contentTypes['findRicevute'][0])
    {
        $returnType = '\GovPay\Ragioneria\Model\Ricevute';
        $request = $this->findRicevuteRequest($pagina, $risultati_per_pagina, $ordinamento, $id_dominio, $data_da, $data_a, $metadati_paginazione, $max_risultati, $iuv, $id_ricevuta, $numero_avviso, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findRicevute'
     *
     * @param  int|null $pagina Numero di pagina di risultato (optional, default to 1)
     * @param  int|null $risultati_per_pagina How many items to return at one time (optional, default to 25)
     * @param  string|null $ordinamento Sorting order (optional)
     * @param  string|null $id_dominio Identificativo dell&#39;Ente Creditore in pagoPA. Corrisponde al codice fiscale. (optional)
     * @param  \DateTime|null $data_da Inizio della finestra temporale di osservazione (optional)
     * @param  \DateTime|null $data_a Fine della finestra temporale di osservazione (optional)
     * @param  bool|null $metadati_paginazione Indica se il servizio calcola e valorizza i dati di paginazione o meno (optional, default to true)
     * @param  bool|null $max_risultati Indica se il servizio deve impostare o meno il limite sul calcolo del numero di risultati (optional, default to true)
     * @param  string|null $iuv Identificativo del versamento (optional)
     * @param  string|null $id_ricevuta Identificativo della ricevuta (optional)
     * @param  string|null $numero_avviso Numero identificativo dell&#39;avviso pagoPA (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findRicevute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findRicevuteRequest($pagina = 1, $risultati_per_pagina = 25, $ordinamento = null, $id_dominio = null, $data_da = null, $data_a = null, $metadati_paginazione = true, $max_risultati = true, $iuv = null, $id_ricevuta = null, $numero_avviso = null, string $contentType = self::contentTypes['findRicevute'][0])
    {


        if ($risultati_per_pagina !== null && $risultati_per_pagina > 200) {
            throw new \InvalidArgumentException('invalid value for "$risultati_per_pagina" when calling RicevuteApi.findRicevute, must be smaller than or equal to 200.');
        }
        

        if ($id_dominio !== null && !preg_match("/^([0-9]){11}$/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling RicevuteApi.findRicevute, must conform to the pattern /^([0-9]){11}$/.");
        }
        




        if ($iuv !== null && !preg_match("/(^([0-9A-Za-z]){1,35}$)/", $iuv)) {
            throw new \InvalidArgumentException("invalid value for \"iuv\" when calling RicevuteApi.findRicevute, must conform to the pattern /(^([0-9A-Za-z]){1,35}$)/.");
        }
        
        if ($id_ricevuta !== null && !preg_match("/(^([0-9A-Za-z]){1,35}$)/", $id_ricevuta)) {
            throw new \InvalidArgumentException("invalid value for \"id_ricevuta\" when calling RicevuteApi.findRicevute, must conform to the pattern /(^([0-9A-Za-z]){1,35}$)/.");
        }
        
        if ($numero_avviso !== null && !preg_match("/[0-9]18/", $numero_avviso)) {
            throw new \InvalidArgumentException("invalid value for \"numero_avviso\" when calling RicevuteApi.findRicevute, must conform to the pattern /[0-9]18/.");
        }
        

        $resourcePath = '/ricevute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $risultati_per_pagina,
            'risultatiPerPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinamento,
            'ordinamento', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_dominio,
            'idDominio', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_da,
            'dataDa', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_a,
            'dataA', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadati_paginazione,
            'metadatiPaginazione', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_risultati,
            'maxRisultati', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iuv,
            'iuv', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_ricevuta,
            'idRicevuta', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $numero_avviso,
            'numeroAvviso', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRicevuta
     *
     * Acquisizione di una ricevuta di avvenuto pagamento pagoPA
     *
     * @param  string $id_dominio Identificativo dell&#39;Ente Creditore in pagoPA. Corrisponde al codice fiscale. (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $id_ricevuta Identificativo della ricevuta di pagamento. Corrisponde al &#x60;receiptId&#x60; oppure al &#x60;ccp&#x60; a seconda del modello di pagamento utilizzato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRicevuta'] to see the possible values for this operation
     *
     * @throws \GovPay\Ragioneria\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GovPay\Ragioneria\Model\Ricevuta|\GovPay\Ragioneria\Model\FaultBean|\GovPay\Ragioneria\Model\FaultBean
     */
    public function getRicevuta($id_dominio, $iuv, $id_ricevuta, string $contentType = self::contentTypes['getRicevuta'][0])
    {
        list($response) = $this->getRicevutaWithHttpInfo($id_dominio, $iuv, $id_ricevuta, $contentType);
        return $response;
    }

    /**
     * Operation getRicevutaWithHttpInfo
     *
     * Acquisizione di una ricevuta di avvenuto pagamento pagoPA
     *
     * @param  string $id_dominio Identificativo dell&#39;Ente Creditore in pagoPA. Corrisponde al codice fiscale. (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $id_ricevuta Identificativo della ricevuta di pagamento. Corrisponde al &#x60;receiptId&#x60; oppure al &#x60;ccp&#x60; a seconda del modello di pagamento utilizzato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRicevuta'] to see the possible values for this operation
     *
     * @throws \GovPay\Ragioneria\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GovPay\Ragioneria\Model\Ricevuta|\GovPay\Ragioneria\Model\FaultBean|\GovPay\Ragioneria\Model\FaultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRicevutaWithHttpInfo($id_dominio, $iuv, $id_ricevuta, string $contentType = self::contentTypes['getRicevuta'][0])
    {
        $request = $this->getRicevutaRequest($id_dominio, $iuv, $id_ricevuta, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Ragioneria\Model\Ricevuta',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Ragioneria\Model\FaultBean',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\GovPay\Ragioneria\Model\FaultBean',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\GovPay\Ragioneria\Model\Ricevuta',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Ragioneria\Model\Ricevuta',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Ragioneria\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GovPay\Ragioneria\Model\FaultBean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRicevutaAsync
     *
     * Acquisizione di una ricevuta di avvenuto pagamento pagoPA
     *
     * @param  string $id_dominio Identificativo dell&#39;Ente Creditore in pagoPA. Corrisponde al codice fiscale. (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $id_ricevuta Identificativo della ricevuta di pagamento. Corrisponde al &#x60;receiptId&#x60; oppure al &#x60;ccp&#x60; a seconda del modello di pagamento utilizzato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRicevuta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRicevutaAsync($id_dominio, $iuv, $id_ricevuta, string $contentType = self::contentTypes['getRicevuta'][0])
    {
        return $this->getRicevutaAsyncWithHttpInfo($id_dominio, $iuv, $id_ricevuta, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRicevutaAsyncWithHttpInfo
     *
     * Acquisizione di una ricevuta di avvenuto pagamento pagoPA
     *
     * @param  string $id_dominio Identificativo dell&#39;Ente Creditore in pagoPA. Corrisponde al codice fiscale. (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $id_ricevuta Identificativo della ricevuta di pagamento. Corrisponde al &#x60;receiptId&#x60; oppure al &#x60;ccp&#x60; a seconda del modello di pagamento utilizzato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRicevuta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRicevutaAsyncWithHttpInfo($id_dominio, $iuv, $id_ricevuta, string $contentType = self::contentTypes['getRicevuta'][0])
    {
        $returnType = '\GovPay\Ragioneria\Model\Ricevuta';
        $request = $this->getRicevutaRequest($id_dominio, $iuv, $id_ricevuta, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRicevuta'
     *
     * @param  string $id_dominio Identificativo dell&#39;Ente Creditore in pagoPA. Corrisponde al codice fiscale. (required)
     * @param  string $iuv Identificativo univoco di versamento (required)
     * @param  string $id_ricevuta Identificativo della ricevuta di pagamento. Corrisponde al &#x60;receiptId&#x60; oppure al &#x60;ccp&#x60; a seconda del modello di pagamento utilizzato (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRicevuta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRicevutaRequest($id_dominio, $iuv, $id_ricevuta, string $contentType = self::contentTypes['getRicevuta'][0])
    {

        // verify the required parameter 'id_dominio' is set
        if ($id_dominio === null || (is_array($id_dominio) && count($id_dominio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_dominio when calling getRicevuta'
            );
        }
        if (!preg_match("/^([0-9]){11}$/", $id_dominio)) {
            throw new \InvalidArgumentException("invalid value for \"id_dominio\" when calling RicevuteApi.getRicevuta, must conform to the pattern /^([0-9]){11}$/.");
        }
        
        // verify the required parameter 'iuv' is set
        if ($iuv === null || (is_array($iuv) && count($iuv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iuv when calling getRicevuta'
            );
        }
        if (!preg_match("/^([\\w]){1,35}$/", $iuv)) {
            throw new \InvalidArgumentException("invalid value for \"iuv\" when calling RicevuteApi.getRicevuta, must conform to the pattern /^([\\w]){1,35}$/.");
        }
        
        // verify the required parameter 'id_ricevuta' is set
        if ($id_ricevuta === null || (is_array($id_ricevuta) && count($id_ricevuta) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_ricevuta when calling getRicevuta'
            );
        }


        $resourcePath = '/ricevute/{idDominio}/{iuv}/{idRicevuta}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_dominio !== null) {
            $resourcePath = str_replace(
                '{' . 'idDominio' . '}',
                ObjectSerializer::toPathValue($id_dominio),
                $resourcePath
            );
        }
        // path params
        if ($iuv !== null) {
            $resourcePath = str_replace(
                '{' . 'iuv' . '}',
                ObjectSerializer::toPathValue($iuv),
                $resourcePath
            );
        }
        // path params
        if ($id_ricevuta !== null) {
            $resourcePath = str_replace(
                '{' . 'idRicevuta' . '}',
                ObjectSerializer::toPathValue($id_ricevuta),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}

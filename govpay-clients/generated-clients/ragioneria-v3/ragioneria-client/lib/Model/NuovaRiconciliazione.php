<?php
/**
 * NuovaRiconciliazione
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Ragioneria
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Ragioneria
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Ragioneria\Model;

use \ArrayAccess;
use \GovPay\Ragioneria\ObjectSerializer;

/**
 * NuovaRiconciliazione Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Ragioneria
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NuovaRiconciliazione implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NuovaRiconciliazione';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'causale' => 'string',
        'iuv' => 'string',
        'id_flusso_rendicontazione' => 'string',
        'importo' => 'float',
        'data_valuta' => '\DateTime',
        'data_contabile' => '\DateTime',
        'conto_accredito' => 'string',
        'sct' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'causale' => null,
        'iuv' => null,
        'id_flusso_rendicontazione' => null,
        'importo' => null,
        'data_valuta' => 'date',
        'data_contabile' => 'date',
        'conto_accredito' => null,
        'sct' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'causale' => false,
        'iuv' => false,
        'id_flusso_rendicontazione' => false,
        'importo' => false,
        'data_valuta' => false,
        'data_contabile' => false,
        'conto_accredito' => false,
        'sct' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'causale' => 'causale',
        'iuv' => 'iuv',
        'id_flusso_rendicontazione' => 'idFlussoRendicontazione',
        'importo' => 'importo',
        'data_valuta' => 'dataValuta',
        'data_contabile' => 'dataContabile',
        'conto_accredito' => 'contoAccredito',
        'sct' => 'sct'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'causale' => 'setCausale',
        'iuv' => 'setIuv',
        'id_flusso_rendicontazione' => 'setIdFlussoRendicontazione',
        'importo' => 'setImporto',
        'data_valuta' => 'setDataValuta',
        'data_contabile' => 'setDataContabile',
        'conto_accredito' => 'setContoAccredito',
        'sct' => 'setSct'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'causale' => 'getCausale',
        'iuv' => 'getIuv',
        'id_flusso_rendicontazione' => 'getIdFlussoRendicontazione',
        'importo' => 'getImporto',
        'data_valuta' => 'getDataValuta',
        'data_contabile' => 'getDataContabile',
        'conto_accredito' => 'getContoAccredito',
        'sct' => 'getSct'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('causale', $data ?? [], null);
        $this->setIfExists('iuv', $data ?? [], null);
        $this->setIfExists('id_flusso_rendicontazione', $data ?? [], null);
        $this->setIfExists('importo', $data ?? [], null);
        $this->setIfExists('data_valuta', $data ?? [], null);
        $this->setIfExists('data_contabile', $data ?? [], null);
        $this->setIfExists('conto_accredito', $data ?? [], null);
        $this->setIfExists('sct', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['causale'] === null) {
            $invalidProperties[] = "'causale' can't be null";
        }
        if ($this->container['iuv'] === null) {
            $invalidProperties[] = "'iuv' can't be null";
        }
        if ($this->container['id_flusso_rendicontazione'] === null) {
            $invalidProperties[] = "'id_flusso_rendicontazione' can't be null";
        }
        if ($this->container['importo'] === null) {
            $invalidProperties[] = "'importo' can't be null";
        }
        if ($this->container['sct'] === null) {
            $invalidProperties[] = "'sct' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets causale
     *
     * @return string
     */
    public function getCausale()
    {
        return $this->container['causale'];
    }

    /**
     * Sets causale
     *
     * @param string $causale causale
     *
     * @return self
     */
    public function setCausale($causale)
    {
        if (is_null($causale)) {
            throw new \InvalidArgumentException('non-nullable causale cannot be null');
        }
        $this->container['causale'] = $causale;

        return $this;
    }

    /**
     * Gets iuv
     *
     * @return string
     */
    public function getIuv()
    {
        return $this->container['iuv'];
    }

    /**
     * Sets iuv
     *
     * @param string $iuv iuv
     *
     * @return self
     */
    public function setIuv($iuv)
    {
        if (is_null($iuv)) {
            throw new \InvalidArgumentException('non-nullable iuv cannot be null');
        }
        $this->container['iuv'] = $iuv;

        return $this;
    }

    /**
     * Gets id_flusso_rendicontazione
     *
     * @return string
     */
    public function getIdFlussoRendicontazione()
    {
        return $this->container['id_flusso_rendicontazione'];
    }

    /**
     * Sets id_flusso_rendicontazione
     *
     * @param string $id_flusso_rendicontazione id_flusso_rendicontazione
     *
     * @return self
     */
    public function setIdFlussoRendicontazione($id_flusso_rendicontazione)
    {
        if (is_null($id_flusso_rendicontazione)) {
            throw new \InvalidArgumentException('non-nullable id_flusso_rendicontazione cannot be null');
        }
        $this->container['id_flusso_rendicontazione'] = $id_flusso_rendicontazione;

        return $this;
    }

    /**
     * Gets importo
     *
     * @return float
     */
    public function getImporto()
    {
        return $this->container['importo'];
    }

    /**
     * Sets importo
     *
     * @param float $importo Importo del riversamento. Se valorizzato, viene verificato che corrisponda a quello dei pagamenti riconciliati.
     *
     * @return self
     */
    public function setImporto($importo)
    {
        if (is_null($importo)) {
            throw new \InvalidArgumentException('non-nullable importo cannot be null');
        }
        $this->container['importo'] = $importo;

        return $this;
    }

    /**
     * Gets data_valuta
     *
     * @return \DateTime|null
     */
    public function getDataValuta()
    {
        return $this->container['data_valuta'];
    }

    /**
     * Sets data_valuta
     *
     * @param \DateTime|null $data_valuta Data di valuta dell'incasso
     *
     * @return self
     */
    public function setDataValuta($data_valuta)
    {
        if (is_null($data_valuta)) {
            throw new \InvalidArgumentException('non-nullable data_valuta cannot be null');
        }
        $this->container['data_valuta'] = $data_valuta;

        return $this;
    }

    /**
     * Gets data_contabile
     *
     * @return \DateTime|null
     */
    public function getDataContabile()
    {
        return $this->container['data_contabile'];
    }

    /**
     * Sets data_contabile
     *
     * @param \DateTime|null $data_contabile Data di contabile dell'incasso
     *
     * @return self
     */
    public function setDataContabile($data_contabile)
    {
        if (is_null($data_contabile)) {
            throw new \InvalidArgumentException('non-nullable data_contabile cannot be null');
        }
        $this->container['data_contabile'] = $data_contabile;

        return $this;
    }

    /**
     * Gets conto_accredito
     *
     * @return string|null
     */
    public function getContoAccredito()
    {
        return $this->container['conto_accredito'];
    }

    /**
     * Sets conto_accredito
     *
     * @param string|null $conto_accredito Identificativo del conto di tesoreria su cui sono stati incassati i fondi
     *
     * @return self
     */
    public function setContoAccredito($conto_accredito)
    {
        if (is_null($conto_accredito)) {
            throw new \InvalidArgumentException('non-nullable conto_accredito cannot be null');
        }
        $this->container['conto_accredito'] = $conto_accredito;

        return $this;
    }

    /**
     * Gets sct
     *
     * @return string
     */
    public function getSct()
    {
        return $this->container['sct'];
    }

    /**
     * Sets sct
     *
     * @param string $sct Identificativo Sepa Credit Transfer
     *
     * @return self
     */
    public function setSct($sct)
    {
        if (is_null($sct)) {
            throw new \InvalidArgumentException('non-nullable sct cannot be null');
        }
        $this->container['sct'] = $sct;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



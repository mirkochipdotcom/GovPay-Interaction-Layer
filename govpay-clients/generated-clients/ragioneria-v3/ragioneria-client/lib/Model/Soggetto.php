<?php
/**
 * Soggetto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Ragioneria
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Ragioneria
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Ragioneria\Model;

use \ArrayAccess;
use \GovPay\Ragioneria\ObjectSerializer;

/**
 * Soggetto Class Doc Comment
 *
 * @category Class
 * @description dati anagrafici di un versante o pagatore.
 * @package  GovPay\Ragioneria
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Soggetto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Soggetto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tipo' => '\GovPay\Ragioneria\Model\TipoSoggetto',
        'identificativo' => 'string',
        'anagrafica' => 'string',
        'indirizzo' => 'string',
        'civico' => 'string',
        'cap' => 'string',
        'localita' => 'string',
        'provincia' => 'string',
        'nazione' => 'string',
        'email' => 'string',
        'cellulare' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tipo' => null,
        'identificativo' => null,
        'anagrafica' => null,
        'indirizzo' => null,
        'civico' => null,
        'cap' => null,
        'localita' => null,
        'provincia' => null,
        'nazione' => null,
        'email' => null,
        'cellulare' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tipo' => false,
        'identificativo' => false,
        'anagrafica' => false,
        'indirizzo' => false,
        'civico' => false,
        'cap' => false,
        'localita' => false,
        'provincia' => false,
        'nazione' => false,
        'email' => false,
        'cellulare' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tipo' => 'tipo',
        'identificativo' => 'identificativo',
        'anagrafica' => 'anagrafica',
        'indirizzo' => 'indirizzo',
        'civico' => 'civico',
        'cap' => 'cap',
        'localita' => 'localita',
        'provincia' => 'provincia',
        'nazione' => 'nazione',
        'email' => 'email',
        'cellulare' => 'cellulare'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tipo' => 'setTipo',
        'identificativo' => 'setIdentificativo',
        'anagrafica' => 'setAnagrafica',
        'indirizzo' => 'setIndirizzo',
        'civico' => 'setCivico',
        'cap' => 'setCap',
        'localita' => 'setLocalita',
        'provincia' => 'setProvincia',
        'nazione' => 'setNazione',
        'email' => 'setEmail',
        'cellulare' => 'setCellulare'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tipo' => 'getTipo',
        'identificativo' => 'getIdentificativo',
        'anagrafica' => 'getAnagrafica',
        'indirizzo' => 'getIndirizzo',
        'civico' => 'getCivico',
        'cap' => 'getCap',
        'localita' => 'getLocalita',
        'provincia' => 'getProvincia',
        'nazione' => 'getNazione',
        'email' => 'getEmail',
        'cellulare' => 'getCellulare'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('tipo', $data ?? [], null);
        $this->setIfExists('identificativo', $data ?? [], null);
        $this->setIfExists('anagrafica', $data ?? [], null);
        $this->setIfExists('indirizzo', $data ?? [], null);
        $this->setIfExists('civico', $data ?? [], null);
        $this->setIfExists('cap', $data ?? [], null);
        $this->setIfExists('localita', $data ?? [], null);
        $this->setIfExists('provincia', $data ?? [], null);
        $this->setIfExists('nazione', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('cellulare', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tipo'] === null) {
            $invalidProperties[] = "'tipo' can't be null";
        }
        if ($this->container['identificativo'] === null) {
            $invalidProperties[] = "'identificativo' can't be null";
        }
        if ((mb_strlen($this->container['identificativo']) > 35)) {
            $invalidProperties[] = "invalid value for 'identificativo', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['identificativo']) < 1)) {
            $invalidProperties[] = "invalid value for 'identificativo', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['anagrafica']) && (mb_strlen($this->container['anagrafica']) > 70)) {
            $invalidProperties[] = "invalid value for 'anagrafica', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['anagrafica']) && (mb_strlen($this->container['anagrafica']) < 1)) {
            $invalidProperties[] = "invalid value for 'anagrafica', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['indirizzo']) && (mb_strlen($this->container['indirizzo']) > 70)) {
            $invalidProperties[] = "invalid value for 'indirizzo', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['indirizzo']) && (mb_strlen($this->container['indirizzo']) < 1)) {
            $invalidProperties[] = "invalid value for 'indirizzo', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['civico']) && (mb_strlen($this->container['civico']) > 16)) {
            $invalidProperties[] = "invalid value for 'civico', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['civico']) && (mb_strlen($this->container['civico']) < 1)) {
            $invalidProperties[] = "invalid value for 'civico', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cap']) && (mb_strlen($this->container['cap']) > 16)) {
            $invalidProperties[] = "invalid value for 'cap', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['cap']) && (mb_strlen($this->container['cap']) < 1)) {
            $invalidProperties[] = "invalid value for 'cap', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['localita']) && (mb_strlen($this->container['localita']) > 35)) {
            $invalidProperties[] = "invalid value for 'localita', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['localita']) && (mb_strlen($this->container['localita']) < 1)) {
            $invalidProperties[] = "invalid value for 'localita', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['provincia']) && (mb_strlen($this->container['provincia']) > 35)) {
            $invalidProperties[] = "invalid value for 'provincia', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['provincia']) && (mb_strlen($this->container['provincia']) < 1)) {
            $invalidProperties[] = "invalid value for 'provincia', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['nazione']) && !preg_match("/[A-Z]{2,2}/", $this->container['nazione'])) {
            $invalidProperties[] = "invalid value for 'nazione', must be conform to the pattern /[A-Z]{2,2}/.";
        }

        if (!is_null($this->container['email']) && !preg_match("/[A-Za-z0-9_]+([\\-\\+\\.'][A-Za-z0-9_]+)*@[A-Za-z0-9_]+([\\-\\.][A-Za-z0-9_]+)*\\.[A-Za-z0-9_]+([\\-\\.][A-Za-z0-9_]+)*/", $this->container['email'])) {
            $invalidProperties[] = "invalid value for 'email', must be conform to the pattern /[A-Za-z0-9_]+([\\-\\+\\.'][A-Za-z0-9_]+)*@[A-Za-z0-9_]+([\\-\\.][A-Za-z0-9_]+)*\\.[A-Za-z0-9_]+([\\-\\.][A-Za-z0-9_]+)*/.";
        }

        if (!is_null($this->container['cellulare']) && !preg_match("/\\+[0-9]{2,2}\\s[0-9]{3,3}\\-[0-9]{7,7}/", $this->container['cellulare'])) {
            $invalidProperties[] = "invalid value for 'cellulare', must be conform to the pattern /\\+[0-9]{2,2}\\s[0-9]{3,3}\\-[0-9]{7,7}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tipo
     *
     * @return \GovPay\Ragioneria\Model\TipoSoggetto
     */
    public function getTipo()
    {
        return $this->container['tipo'];
    }

    /**
     * Sets tipo
     *
     * @param \GovPay\Ragioneria\Model\TipoSoggetto $tipo tipo
     *
     * @return self
     */
    public function setTipo($tipo)
    {
        if (is_null($tipo)) {
            throw new \InvalidArgumentException('non-nullable tipo cannot be null');
        }
        $this->container['tipo'] = $tipo;

        return $this;
    }

    /**
     * Gets identificativo
     *
     * @return string
     */
    public function getIdentificativo()
    {
        return $this->container['identificativo'];
    }

    /**
     * Sets identificativo
     *
     * @param string $identificativo codice fiscale o partita iva del soggetto
     *
     * @return self
     */
    public function setIdentificativo($identificativo)
    {
        if (is_null($identificativo)) {
            throw new \InvalidArgumentException('non-nullable identificativo cannot be null');
        }
        if ((mb_strlen($identificativo) > 35)) {
            throw new \InvalidArgumentException('invalid length for $identificativo when calling Soggetto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($identificativo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $identificativo when calling Soggetto., must be bigger than or equal to 1.');
        }

        $this->container['identificativo'] = $identificativo;

        return $this;
    }

    /**
     * Gets anagrafica
     *
     * @return string|null
     */
    public function getAnagrafica()
    {
        return $this->container['anagrafica'];
    }

    /**
     * Sets anagrafica
     *
     * @param string|null $anagrafica nome e cognome o altra ragione sociale del soggetto
     *
     * @return self
     */
    public function setAnagrafica($anagrafica)
    {
        if (is_null($anagrafica)) {
            throw new \InvalidArgumentException('non-nullable anagrafica cannot be null');
        }
        if ((mb_strlen($anagrafica) > 70)) {
            throw new \InvalidArgumentException('invalid length for $anagrafica when calling Soggetto., must be smaller than or equal to 70.');
        }
        if ((mb_strlen($anagrafica) < 1)) {
            throw new \InvalidArgumentException('invalid length for $anagrafica when calling Soggetto., must be bigger than or equal to 1.');
        }

        $this->container['anagrafica'] = $anagrafica;

        return $this;
    }

    /**
     * Gets indirizzo
     *
     * @return string|null
     */
    public function getIndirizzo()
    {
        return $this->container['indirizzo'];
    }

    /**
     * Sets indirizzo
     *
     * @param string|null $indirizzo indirizzo
     *
     * @return self
     */
    public function setIndirizzo($indirizzo)
    {
        if (is_null($indirizzo)) {
            throw new \InvalidArgumentException('non-nullable indirizzo cannot be null');
        }
        if ((mb_strlen($indirizzo) > 70)) {
            throw new \InvalidArgumentException('invalid length for $indirizzo when calling Soggetto., must be smaller than or equal to 70.');
        }
        if ((mb_strlen($indirizzo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $indirizzo when calling Soggetto., must be bigger than or equal to 1.');
        }

        $this->container['indirizzo'] = $indirizzo;

        return $this;
    }

    /**
     * Gets civico
     *
     * @return string|null
     */
    public function getCivico()
    {
        return $this->container['civico'];
    }

    /**
     * Sets civico
     *
     * @param string|null $civico civico
     *
     * @return self
     */
    public function setCivico($civico)
    {
        if (is_null($civico)) {
            throw new \InvalidArgumentException('non-nullable civico cannot be null');
        }
        if ((mb_strlen($civico) > 16)) {
            throw new \InvalidArgumentException('invalid length for $civico when calling Soggetto., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($civico) < 1)) {
            throw new \InvalidArgumentException('invalid length for $civico when calling Soggetto., must be bigger than or equal to 1.');
        }

        $this->container['civico'] = $civico;

        return $this;
    }

    /**
     * Gets cap
     *
     * @return string|null
     */
    public function getCap()
    {
        return $this->container['cap'];
    }

    /**
     * Sets cap
     *
     * @param string|null $cap cap
     *
     * @return self
     */
    public function setCap($cap)
    {
        if (is_null($cap)) {
            throw new \InvalidArgumentException('non-nullable cap cannot be null');
        }
        if ((mb_strlen($cap) > 16)) {
            throw new \InvalidArgumentException('invalid length for $cap when calling Soggetto., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($cap) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cap when calling Soggetto., must be bigger than or equal to 1.');
        }

        $this->container['cap'] = $cap;

        return $this;
    }

    /**
     * Gets localita
     *
     * @return string|null
     */
    public function getLocalita()
    {
        return $this->container['localita'];
    }

    /**
     * Sets localita
     *
     * @param string|null $localita localita
     *
     * @return self
     */
    public function setLocalita($localita)
    {
        if (is_null($localita)) {
            throw new \InvalidArgumentException('non-nullable localita cannot be null');
        }
        if ((mb_strlen($localita) > 35)) {
            throw new \InvalidArgumentException('invalid length for $localita when calling Soggetto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($localita) < 1)) {
            throw new \InvalidArgumentException('invalid length for $localita when calling Soggetto., must be bigger than or equal to 1.');
        }

        $this->container['localita'] = $localita;

        return $this;
    }

    /**
     * Gets provincia
     *
     * @return string|null
     */
    public function getProvincia()
    {
        return $this->container['provincia'];
    }

    /**
     * Sets provincia
     *
     * @param string|null $provincia provincia
     *
     * @return self
     */
    public function setProvincia($provincia)
    {
        if (is_null($provincia)) {
            throw new \InvalidArgumentException('non-nullable provincia cannot be null');
        }
        if ((mb_strlen($provincia) > 35)) {
            throw new \InvalidArgumentException('invalid length for $provincia when calling Soggetto., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($provincia) < 1)) {
            throw new \InvalidArgumentException('invalid length for $provincia when calling Soggetto., must be bigger than or equal to 1.');
        }

        $this->container['provincia'] = $provincia;

        return $this;
    }

    /**
     * Gets nazione
     *
     * @return string|null
     */
    public function getNazione()
    {
        return $this->container['nazione'];
    }

    /**
     * Sets nazione
     *
     * @param string|null $nazione nazione
     *
     * @return self
     */
    public function setNazione($nazione)
    {
        if (is_null($nazione)) {
            throw new \InvalidArgumentException('non-nullable nazione cannot be null');
        }

        if ((!preg_match("/[A-Z]{2,2}/", ObjectSerializer::toString($nazione)))) {
            throw new \InvalidArgumentException("invalid value for \$nazione when calling Soggetto., must conform to the pattern /[A-Z]{2,2}/.");
        }

        $this->container['nazione'] = $nazione;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        if ((!preg_match("/[A-Za-z0-9_]+([\\-\\+\\.'][A-Za-z0-9_]+)*@[A-Za-z0-9_]+([\\-\\.][A-Za-z0-9_]+)*\\.[A-Za-z0-9_]+([\\-\\.][A-Za-z0-9_]+)*/", ObjectSerializer::toString($email)))) {
            throw new \InvalidArgumentException("invalid value for \$email when calling Soggetto., must conform to the pattern /[A-Za-z0-9_]+([\\-\\+\\.'][A-Za-z0-9_]+)*@[A-Za-z0-9_]+([\\-\\.][A-Za-z0-9_]+)*\\.[A-Za-z0-9_]+([\\-\\.][A-Za-z0-9_]+)*/.");
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets cellulare
     *
     * @return string|null
     */
    public function getCellulare()
    {
        return $this->container['cellulare'];
    }

    /**
     * Sets cellulare
     *
     * @param string|null $cellulare cellulare
     *
     * @return self
     */
    public function setCellulare($cellulare)
    {
        if (is_null($cellulare)) {
            throw new \InvalidArgumentException('non-nullable cellulare cannot be null');
        }

        if ((!preg_match("/\\+[0-9]{2,2}\\s[0-9]{3,3}\\-[0-9]{7,7}/", ObjectSerializer::toString($cellulare)))) {
            throw new \InvalidArgumentException("invalid value for \$cellulare when calling Soggetto., must conform to the pattern /\\+[0-9]{2,2}\\s[0-9]{3,3}\\-[0-9]{7,7}/.");
        }

        $this->container['cellulare'] = $cellulare;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



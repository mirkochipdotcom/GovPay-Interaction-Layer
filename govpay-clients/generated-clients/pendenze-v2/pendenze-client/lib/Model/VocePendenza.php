<?php
/**
 * VocePendenza
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Pendenze
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Pendenze
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.16.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Pendenze\Model;

use \ArrayAccess;
use \GovPay\Pendenze\ObjectSerializer;

/**
 * VocePendenza Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Pendenze
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VocePendenza implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VocePendenza';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cod_entrata' => 'string',
        'iban_accredito' => 'string',
        'iban_appoggio' => 'string',
        'tipo_contabilita' => '\GovPay\Pendenze\Model\TipoContabilita',
        'codice_contabilita' => 'string',
        'tipo_bollo' => 'string',
        'hash_documento' => 'string',
        'provincia_residenza' => 'string',
        'id_voce_pendenza' => 'string',
        'importo' => 'float',
        'descrizione' => 'string',
        'dati_allegati' => 'object',
        'descrizione_causale_rpt' => 'string',
        'contabilita' => '\GovPay\Pendenze\Model\Contabilita',
        'metadata' => '\GovPay\Pendenze\Model\Metadata',
        'indice' => 'int',
        'stato' => '\GovPay\Pendenze\Model\StatoVocePendenza',
        'dominio' => '\GovPay\Pendenze\Model\Dominio'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cod_entrata' => null,
        'iban_accredito' => null,
        'iban_appoggio' => null,
        'tipo_contabilita' => null,
        'codice_contabilita' => null,
        'tipo_bollo' => null,
        'hash_documento' => null,
        'provincia_residenza' => null,
        'id_voce_pendenza' => null,
        'importo' => 'double',
        'descrizione' => null,
        'dati_allegati' => null,
        'descrizione_causale_rpt' => null,
        'contabilita' => null,
        'metadata' => null,
        'indice' => 'int32',
        'stato' => null,
        'dominio' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cod_entrata' => false,
        'iban_accredito' => false,
        'iban_appoggio' => false,
        'tipo_contabilita' => false,
        'codice_contabilita' => false,
        'tipo_bollo' => false,
        'hash_documento' => false,
        'provincia_residenza' => false,
        'id_voce_pendenza' => false,
        'importo' => false,
        'descrizione' => false,
        'dati_allegati' => false,
        'descrizione_causale_rpt' => false,
        'contabilita' => false,
        'metadata' => false,
        'indice' => false,
        'stato' => false,
        'dominio' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cod_entrata' => 'codEntrata',
        'iban_accredito' => 'ibanAccredito',
        'iban_appoggio' => 'ibanAppoggio',
        'tipo_contabilita' => 'tipoContabilita',
        'codice_contabilita' => 'codiceContabilita',
        'tipo_bollo' => 'tipoBollo',
        'hash_documento' => 'hashDocumento',
        'provincia_residenza' => 'provinciaResidenza',
        'id_voce_pendenza' => 'idVocePendenza',
        'importo' => 'importo',
        'descrizione' => 'descrizione',
        'dati_allegati' => 'datiAllegati',
        'descrizione_causale_rpt' => 'descrizioneCausaleRPT',
        'contabilita' => 'contabilita',
        'metadata' => 'metadata',
        'indice' => 'indice',
        'stato' => 'stato',
        'dominio' => 'dominio'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cod_entrata' => 'setCodEntrata',
        'iban_accredito' => 'setIbanAccredito',
        'iban_appoggio' => 'setIbanAppoggio',
        'tipo_contabilita' => 'setTipoContabilita',
        'codice_contabilita' => 'setCodiceContabilita',
        'tipo_bollo' => 'setTipoBollo',
        'hash_documento' => 'setHashDocumento',
        'provincia_residenza' => 'setProvinciaResidenza',
        'id_voce_pendenza' => 'setIdVocePendenza',
        'importo' => 'setImporto',
        'descrizione' => 'setDescrizione',
        'dati_allegati' => 'setDatiAllegati',
        'descrizione_causale_rpt' => 'setDescrizioneCausaleRpt',
        'contabilita' => 'setContabilita',
        'metadata' => 'setMetadata',
        'indice' => 'setIndice',
        'stato' => 'setStato',
        'dominio' => 'setDominio'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cod_entrata' => 'getCodEntrata',
        'iban_accredito' => 'getIbanAccredito',
        'iban_appoggio' => 'getIbanAppoggio',
        'tipo_contabilita' => 'getTipoContabilita',
        'codice_contabilita' => 'getCodiceContabilita',
        'tipo_bollo' => 'getTipoBollo',
        'hash_documento' => 'getHashDocumento',
        'provincia_residenza' => 'getProvinciaResidenza',
        'id_voce_pendenza' => 'getIdVocePendenza',
        'importo' => 'getImporto',
        'descrizione' => 'getDescrizione',
        'dati_allegati' => 'getDatiAllegati',
        'descrizione_causale_rpt' => 'getDescrizioneCausaleRpt',
        'contabilita' => 'getContabilita',
        'metadata' => 'getMetadata',
        'indice' => 'getIndice',
        'stato' => 'getStato',
        'dominio' => 'getDominio'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIPO_BOLLO__01 = '01';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoBolloAllowableValues()
    {
        return [
            self::TIPO_BOLLO__01,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cod_entrata', $data ?? [], null);
        $this->setIfExists('iban_accredito', $data ?? [], null);
        $this->setIfExists('iban_appoggio', $data ?? [], null);
        $this->setIfExists('tipo_contabilita', $data ?? [], null);
        $this->setIfExists('codice_contabilita', $data ?? [], null);
        $this->setIfExists('tipo_bollo', $data ?? [], null);
        $this->setIfExists('hash_documento', $data ?? [], null);
        $this->setIfExists('provincia_residenza', $data ?? [], null);
        $this->setIfExists('id_voce_pendenza', $data ?? [], null);
        $this->setIfExists('importo', $data ?? [], null);
        $this->setIfExists('descrizione', $data ?? [], null);
        $this->setIfExists('dati_allegati', $data ?? [], null);
        $this->setIfExists('descrizione_causale_rpt', $data ?? [], null);
        $this->setIfExists('contabilita', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('indice', $data ?? [], null);
        $this->setIfExists('stato', $data ?? [], null);
        $this->setIfExists('dominio', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cod_entrata'] === null) {
            $invalidProperties[] = "'cod_entrata' can't be null";
        }
        if (!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", $this->container['cod_entrata'])) {
            $invalidProperties[] = "invalid value for 'cod_entrata', must be conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.";
        }

        if ($this->container['iban_accredito'] === null) {
            $invalidProperties[] = "'iban_accredito' can't be null";
        }
        if (!preg_match("/[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/", $this->container['iban_accredito'])) {
            $invalidProperties[] = "invalid value for 'iban_accredito', must be conform to the pattern /[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/.";
        }

        if (!is_null($this->container['iban_appoggio']) && !preg_match("/[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/", $this->container['iban_appoggio'])) {
            $invalidProperties[] = "invalid value for 'iban_appoggio', must be conform to the pattern /[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/.";
        }

        if ($this->container['tipo_contabilita'] === null) {
            $invalidProperties[] = "'tipo_contabilita' can't be null";
        }
        if ($this->container['codice_contabilita'] === null) {
            $invalidProperties[] = "'codice_contabilita' can't be null";
        }
        if ((mb_strlen($this->container['codice_contabilita']) > 135)) {
            $invalidProperties[] = "invalid value for 'codice_contabilita', the character length must be smaller than or equal to 135.";
        }

        if ((mb_strlen($this->container['codice_contabilita']) < 1)) {
            $invalidProperties[] = "invalid value for 'codice_contabilita', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['tipo_bollo'] === null) {
            $invalidProperties[] = "'tipo_bollo' can't be null";
        }
        $allowedValues = $this->getTipoBolloAllowableValues();
        if (!is_null($this->container['tipo_bollo']) && !in_array($this->container['tipo_bollo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tipo_bollo', must be one of '%s'",
                $this->container['tipo_bollo'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['hash_documento'] === null) {
            $invalidProperties[] = "'hash_documento' can't be null";
        }
        if ((mb_strlen($this->container['hash_documento']) > 70)) {
            $invalidProperties[] = "invalid value for 'hash_documento', the character length must be smaller than or equal to 70.";
        }

        if ($this->container['provincia_residenza'] === null) {
            $invalidProperties[] = "'provincia_residenza' can't be null";
        }
        if (!preg_match("/[A-Z]{2,2}/", $this->container['provincia_residenza'])) {
            $invalidProperties[] = "invalid value for 'provincia_residenza', must be conform to the pattern /[A-Z]{2,2}/.";
        }

        if ($this->container['id_voce_pendenza'] === null) {
            $invalidProperties[] = "'id_voce_pendenza' can't be null";
        }
        if ((mb_strlen($this->container['id_voce_pendenza']) > 35)) {
            $invalidProperties[] = "invalid value for 'id_voce_pendenza', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['id_voce_pendenza']) < 1)) {
            $invalidProperties[] = "invalid value for 'id_voce_pendenza', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['importo'] === null) {
            $invalidProperties[] = "'importo' can't be null";
        }
        if (($this->container['importo'] > 10000000000000000)) {
            $invalidProperties[] = "invalid value for 'importo', must be smaller than or equal to 10000000000000000.";
        }

        if (($this->container['importo'] < 0)) {
            $invalidProperties[] = "invalid value for 'importo', must be bigger than or equal to 0.";
        }

        if ($this->container['descrizione'] === null) {
            $invalidProperties[] = "'descrizione' can't be null";
        }
        if ((mb_strlen($this->container['descrizione']) > 140)) {
            $invalidProperties[] = "invalid value for 'descrizione', the character length must be smaller than or equal to 140.";
        }

        if ((mb_strlen($this->container['descrizione']) < 1)) {
            $invalidProperties[] = "invalid value for 'descrizione', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['descrizione_causale_rpt']) && (mb_strlen($this->container['descrizione_causale_rpt']) > 140)) {
            $invalidProperties[] = "invalid value for 'descrizione_causale_rpt', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['descrizione_causale_rpt']) && (mb_strlen($this->container['descrizione_causale_rpt']) < 1)) {
            $invalidProperties[] = "invalid value for 'descrizione_causale_rpt', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['indice'] === null) {
            $invalidProperties[] = "'indice' can't be null";
        }
        if (($this->container['indice'] > 5)) {
            $invalidProperties[] = "invalid value for 'indice', must be smaller than or equal to 5.";
        }

        if (($this->container['indice'] < 1)) {
            $invalidProperties[] = "invalid value for 'indice', must be bigger than or equal to 1.";
        }

        if ($this->container['stato'] === null) {
            $invalidProperties[] = "'stato' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cod_entrata
     *
     * @return string
     */
    public function getCodEntrata()
    {
        return $this->container['cod_entrata'];
    }

    /**
     * Sets cod_entrata
     *
     * @param string $cod_entrata cod_entrata
     *
     * @return self
     */
    public function setCodEntrata($cod_entrata)
    {
        if (is_null($cod_entrata)) {
            throw new \InvalidArgumentException('non-nullable cod_entrata cannot be null');
        }

        if ((!preg_match("/(^[a-zA-Z0-9\\-_\\.]{1,35}$)/", ObjectSerializer::toString($cod_entrata)))) {
            throw new \InvalidArgumentException("invalid value for \$cod_entrata when calling VocePendenza., must conform to the pattern /(^[a-zA-Z0-9\\-_\\.]{1,35}$)/.");
        }

        $this->container['cod_entrata'] = $cod_entrata;

        return $this;
    }

    /**
     * Gets iban_accredito
     *
     * @return string
     */
    public function getIbanAccredito()
    {
        return $this->container['iban_accredito'];
    }

    /**
     * Sets iban_accredito
     *
     * @param string $iban_accredito iban_accredito
     *
     * @return self
     */
    public function setIbanAccredito($iban_accredito)
    {
        if (is_null($iban_accredito)) {
            throw new \InvalidArgumentException('non-nullable iban_accredito cannot be null');
        }

        if ((!preg_match("/[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/", ObjectSerializer::toString($iban_accredito)))) {
            throw new \InvalidArgumentException("invalid value for \$iban_accredito when calling VocePendenza., must conform to the pattern /[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/.");
        }

        $this->container['iban_accredito'] = $iban_accredito;

        return $this;
    }

    /**
     * Gets iban_appoggio
     *
     * @return string|null
     */
    public function getIbanAppoggio()
    {
        return $this->container['iban_appoggio'];
    }

    /**
     * Sets iban_appoggio
     *
     * @param string|null $iban_appoggio iban_appoggio
     *
     * @return self
     */
    public function setIbanAppoggio($iban_appoggio)
    {
        if (is_null($iban_appoggio)) {
            throw new \InvalidArgumentException('non-nullable iban_appoggio cannot be null');
        }

        if ((!preg_match("/[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/", ObjectSerializer::toString($iban_appoggio)))) {
            throw new \InvalidArgumentException("invalid value for \$iban_appoggio when calling VocePendenza., must conform to the pattern /[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/.");
        }

        $this->container['iban_appoggio'] = $iban_appoggio;

        return $this;
    }

    /**
     * Gets tipo_contabilita
     *
     * @return \GovPay\Pendenze\Model\TipoContabilita
     */
    public function getTipoContabilita()
    {
        return $this->container['tipo_contabilita'];
    }

    /**
     * Sets tipo_contabilita
     *
     * @param \GovPay\Pendenze\Model\TipoContabilita $tipo_contabilita tipo_contabilita
     *
     * @return self
     */
    public function setTipoContabilita($tipo_contabilita)
    {
        if (is_null($tipo_contabilita)) {
            throw new \InvalidArgumentException('non-nullable tipo_contabilita cannot be null');
        }
        $this->container['tipo_contabilita'] = $tipo_contabilita;

        return $this;
    }

    /**
     * Gets codice_contabilita
     *
     * @return string
     */
    public function getCodiceContabilita()
    {
        return $this->container['codice_contabilita'];
    }

    /**
     * Sets codice_contabilita
     *
     * @param string $codice_contabilita Codifica del capitolo di bilancio
     *
     * @return self
     */
    public function setCodiceContabilita($codice_contabilita)
    {
        if (is_null($codice_contabilita)) {
            throw new \InvalidArgumentException('non-nullable codice_contabilita cannot be null');
        }
        if ((mb_strlen($codice_contabilita) > 135)) {
            throw new \InvalidArgumentException('invalid length for $codice_contabilita when calling VocePendenza., must be smaller than or equal to 135.');
        }
        if ((mb_strlen($codice_contabilita) < 1)) {
            throw new \InvalidArgumentException('invalid length for $codice_contabilita when calling VocePendenza., must be bigger than or equal to 1.');
        }

        $this->container['codice_contabilita'] = $codice_contabilita;

        return $this;
    }

    /**
     * Gets tipo_bollo
     *
     * @return string
     */
    public function getTipoBollo()
    {
        return $this->container['tipo_bollo'];
    }

    /**
     * Sets tipo_bollo
     *
     * @param string $tipo_bollo Tipologia di Bollo digitale
     *
     * @return self
     */
    public function setTipoBollo($tipo_bollo)
    {
        if (is_null($tipo_bollo)) {
            throw new \InvalidArgumentException('non-nullable tipo_bollo cannot be null');
        }
        $allowedValues = $this->getTipoBolloAllowableValues();
        if (!in_array($tipo_bollo, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tipo_bollo', must be one of '%s'",
                    $tipo_bollo,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_bollo'] = $tipo_bollo;

        return $this;
    }

    /**
     * Gets hash_documento
     *
     * @return string
     */
    public function getHashDocumento()
    {
        return $this->container['hash_documento'];
    }

    /**
     * Sets hash_documento
     *
     * @param string $hash_documento Digest in base64 del documento informatico associato alla marca da bollo
     *
     * @return self
     */
    public function setHashDocumento($hash_documento)
    {
        if (is_null($hash_documento)) {
            throw new \InvalidArgumentException('non-nullable hash_documento cannot be null');
        }
        if ((mb_strlen($hash_documento) > 70)) {
            throw new \InvalidArgumentException('invalid length for $hash_documento when calling VocePendenza., must be smaller than or equal to 70.');
        }

        $this->container['hash_documento'] = $hash_documento;

        return $this;
    }

    /**
     * Gets provincia_residenza
     *
     * @return string
     */
    public function getProvinciaResidenza()
    {
        return $this->container['provincia_residenza'];
    }

    /**
     * Sets provincia_residenza
     *
     * @param string $provincia_residenza Sigla automobilistica della provincia di residenza del soggetto pagatore
     *
     * @return self
     */
    public function setProvinciaResidenza($provincia_residenza)
    {
        if (is_null($provincia_residenza)) {
            throw new \InvalidArgumentException('non-nullable provincia_residenza cannot be null');
        }

        if ((!preg_match("/[A-Z]{2,2}/", ObjectSerializer::toString($provincia_residenza)))) {
            throw new \InvalidArgumentException("invalid value for \$provincia_residenza when calling VocePendenza., must conform to the pattern /[A-Z]{2,2}/.");
        }

        $this->container['provincia_residenza'] = $provincia_residenza;

        return $this;
    }

    /**
     * Gets id_voce_pendenza
     *
     * @return string
     */
    public function getIdVocePendenza()
    {
        return $this->container['id_voce_pendenza'];
    }

    /**
     * Sets id_voce_pendenza
     *
     * @param string $id_voce_pendenza Identificativo della voce di pedenza nel gestionale proprietario
     *
     * @return self
     */
    public function setIdVocePendenza($id_voce_pendenza)
    {
        if (is_null($id_voce_pendenza)) {
            throw new \InvalidArgumentException('non-nullable id_voce_pendenza cannot be null');
        }
        if ((mb_strlen($id_voce_pendenza) > 35)) {
            throw new \InvalidArgumentException('invalid length for $id_voce_pendenza when calling VocePendenza., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($id_voce_pendenza) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id_voce_pendenza when calling VocePendenza., must be bigger than or equal to 1.');
        }

        $this->container['id_voce_pendenza'] = $id_voce_pendenza;

        return $this;
    }

    /**
     * Gets importo
     *
     * @return float
     */
    public function getImporto()
    {
        return $this->container['importo'];
    }

    /**
     * Sets importo
     *
     * @param float $importo Importo della voce
     *
     * @return self
     */
    public function setImporto($importo)
    {
        if (is_null($importo)) {
            throw new \InvalidArgumentException('non-nullable importo cannot be null');
        }

        if (($importo > 10000000000000000)) {
            throw new \InvalidArgumentException('invalid value for $importo when calling VocePendenza., must be smaller than or equal to 10000000000000000.');
        }
        if (($importo < 0)) {
            throw new \InvalidArgumentException('invalid value for $importo when calling VocePendenza., must be bigger than or equal to 0.');
        }

        $this->container['importo'] = $importo;

        return $this;
    }

    /**
     * Gets descrizione
     *
     * @return string
     */
    public function getDescrizione()
    {
        return $this->container['descrizione'];
    }

    /**
     * Sets descrizione
     *
     * @param string $descrizione descrizione della voce di pagamento
     *
     * @return self
     */
    public function setDescrizione($descrizione)
    {
        if (is_null($descrizione)) {
            throw new \InvalidArgumentException('non-nullable descrizione cannot be null');
        }
        if ((mb_strlen($descrizione) > 140)) {
            throw new \InvalidArgumentException('invalid length for $descrizione when calling VocePendenza., must be smaller than or equal to 140.');
        }
        if ((mb_strlen($descrizione) < 1)) {
            throw new \InvalidArgumentException('invalid length for $descrizione when calling VocePendenza., must be bigger than or equal to 1.');
        }

        $this->container['descrizione'] = $descrizione;

        return $this;
    }

    /**
     * Gets dati_allegati
     *
     * @return object|null
     */
    public function getDatiAllegati()
    {
        return $this->container['dati_allegati'];
    }

    /**
     * Sets dati_allegati
     *
     * @param object|null $dati_allegati Dati applicativi allegati dal gestionale secondo un formato proprietario.
     *
     * @return self
     */
    public function setDatiAllegati($dati_allegati)
    {
        if (is_null($dati_allegati)) {
            throw new \InvalidArgumentException('non-nullable dati_allegati cannot be null');
        }
        $this->container['dati_allegati'] = $dati_allegati;

        return $this;
    }

    /**
     * Gets descrizione_causale_rpt
     *
     * @return string|null
     */
    public function getDescrizioneCausaleRpt()
    {
        return $this->container['descrizione_causale_rpt'];
    }

    /**
     * Sets descrizione_causale_rpt
     *
     * @param string|null $descrizione_causale_rpt Testo libero per la causale versamento
     *
     * @return self
     */
    public function setDescrizioneCausaleRpt($descrizione_causale_rpt)
    {
        if (is_null($descrizione_causale_rpt)) {
            throw new \InvalidArgumentException('non-nullable descrizione_causale_rpt cannot be null');
        }
        if ((mb_strlen($descrizione_causale_rpt) > 140)) {
            throw new \InvalidArgumentException('invalid length for $descrizione_causale_rpt when calling VocePendenza., must be smaller than or equal to 140.');
        }
        if ((mb_strlen($descrizione_causale_rpt) < 1)) {
            throw new \InvalidArgumentException('invalid length for $descrizione_causale_rpt when calling VocePendenza., must be bigger than or equal to 1.');
        }

        $this->container['descrizione_causale_rpt'] = $descrizione_causale_rpt;

        return $this;
    }

    /**
     * Gets contabilita
     *
     * @return \GovPay\Pendenze\Model\Contabilita|null
     */
    public function getContabilita()
    {
        return $this->container['contabilita'];
    }

    /**
     * Sets contabilita
     *
     * @param \GovPay\Pendenze\Model\Contabilita|null $contabilita contabilita
     *
     * @return self
     */
    public function setContabilita($contabilita)
    {
        if (is_null($contabilita)) {
            throw new \InvalidArgumentException('non-nullable contabilita cannot be null');
        }
        $this->container['contabilita'] = $contabilita;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \GovPay\Pendenze\Model\Metadata|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \GovPay\Pendenze\Model\Metadata|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets indice
     *
     * @return int
     */
    public function getIndice()
    {
        return $this->container['indice'];
    }

    /**
     * Sets indice
     *
     * @param int $indice indice di voce all'interno della pendenza
     *
     * @return self
     */
    public function setIndice($indice)
    {
        if (is_null($indice)) {
            throw new \InvalidArgumentException('non-nullable indice cannot be null');
        }

        if (($indice > 5)) {
            throw new \InvalidArgumentException('invalid value for $indice when calling VocePendenza., must be smaller than or equal to 5.');
        }
        if (($indice < 1)) {
            throw new \InvalidArgumentException('invalid value for $indice when calling VocePendenza., must be bigger than or equal to 1.');
        }

        $this->container['indice'] = $indice;

        return $this;
    }

    /**
     * Gets stato
     *
     * @return \GovPay\Pendenze\Model\StatoVocePendenza
     */
    public function getStato()
    {
        return $this->container['stato'];
    }

    /**
     * Sets stato
     *
     * @param \GovPay\Pendenze\Model\StatoVocePendenza $stato stato
     *
     * @return self
     */
    public function setStato($stato)
    {
        if (is_null($stato)) {
            throw new \InvalidArgumentException('non-nullable stato cannot be null');
        }
        $this->container['stato'] = $stato;

        return $this;
    }

    /**
     * Gets dominio
     *
     * @return \GovPay\Pendenze\Model\Dominio|null
     */
    public function getDominio()
    {
        return $this->container['dominio'];
    }

    /**
     * Sets dominio
     *
     * @param \GovPay\Pendenze\Model\Dominio|null $dominio dominio
     *
     * @return self
     */
    public function setDominio($dominio)
    {
        if (is_null($dominio)) {
            throw new \InvalidArgumentException('non-nullable dominio cannot be null');
        }
        $this->container['dominio'] = $dominio;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



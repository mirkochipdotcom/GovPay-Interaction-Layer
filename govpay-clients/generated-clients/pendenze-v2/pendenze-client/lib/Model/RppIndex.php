<?php
/**
 * RppIndex
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  GovPay\Pendenze
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GovPay - API Pendenze
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.16.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GovPay\Pendenze\Model;

use \ArrayAccess;
use \GovPay\Pendenze\ObjectSerializer;

/**
 * RppIndex Class Doc Comment
 *
 * @category Class
 * @package  GovPay\Pendenze
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RppIndex implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RppIndex';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'stato' => 'string',
        'dettaglio_stato' => 'string',
        'segnalazioni' => '\GovPay\Pendenze\Model\Segnalazione[]',
        'rpt' => 'object',
        'rt' => 'object',
        'pendenza' => '\GovPay\Pendenze\Model\PendenzaIndex'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'stato' => null,
        'dettaglio_stato' => null,
        'segnalazioni' => null,
        'rpt' => null,
        'rt' => null,
        'pendenza' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'stato' => false,
        'dettaglio_stato' => false,
        'segnalazioni' => false,
        'rpt' => false,
        'rt' => false,
        'pendenza' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stato' => 'stato',
        'dettaglio_stato' => 'dettaglioStato',
        'segnalazioni' => 'segnalazioni',
        'rpt' => 'rpt',
        'rt' => 'rt',
        'pendenza' => 'pendenza'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stato' => 'setStato',
        'dettaglio_stato' => 'setDettaglioStato',
        'segnalazioni' => 'setSegnalazioni',
        'rpt' => 'setRpt',
        'rt' => 'setRt',
        'pendenza' => 'setPendenza'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stato' => 'getStato',
        'dettaglio_stato' => 'getDettaglioStato',
        'segnalazioni' => 'getSegnalazioni',
        'rpt' => 'getRpt',
        'rt' => 'getRt',
        'pendenza' => 'getPendenza'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('stato', $data ?? [], null);
        $this->setIfExists('dettaglio_stato', $data ?? [], null);
        $this->setIfExists('segnalazioni', $data ?? [], null);
        $this->setIfExists('rpt', $data ?? [], null);
        $this->setIfExists('rt', $data ?? [], null);
        $this->setIfExists('pendenza', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['stato'] === null) {
            $invalidProperties[] = "'stato' can't be null";
        }
        if ($this->container['rpt'] === null) {
            $invalidProperties[] = "'rpt' can't be null";
        }
        if ($this->container['pendenza'] === null) {
            $invalidProperties[] = "'pendenza' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stato
     *
     * @return string
     */
    public function getStato()
    {
        return $this->container['stato'];
    }

    /**
     * Sets stato
     *
     * @param string $stato Stato della richiesta di pagamento sulla piattaforma PagoPA.
     *
     * @return self
     */
    public function setStato($stato)
    {
        if (is_null($stato)) {
            throw new \InvalidArgumentException('non-nullable stato cannot be null');
        }
        $this->container['stato'] = $stato;

        return $this;
    }

    /**
     * Gets dettaglio_stato
     *
     * @return string|null
     */
    public function getDettaglioStato()
    {
        return $this->container['dettaglio_stato'];
    }

    /**
     * Sets dettaglio_stato
     *
     * @param string|null $dettaglio_stato Dettaglio fornito dal Nodo dei Pagamenti sullo stato della richiesta.
     *
     * @return self
     */
    public function setDettaglioStato($dettaglio_stato)
    {
        if (is_null($dettaglio_stato)) {
            throw new \InvalidArgumentException('non-nullable dettaglio_stato cannot be null');
        }
        $this->container['dettaglio_stato'] = $dettaglio_stato;

        return $this;
    }

    /**
     * Gets segnalazioni
     *
     * @return \GovPay\Pendenze\Model\Segnalazione[]|null
     */
    public function getSegnalazioni()
    {
        return $this->container['segnalazioni'];
    }

    /**
     * Sets segnalazioni
     *
     * @param \GovPay\Pendenze\Model\Segnalazione[]|null $segnalazioni segnalazioni
     *
     * @return self
     */
    public function setSegnalazioni($segnalazioni)
    {
        if (is_null($segnalazioni)) {
            throw new \InvalidArgumentException('non-nullable segnalazioni cannot be null');
        }
        $this->container['segnalazioni'] = $segnalazioni;

        return $this;
    }

    /**
     * Gets rpt
     *
     * @return object
     */
    public function getRpt()
    {
        return $this->container['rpt'];
    }

    /**
     * Sets rpt
     *
     * @param object $rpt Rpt inviata a PagoPa. {http://www.digitpa.gov.it/schemas/2011/Pagamenti/} ctRichiestaPagamentoTelematico
     *
     * @return self
     */
    public function setRpt($rpt)
    {
        if (is_null($rpt)) {
            throw new \InvalidArgumentException('non-nullable rpt cannot be null');
        }
        $this->container['rpt'] = $rpt;

        return $this;
    }

    /**
     * Gets rt
     *
     * @return object|null
     */
    public function getRt()
    {
        return $this->container['rt'];
    }

    /**
     * Sets rt
     *
     * @param object|null $rt Rt inviata da PagoPa. {http://www.digitpa.gov.it/schemas/2011/Pagamenti/} ctRicevutaTelematica
     *
     * @return self
     */
    public function setRt($rt)
    {
        if (is_null($rt)) {
            throw new \InvalidArgumentException('non-nullable rt cannot be null');
        }
        $this->container['rt'] = $rt;

        return $this;
    }

    /**
     * Gets pendenza
     *
     * @return \GovPay\Pendenze\Model\PendenzaIndex
     */
    public function getPendenza()
    {
        return $this->container['pendenza'];
    }

    /**
     * Sets pendenza
     *
     * @param \GovPay\Pendenze\Model\PendenzaIndex $pendenza pendenza
     *
     * @return self
     */
    public function setPendenza($pendenza)
    {
        if (is_null($pendenza)) {
            throw new \InvalidArgumentException('non-nullable pendenza cannot be null');
        }
        $this->container['pendenza'] = $pendenza;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


